
AVRASM ver. 2.1.30  C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\1_abrehforoush\CodeVisionAVR\Debug\List\io_port.asm Tue Feb 28 16:42:56 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 063f
000034 4f5b
000035 6d66
000036 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000037 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
000038 000a      	.DW  0x0A
000039 0160      	.DW  _digits
00003a 0066      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0069 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void part1();
                 ;void part2();
                 ;void part3();
                 ;void part4();
                 ;void showDigit(char n);
                 ;void showNumber(int counter);
                 ;void part5();
                 ;void showNumberWithReset(int counter);
                 ;void part6();
                 ;char digits[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 002F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0030 // Declare your local variables here
                 ; 0000 0031 
                 ; 0000 0032 // Input/Output Ports initialization
                 ; 0000 0033 // Port A initialization
                 ; 0000 0034 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0035 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
000069 e0e0      	LDI  R30,LOW(0)
00006a bbea      	OUT  0x1A,R30
                 ; 0000 0036 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0037 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
00006b bbeb      	OUT  0x1B,R30
                 ; 0000 0038 
                 ; 0000 0039 // Port B initialization
                 ; 0000 003A // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0000 003B DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1< ...
00006c efef      	LDI  R30,LOW(255)
00006d bbe7      	OUT  0x17,R30
                 ; 0000 003C // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 003D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
00006e e0e0      	LDI  R30,LOW(0)
00006f bbe8      	OUT  0x18,R30
                 ; 0000 003E 
                 ; 0000 003F // Port C initialization
                 ; 0000 0040 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0000 0041 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1< ...
000070 efef      	LDI  R30,LOW(255)
000071 bbe4      	OUT  0x14,R30
                 ; 0000 0042 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0043 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
000072 e0e0      	LDI  R30,LOW(0)
000073 bbe5      	OUT  0x15,R30
                 ; 0000 0044 
                 ; 0000 0045 // Port D initialization
                 ; 0000 0046 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0047 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1< ...
000074 e0ef      	LDI  R30,LOW(15)
000075 bbe1      	OUT  0x11,R30
                 ; 0000 0048 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0049 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
000076 e0e0      	LDI  R30,LOW(0)
000077 bbe2      	OUT  0x12,R30
                 ; 0000 004A 
                 ; 0000 004B // Timer/Counter 0 initialization
                 ; 0000 004C // Clock source: System Clock
                 ; 0000 004D // Clock value: Timer 0 Stopped
                 ; 0000 004E // Mode: Normal top=0xFF
                 ; 0000 004F // OC0 output: Disconnected
                 ; 0000 0050 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01)  ...
000078 bfe3      	OUT  0x33,R30
                 ; 0000 0051 TCNT0=0x00;
000079 bfe2      	OUT  0x32,R30
                 ; 0000 0052 OCR0=0x00;
00007a bfec      	OUT  0x3C,R30
                 ; 0000 0053 
                 ; 0000 0054 // Timer/Counter 1 initialization
                 ; 0000 0055 // Clock source: System Clock
                 ; 0000 0056 // Clock value: Timer1 Stopped
                 ; 0000 0057 // Mode: Normal top=0xFFFF
                 ; 0000 0058 // OC1A output: Disconnected
                 ; 0000 0059 // OC1B output: Disconnected
                 ; 0000 005A // Noise Canceler: Off
                 ; 0000 005B // Input Capture on Falling Edge
                 ; 0000 005C // Timer1 Overflow Interrupt: Off
                 ; 0000 005D // Input Capture Interrupt: Off
                 ; 0000 005E // Compare A Match Interrupt: Off
                 ; 0000 005F // Compare B Match Interrupt: Off
                 ; 0000 0060 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
00007b bdef      	OUT  0x2F,R30
                 ; 0000 0061 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) ...
00007c bdee      	OUT  0x2E,R30
                 ; 0000 0062 TCNT1H=0x00;
00007d bded      	OUT  0x2D,R30
                 ; 0000 0063 TCNT1L=0x00;
00007e bdec      	OUT  0x2C,R30
                 ; 0000 0064 ICR1H=0x00;
00007f bde7      	OUT  0x27,R30
                 ; 0000 0065 ICR1L=0x00;
000080 bde6      	OUT  0x26,R30
                 ; 0000 0066 OCR1AH=0x00;
000081 bdeb      	OUT  0x2B,R30
                 ; 0000 0067 OCR1AL=0x00;
000082 bdea      	OUT  0x2A,R30
                 ; 0000 0068 OCR1BH=0x00;
000083 bde9      	OUT  0x29,R30
                 ; 0000 0069 OCR1BL=0x00;
000084 bde8      	OUT  0x28,R30
                 ; 0000 006A 
                 ; 0000 006B // Timer/Counter 2 initialization
                 ; 0000 006C // Clock source: System Clock
                 ; 0000 006D // Clock value: Timer2 Stopped
                 ; 0000 006E // Mode: Normal top=0xFF
                 ; 0000 006F // OC2 output: Disconnected
                 ; 0000 0070 ASSR=0<<AS2;
000085 bde2      	OUT  0x22,R30
                 ; 0000 0071 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) |  ...
000086 bde5      	OUT  0x25,R30
                 ; 0000 0072 TCNT2=0x00;
000087 bde4      	OUT  0x24,R30
                 ; 0000 0073 OCR2=0x00;
000088 bde3      	OUT  0x23,R30
                 ; 0000 0074 
                 ; 0000 0075 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0076 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
000089 bfe9      	OUT  0x39,R30
                 ; 0000 0077 
                 ; 0000 0078 // External Interrupt(s) initialization
                 ; 0000 0079 // INT0: Off
                 ; 0000 007A // INT1: Off
                 ; 0000 007B // INT2: Off
                 ; 0000 007C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00008a bfe5      	OUT  0x35,R30
                 ; 0000 007D MCUCSR=(0<<ISC2);
00008b bfe4      	OUT  0x34,R30
                 ; 0000 007E 
                 ; 0000 007F // USART initialization
                 ; 0000 0080 // USART disabled
                 ; 0000 0081 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2)  ...
00008c b9ea      	OUT  0xA,R30
                 ; 0000 0082 
                 ; 0000 0083 // Analog Comparator initialization
                 ; 0000 0084 // Analog Comparator: Off
                 ; 0000 0085 // The Analog Comparator's positive input is
                 ; 0000 0086 // connected to the AIN0 pin
                 ; 0000 0087 // The Analog Comparator's negative input is
                 ; 0000 0088 // connected to the AIN1 pin
                 ; 0000 0089 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
00008d e8e0      	LDI  R30,LOW(128)
00008e b9e8      	OUT  0x8,R30
                 ; 0000 008A SFIOR=(0<<ACME);
00008f e0e0      	LDI  R30,LOW(0)
000090 bfe0      	OUT  0x30,R30
                 ; 0000 008B 
                 ; 0000 008C // ADC initialization
                 ; 0000 008D // ADC disabled
                 ; 0000 008E ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
000091 b9e6      	OUT  0x6,R30
                 ; 0000 008F 
                 ; 0000 0090 // SPI initialization
                 ; 0000 0091 // SPI disabled
                 ; 0000 0092 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
000092 b9ed      	OUT  0xD,R30
                 ; 0000 0093 
                 ; 0000 0094 // TWI initialization
                 ; 0000 0095 // TWI disabled
                 ; 0000 0096 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000093 bfe6      	OUT  0x36,R30
                 ; 0000 0097 
                 ; 0000 0098 /////////////////////////////////////////////////////////////////////////
                 ; 0000 0099 DDRA = 0x00;
000094 bbea      	OUT  0x1A,R30
                 ; 0000 009A DDRB = 0xff;
000095 efef      	LDI  R30,LOW(255)
000096 bbe7      	OUT  0x17,R30
                 ; 0000 009B DDRC = 0xff;
000097 bbe4      	OUT  0x14,R30
                 ; 0000 009C DDRD = 0x0f;
000098 e0ef      	LDI  R30,LOW(15)
000099 bbe1      	OUT  0x11,R30
                 ; 0000 009D 
                 ; 0000 009E 
                 ; 0000 009F 
                 ; 0000 00A0 
                 ; 0000 00A1 while (1)
                 _0x4:
                 ; 0000 00A2 {
                 ; 0000 00A3 // Place your code here
                 ; 0000 00A4 part1();
00009a d013      	RCALL _part1
                 ; 0000 00A5 delay_ms(1000);
00009b 940e 0188 	CALL SUBOPT_0x0
                 ; 0000 00A6 part2();
00009d d02a      	RCALL _part2
                 ; 0000 00A7 delay_ms(1000);
00009e 940e 0188 	CALL SUBOPT_0x0
                 ; 0000 00A8 part3();
0000a0 d03e      	RCALL _part3
                 ; 0000 00A9 delay_ms(1000);
0000a1 940e 0188 	CALL SUBOPT_0x0
                 ; 0000 00AA part4();
0000a3 d041      	RCALL _part4
                 ; 0000 00AB delay_ms(1000);
0000a4 940e 0188 	CALL SUBOPT_0x0
                 ; 0000 00AC part5();
0000a6 d090      	RCALL _part5
                 ; 0000 00AD delay_ms(1000);
0000a7 940e 0188 	CALL SUBOPT_0x0
                 ; 0000 00AE part6();
0000a9 d0d1      	RCALL _part6
                 ; 0000 00AF delay_ms(1000);
0000aa 940e 0188 	CALL SUBOPT_0x0
                 ; 0000 00B0 }
0000ac cfed      	RJMP _0x4
                 ; 0000 00B1 }
                 _0x7:
0000ad cfff      	RJMP _0x7
                 ; .FEND
                 ;void part1()
                 ; 0000 00B5 {
                 _part1:
                 ; .FSTART _part1
                 ; 0000 00B6 int i = 0;
                 ; 0000 00B7 for (i = 0; i < 4; i++)
0000ae 931a      	ST   -Y,R17
0000af 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0000b0 e000     +LDI R16 , LOW ( 0 )
0000b1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000b2 e000     +LDI R16 , LOW ( 0 )
0000b3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9:
                +
0000b4 3004     +CPI R16 , LOW ( 4 )
0000b5 e0e0     +LDI R30 , HIGH ( 4 )
0000b6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0000b7 f47c      	BRGE _0xA
                 ; 0000 00B8 {
                 ; 0000 00B9 PORTB = 0xff;
0000b8 efef      	LDI  R30,LOW(255)
0000b9 bbe8      	OUT  0x18,R30
                 ; 0000 00BA delay_ms(500);
0000ba efa4      	LDI  R26,LOW(500)
0000bb e0b1      	LDI  R27,HIGH(500)
0000bc 940e 0223 	CALL _delay_ms
                 ; 0000 00BB PORTB = 0x00;
0000be e0e0      	LDI  R30,LOW(0)
0000bf bbe8      	OUT  0x18,R30
                 ; 0000 00BC delay_ms(500);
0000c0 efa4      	LDI  R26,LOW(500)
0000c1 e0b1      	LDI  R27,HIGH(500)
0000c2 940e 0223 	CALL _delay_ms
                 ; 0000 00BD }
                +
0000c4 5f0f     +SUBI R16 , LOW ( - 1 )
0000c5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c6 cfed      	RJMP _0x9
                 _0xA:
                 ; 0000 00BE return;
0000c7 c032      	RJMP _0x2060003
                 ; 0000 00BF }
                 ; .FEND
                 ;void part2()
                 ; 0000 00C3 {
                 _part2:
                 ; .FSTART _part2
                 ; 0000 00C4 int i;
                 ; 0000 00C5 PORTB = 0b10000000;
0000c8 931a      	ST   -Y,R17
0000c9 930a      	ST   -Y,R16
                 ;	i -> R16,R17
0000ca e8e0      	LDI  R30,LOW(128)
0000cb bbe8      	OUT  0x18,R30
                 ; 0000 00C6 i = 0;
                +
0000cc e000     +LDI R16 , LOW ( 0 )
0000cd e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 00C7 for (; i < 10; i++)
                 _0xC:
                +
0000ce 300a     +CPI R16 , LOW ( 10 )
0000cf e0e0     +LDI R30 , HIGH ( 10 )
0000d0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,10
0000d1 f464      	BRGE _0xD
                 ; 0000 00C8 {
                 ; 0000 00C9 delay_ms(300);
0000d2 e2ac      	LDI  R26,LOW(300)
0000d3 e0b1      	LDI  R27,HIGH(300)
0000d4 940e 0223 	CALL _delay_ms
                 ; 0000 00CA PORTB = PORTB >> 1;
0000d6 b3e8      	IN   R30,0x18
0000d7 e0f0      	LDI  R31,0
0000d8 95f5      	ASR  R31
0000d9 95e7      	ROR  R30
0000da bbe8      	OUT  0x18,R30
                 ; 0000 00CB }
                +
0000db 5f0f     +SUBI R16 , LOW ( - 1 )
0000dc 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000dd cff0      	RJMP _0xC
                 _0xD:
                 ; 0000 00CC return;
0000de c01b      	RJMP _0x2060003
                 ; 0000 00CD }
                 ; .FEND
                 ;void part3()
                 ; 0000 00D1 {
                 _part3:
                 ; .FSTART _part3
                 ; 0000 00D2 char number = 0;
                 ; 0000 00D3 //    while(1)
                 ; 0000 00D4 //    {
                 ; 0000 00D5 //        number = PINA;
                 ; 0000 00D6 //        PORTB = number;
                 ; 0000 00D7 //    }
                 ; 0000 00D8 number = PINA;
0000df 931a      	ST   -Y,R17
                 ;	number -> R17
0000e0 e010      	LDI  R17,0
0000e1 b319      	IN   R17,25
                 ; 0000 00D9 PORTB = number;
0000e2 bb18      	OUT  0x18,R17
                 ; 0000 00DA return;
0000e3 9119      	LD   R17,Y+
0000e4 9508      	RET
                 ; 0000 00DB }
                 ; .FEND
                 ;void part4()
                 ; 0000 00DF {
                 _part4:
                 ; .FSTART _part4
                 ; 0000 00E0 int i = 9;
                 ; 0000 00E1 for (i = 9; i >= 0; i--)
0000e5 931a      	ST   -Y,R17
0000e6 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0000e7 e009     +LDI R16 , LOW ( 9 )
0000e8 e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                +
0000e9 e009     +LDI R16 , LOW ( 9 )
0000ea e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 _0xF:
0000eb 2311      	TST  R17
0000ec f06a      	BRMI _0x10
                 ; 0000 00E2 {
                 ; 0000 00E3 PORTC = digits[i];
0000ed e6a0      	LDI  R26,LOW(_digits)
0000ee e0b1      	LDI  R27,HIGH(_digits)
0000ef 0fa0      	ADD  R26,R16
0000f0 1fb1      	ADC  R27,R17
0000f1 91ec      	LD   R30,X
0000f2 bbe5      	OUT  0x15,R30
                 ; 0000 00E4 delay_ms(250);
0000f3 efaa      	LDI  R26,LOW(250)
0000f4 e0b0      	LDI  R27,0
0000f5 940e 0223 	CALL _delay_ms
                 ; 0000 00E5 }
                +
0000f7 5001     +SUBI R16 , LOW ( 1 )
0000f8 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000f9 cff1      	RJMP _0xF
                 _0x10:
                 ; 0000 00E6 return;
                 _0x2060003:
0000fa 9109      	LD   R16,Y+
0000fb 9119      	LD   R17,Y+
0000fc 9508      	RET
                 ; 0000 00E7 }
                 ; .FEND
                 ;void showDigit(char n)
                 ; 0000 00EA {
                 _showDigit:
                 ; .FSTART _showDigit
                 ; 0000 00EB int i = 0;
                 ; 0000 00EC 
                 ; 0000 00ED PORTD.0 = 1;
0000fd 940e 01e1 	CALL __SAVELOCR4
0000ff 2f3a      	MOV  R19,R26
                 ;	n -> R19
                 ;	i -> R16,R17
                +
000100 e000     +LDI R16 , LOW ( 0 )
000101 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000102 9a90      	SBI  0x12,0
                 ; 0000 00EE PORTD.1 = 1;
000103 9a91      	SBI  0x12,1
                 ; 0000 00EF PORTD.2 = 1;
000104 9a92      	SBI  0x12,2
                 ; 0000 00F0 PORTD.3 = 1;
000105 9a93      	SBI  0x12,3
                 ; 0000 00F1 
                 ; 0000 00F2 for (; i < 4; i++)
                 _0x1A:
                +
000106 3004     +CPI R16 , LOW ( 4 )
000107 e0e0     +LDI R30 , HIGH ( 4 )
000108 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000109 f47c      	BRGE _0x1B
                 ; 0000 00F3 {
                 ; 0000 00F4 if (n == 0) PORTD.0 = 0;
00010a 3030      	CPI  R19,0
00010b f409      	BRNE _0x1C
00010c 9890      	CBI  0x12,0
                 ; 0000 00F5 if (n == 1) PORTD.1 = 0;
                 _0x1C:
00010d 3031      	CPI  R19,1
00010e f409      	BRNE _0x1F
00010f 9891      	CBI  0x12,1
                 ; 0000 00F6 if (n == 2) PORTD.2 = 0;
                 _0x1F:
000110 3032      	CPI  R19,2
000111 f409      	BRNE _0x22
000112 9892      	CBI  0x12,2
                 ; 0000 00F7 if (n == 3) PORTD.3 = 0;
                 _0x22:
000113 3033      	CPI  R19,3
000114 f409      	BRNE _0x25
000115 9893      	CBI  0x12,3
                 ; 0000 00F8 }
                 _0x25:
                +
000116 5f0f     +SUBI R16 , LOW ( - 1 )
000117 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000118 cfed      	RJMP _0x1A
                 _0x1B:
                 ; 0000 00F9 return;
000119 c06a      	RJMP _0x2060001
                 ; 0000 00FA }
                 ; .FEND
                 ;void showNumber(int counter)
                 ; 0000 00FD {
                 _showNumber:
                 ; .FSTART _showNumber
                 ; 0000 00FE char w[5] = {0, 2, 4, 6, 8};
                 ; 0000 00FF 
                 ; 0000 0100 showDigit(0);
00011a 940e 018c 	CALL SUBOPT_0x1
                 ;	counter -> R16,R17
                 ;	w -> Y+2
                 ; 0000 0101 PORTC = digits[(counter / 500) % 10];
00011c 940e 019d 	CALL SUBOPT_0x2
00011e bbe5      	OUT  0x15,R30
                 ; 0000 0102 delay_ms(50);
00011f 940e 01ab 	CALL SUBOPT_0x3
                 ; 0000 0103 
                 ; 0000 0104 showDigit(1);
000121 e0a1      	LDI  R26,LOW(1)
000122 dfda      	RCALL _showDigit
                 ; 0000 0105 PORTC = digits[(counter / 50) % 10];
000123 940e 01af 	CALL SUBOPT_0x4
000125 bbe5      	OUT  0x15,R30
                 ; 0000 0106 delay_ms(50);
000126 940e 01ab 	CALL SUBOPT_0x3
                 ; 0000 0107 
                 ; 0000 0108 showDigit(2);
000128 e0a2      	LDI  R26,LOW(2)
000129 dfd3      	RCALL _showDigit
                 ; 0000 0109 PORTC = digits[(counter / 5) % 10];
00012a 940e 01bd 	CALL SUBOPT_0x5
00012c bbe5      	OUT  0x15,R30
                 ; 0000 010A PORTC.7 = 1;
00012d 9aaf      	SBI  0x15,7
                 ; 0000 010B delay_ms(50);
00012e 940e 01ab 	CALL SUBOPT_0x3
                 ; 0000 010C PORTC.7 = 0;
000130 98af      	CBI  0x15,7
                 ; 0000 010D 
                 ; 0000 010E showDigit(3);
000131 e0a3      	LDI  R26,LOW(3)
000132 dfca      	RCALL _showDigit
                 ; 0000 010F PORTC = digits[w[counter % 5]];
000133 940e 01cb 	CALL SUBOPT_0x6
000135 bbe5      	OUT  0x15,R30
                 ; 0000 0110 delay_ms(50);
000136 c03c      	RJMP _0x2060002
                 ; 0000 0111 
                 ; 0000 0112 return;
                 ; 0000 0113 }
                 ; .FEND
                 ;void part5()
                 ; 0000 0117 {
                 _part5:
                 ; .FSTART _part5
                 ; 0000 0118 char a = 0;
                 ; 0000 0119 int counter;
                 ; 0000 011A a = PINA;
000137 940e 01da 	CALL SUBOPT_0x7
                 ;	a -> R17
                 ;	counter -> R18,R19
                 ; 0000 011B counter = 5 * a;
                 ; 0000 011C while(counter >= 0)
                 _0x2C:
000139 2333      	TST  R19
00013a f02a      	BRMI _0x2E
                 ; 0000 011D {
                 ; 0000 011E showNumber(counter);
00013b 01d9      	MOVW R26,R18
00013c dfdd      	RCALL _showNumber
                 ; 0000 011F counter--;
                +
00013d 5021     +SUBI R18 , LOW ( 1 )
00013e 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 0120 }
00013f cff9      	RJMP _0x2C
                 _0x2E:
                 ; 0000 0121 return;
000140 c043      	RJMP _0x2060001
                 ; 0000 0122 }
                 ; .FEND
                 ;void showNumberWithReset(int counter)
                 ; 0000 0126 {
                 _showNumberWithReset:
                 ; .FSTART _showNumberWithReset
                 ; 0000 0127 char w[5] = {0, 2, 4, 6, 8};
                 ; 0000 0128 
                 ; 0000 0129 showDigit(0);
000141 940e 018c 	CALL SUBOPT_0x1
                 ;	counter -> R16,R17
                 ;	w -> Y+2
                 ; 0000 012A if (PIND.7 == 1)
000143 9b87      	SBIS 0x10,7
000144 c003      	RJMP _0x2F
                 ; 0000 012B {
                 ; 0000 012C PORTC = digits[0];
000145 91e0 0160 	LDS  R30,_digits
000147 c002      	RJMP _0x3E
                 ; 0000 012D }
                 ; 0000 012E else
                 _0x2F:
                 ; 0000 012F {
                 ; 0000 0130 PORTC = digits[(counter / 500) % 10];
000148 940e 019d 	CALL SUBOPT_0x2
                 _0x3E:
00014a bbe5      	OUT  0x15,R30
                 ; 0000 0131 }
                 ; 0000 0132 delay_ms(50);
00014b 940e 01ab 	CALL SUBOPT_0x3
                 ; 0000 0133 
                 ; 0000 0134 showDigit(1);
00014d e0a1      	LDI  R26,LOW(1)
00014e dfae      	RCALL _showDigit
                 ; 0000 0135 if (PIND.6 == 1)
00014f 9b86      	SBIS 0x10,6
000150 c003      	RJMP _0x31
                 ; 0000 0136 {
                 ; 0000 0137 PORTC = digits[0];
000151 91e0 0160 	LDS  R30,_digits
000153 c002      	RJMP _0x3F
                 ; 0000 0138 }
                 ; 0000 0139 else
                 _0x31:
                 ; 0000 013A {
                 ; 0000 013B PORTC = digits[(counter / 50) % 10];
000154 940e 01af 	CALL SUBOPT_0x4
                 _0x3F:
000156 bbe5      	OUT  0x15,R30
                 ; 0000 013C }
                 ; 0000 013D delay_ms(50);
000157 940e 01ab 	CALL SUBOPT_0x3
                 ; 0000 013E 
                 ; 0000 013F showDigit(2);
000159 e0a2      	LDI  R26,LOW(2)
00015a dfa2      	RCALL _showDigit
                 ; 0000 0140 if (PIND.5 == 1)
00015b 9b85      	SBIS 0x10,5
00015c c003      	RJMP _0x33
                 ; 0000 0141 {
                 ; 0000 0142 PORTC = digits[0];
00015d 91e0 0160 	LDS  R30,_digits
00015f c002      	RJMP _0x40
                 ; 0000 0143 }
                 ; 0000 0144 else
                 _0x33:
                 ; 0000 0145 {
                 ; 0000 0146 PORTC = digits[(counter / 5) % 10];
000160 940e 01bd 	CALL SUBOPT_0x5
                 _0x40:
000162 bbe5      	OUT  0x15,R30
                 ; 0000 0147 }
                 ; 0000 0148 delay_ms(50);
000163 940e 01ab 	CALL SUBOPT_0x3
                 ; 0000 0149 PORTC.7 = 1;
000165 9aaf      	SBI  0x15,7
                 ; 0000 014A delay_ms(50);
000166 940e 01ab 	CALL SUBOPT_0x3
                 ; 0000 014B PORTC.7 = 0;
000168 98af      	CBI  0x15,7
                 ; 0000 014C 
                 ; 0000 014D showDigit(3);
000169 e0a3      	LDI  R26,LOW(3)
00016a df92      	RCALL _showDigit
                 ; 0000 014E if (PIND.4 == 1)
00016b 9b84      	SBIS 0x10,4
00016c c003      	RJMP _0x39
                 ; 0000 014F {
                 ; 0000 0150 PORTC = digits[0];
00016d 91e0 0160 	LDS  R30,_digits
00016f c002      	RJMP _0x41
                 ; 0000 0151 }
                 ; 0000 0152 else
                 _0x39:
                 ; 0000 0153 {
                 ; 0000 0154 PORTC = digits[w[counter % 5]];
000170 940e 01cb 	CALL SUBOPT_0x6
                 _0x41:
000172 bbe5      	OUT  0x15,R30
                 ; 0000 0155 }
                 ; 0000 0156 delay_ms(50);
                 _0x2060002:
000173 e3a2      	LDI  R26,LOW(50)
000174 e0b0      	LDI  R27,0
000175 940e 0223 	CALL _delay_ms
                 ; 0000 0157 
                 ; 0000 0158 return;
000177 8119      	LDD  R17,Y+1
000178 8108      	LDD  R16,Y+0
000179 9627      	ADIW R28,7
00017a 9508      	RET
                 ; 0000 0159 }
                 ; .FEND
                 ;void part6()
                 ; 0000 015D {
                 _part6:
                 ; .FSTART _part6
                 ; 0000 015E char a = 0;
                 ; 0000 015F int counter;
                 ; 0000 0160 a = PINA;
00017b 940e 01da 	CALL SUBOPT_0x7
                 ;	a -> R17
                 ;	counter -> R18,R19
                 ; 0000 0161 counter = 5 * a;
                 ; 0000 0162 while(counter >= 0)
                 _0x3B:
00017d 2333      	TST  R19
00017e f02a      	BRMI _0x3D
                 ; 0000 0163 {
                 ; 0000 0164 showNumberWithReset(counter);
00017f 01d9      	MOVW R26,R18
000180 dfc0      	RCALL _showNumberWithReset
                 ; 0000 0165 counter--;
                +
000181 5021     +SUBI R18 , LOW ( 1 )
000182 4030     +SBCI R19 , HIGH ( 1 )
                 	__SUBWRN 18,19,1
                 ; 0000 0166 }
000183 cff9      	RJMP _0x3B
                 _0x3D:
                 ; 0000 0167 return;
                 _0x2060001:
000184 940e 01e6 	CALL __LOADLOCR4
000186 9624      	ADIW R28,4
000187 9508      	RET
                 ; 0000 0168 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _digits:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000188 eea8      	LDI  R26,LOW(1000)
000189 e0b3      	LDI  R27,HIGH(1000)
00018a 940c 0223 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
00018c 9725      	SBIW R28,5
00018d e0e0      	LDI  R30,LOW(0)
00018e 83e8      	ST   Y,R30
00018f e0e2      	LDI  R30,LOW(2)
000190 83e9      	STD  Y+1,R30
000191 e0e4      	LDI  R30,LOW(4)
000192 83ea      	STD  Y+2,R30
000193 e0e6      	LDI  R30,LOW(6)
000194 83eb      	STD  Y+3,R30
000195 e0e8      	LDI  R30,LOW(8)
000196 83ec      	STD  Y+4,R30
000197 931a      	ST   -Y,R17
000198 930a      	ST   -Y,R16
000199 018d      	MOVW R16,R26
00019a e0a0      	LDI  R26,LOW(0)
00019b 940c 00fd 	JMP  _showDigit
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
00019d 01d8      	MOVW R26,R16
00019e efe4      	LDI  R30,LOW(500)
00019f e0f1      	LDI  R31,HIGH(500)
0001a0 940e 0202 	CALL __DIVW21
0001a2 01df      	MOVW R26,R30
0001a3 e0ea      	LDI  R30,LOW(10)
0001a4 e0f0      	LDI  R31,HIGH(10)
0001a5 940e 0207 	CALL __MODW21
0001a7 5ae0      	SUBI R30,LOW(-_digits)
0001a8 4ffe      	SBCI R31,HIGH(-_digits)
0001a9 81e0      	LD   R30,Z
0001aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0001ab e3a2      	LDI  R26,LOW(50)
0001ac e0b0      	LDI  R27,0
0001ad 940c 0223 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
0001af 01d8      	MOVW R26,R16
0001b0 e3e2      	LDI  R30,LOW(50)
0001b1 e0f0      	LDI  R31,HIGH(50)
0001b2 940e 0202 	CALL __DIVW21
0001b4 01df      	MOVW R26,R30
0001b5 e0ea      	LDI  R30,LOW(10)
0001b6 e0f0      	LDI  R31,HIGH(10)
0001b7 940e 0207 	CALL __MODW21
0001b9 5ae0      	SUBI R30,LOW(-_digits)
0001ba 4ffe      	SBCI R31,HIGH(-_digits)
0001bb 81e0      	LD   R30,Z
0001bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x5:
0001bd 01d8      	MOVW R26,R16
0001be e0e5      	LDI  R30,LOW(5)
0001bf e0f0      	LDI  R31,HIGH(5)
0001c0 940e 0202 	CALL __DIVW21
0001c2 01df      	MOVW R26,R30
0001c3 e0ea      	LDI  R30,LOW(10)
0001c4 e0f0      	LDI  R31,HIGH(10)
0001c5 940e 0207 	CALL __MODW21
0001c7 5ae0      	SUBI R30,LOW(-_digits)
0001c8 4ffe      	SBCI R31,HIGH(-_digits)
0001c9 81e0      	LD   R30,Z
0001ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0001cb 01d8      	MOVW R26,R16
0001cc e0e5      	LDI  R30,LOW(5)
0001cd e0f0      	LDI  R31,HIGH(5)
0001ce 940e 0207 	CALL __MODW21
0001d0 01de      	MOVW R26,R28
0001d1 9612      	ADIW R26,2
0001d2 0fae      	ADD  R26,R30
0001d3 1fbf      	ADC  R27,R31
0001d4 91ec      	LD   R30,X
0001d5 e0f0      	LDI  R31,0
0001d6 5ae0      	SUBI R30,LOW(-_digits)
0001d7 4ffe      	SBCI R31,HIGH(-_digits)
0001d8 81e0      	LD   R30,Z
0001d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
0001da d006      	RCALL __SAVELOCR4
0001db e010      	LDI  R17,0
0001dc b319      	IN   R17,25
0001dd e0a5      	LDI  R26,LOW(5)
0001de 9f1a      	MUL  R17,R26
0001df 0190      	MOVW R18,R0
0001e0 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0001e1 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001e2 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001e3 931a      	ST   -Y,R17
0001e4 930a      	ST   -Y,R16
0001e5 9508      	RET
                 
                 __LOADLOCR4:
0001e6 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001e7 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001e8 8119      	LDD  R17,Y+1
0001e9 8108      	LD   R16,Y
0001ea 9508      	RET
                 
                 __ANEGW1:
0001eb 95f1      	NEG  R31
0001ec 95e1      	NEG  R30
0001ed 40f0      	SBCI R31,0
0001ee 9508      	RET
                 
                 __DIVW21U:
0001ef 2400      	CLR  R0
0001f0 2411      	CLR  R1
0001f1 e190      	LDI  R25,16
                 __DIVW21U1:
0001f2 0faa      	LSL  R26
0001f3 1fbb      	ROL  R27
0001f4 1c00      	ROL  R0
0001f5 1c11      	ROL  R1
0001f6 1a0e      	SUB  R0,R30
0001f7 0a1f      	SBC  R1,R31
0001f8 f418      	BRCC __DIVW21U2
0001f9 0e0e      	ADD  R0,R30
0001fa 1e1f      	ADC  R1,R31
0001fb c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001fc 60a1      	SBR  R26,1
                 __DIVW21U3:
0001fd 959a      	DEC  R25
0001fe f799      	BRNE __DIVW21U1
0001ff 01fd      	MOVW R30,R26
000200 01d0      	MOVW R26,R0
000201 9508      	RET
                 
                 __DIVW21:
000202 d012      	RCALL __CHKSIGNW
000203 dfeb      	RCALL __DIVW21U
000204 f40e      	BRTC __DIVW211
000205 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000206 9508      	RET
                 
                 __MODW21:
000207 94e8      	CLT
000208 ffb7      	SBRS R27,7
000209 c004      	RJMP __MODW211
00020a 95b1      	NEG  R27
00020b 95a1      	NEG  R26
00020c 40b0      	SBCI R27,0
00020d 9468      	SET
                 __MODW211:
00020e fdf7      	SBRC R31,7
00020f dfdb      	RCALL __ANEGW1
000210 dfde      	RCALL __DIVW21U
000211 01fd      	MOVW R30,R26
000212 f40e      	BRTC __MODW212
000213 dfd7      	RCALL __ANEGW1
                 __MODW212:
000214 9508      	RET
                 
                 __CHKSIGNW:
000215 94e8      	CLT
000216 fff7      	SBRS R31,7
000217 c002      	RJMP __CHKSW1
000218 dfd2      	RCALL __ANEGW1
000219 9468      	SET
                 __CHKSW1:
00021a ffb7      	SBRS R27,7
00021b c006      	RJMP __CHKSW2
00021c 95b1      	NEG  R27
00021d 95a1      	NEG  R26
00021e 40b0      	SBCI R27,0
00021f f800      	BLD  R0,0
000220 9403      	INC  R0
000221 fa00      	BST  R0,0
                 __CHKSW2:
000222 9508      	RET
                 
                 _delay_ms:
000223 9610      	adiw r26,0
000224 f039      	breq __delay_ms1
                 __delay_ms0:
000225 95a8      	wdr
                +
000226 ed80     +LDI R24 , LOW ( 0x7D0 )
000227 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000228 9701     +SBIW R24 , 1
000229 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00022a 9711      	sbiw r26,1
00022b f7c9      	brne __delay_ms0
                 __delay_ms1:
00022c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  13 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  27 r17:  31 r18:   7 r19:  11 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  44 r27:  19 r28:   5 r29:   1 r30: 127 r31:  24 
x  :   5 y  :  27 z  :  11 
Registers used: 18 out of 35 (51.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   4 and   :   0 andi  :   0 asr   :   1 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   3 brne  :  10 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  39 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   3 cpi   :   7 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   1 jmp   :  25 ld    :  10 ldd   :   5 ldi   :  91 
lds   :   4 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   1 movw  :  18 
mul   :   1 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   0 
ori   :   0 out   :  58 pop   :   0 push  :   0 rcall :  22 ret   :  17 
reti  :   0 rjmp  :  26 rol   :   3 ror   :   1 sbc   :   1 sbci  :  13 
sbi   :   6 sbic  :   0 sbis  :   4 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  17 std   :   4 sts   :   0 sub   :   1 subi  :  10 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00045a   1078     36   1114   16384   6.8%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
