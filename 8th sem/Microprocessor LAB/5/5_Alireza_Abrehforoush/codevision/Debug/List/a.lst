
AVRASM ver. 2.1.30  C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm Sun Apr 23 03:20:35 2023

C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1083): warning: Register r4 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1084): warning: Register r5 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1085): warning: Register r6 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1086): warning: Register r7 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1087): warning: Register r8 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1088): warning: Register r9 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1089): warning: Register r11 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1090): warning: Register r10 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1091): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cnt=R4
                 	.DEF _cnt_msb=R5
                 	.DEF _ttl=R6
                 	.DEF _ttl_msb=R7
                 	.DEF _state=R8
                 	.DEF _state_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005f 	JMP  __RESET
000002 940c 008c 	JMP  _ext_int0_isr
000004 940c 008d 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 008e 	JMP  _timer2_ovf_isr
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 ffff      	.DB  0x0,0x0,0xFF,0xFF
000035 0001      	.DB  0x1,0x0
                 
                 _0x0:
000036 7072
000037 3a6d
000038 2b20
000039 2e32      	.DB  0x72,0x70,0x6D,0x3A,0x20,0x2B,0x32,0x2E
00003a 0035
00003b 2020
00003c 7473
00003d 706f      	.DB  0x35,0x0,0x20,0x20,0x73,0x74,0x6F,0x70
00003e 2020
00003f 7200
000040 6d70
000041 203a      	.DB  0x20,0x20,0x0,0x72,0x70,0x6D,0x3A,0x20
000042 322d
000043 352e
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1137): warning: .cseg .db misalignment - padding zero byte
000044 0000      	.DB  0x2D,0x32,0x2E,0x35,0x0
                 _0x2040003:
000045 c080      	.DB  0x80,0xC0
                 _0x20A0060:
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1141): warning: .cseg .db misalignment - padding zero byte
000046 0001      	.DB  0x1
                 _0x20A0000:
000047 4e2d
000048 4e41
000049 4900
00004a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\5\5_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1144): warning: .cseg .db misalignment - padding zero byte
00004b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004c 0006      	.DW  0x06
00004d 0004      	.DW  0x04
00004e 0066      	.DW  __REG_VARS*2
                 
00004f 000a      	.DW  0x0A
000050 0160      	.DW  _0x5
000051 006c      	.DW  _0x0*2
                 
000052 0009      	.DW  0x09
000053 016a      	.DW  _0x5+10
000054 0076      	.DW  _0x0*2+10
                 
000055 000a      	.DW  0x0A
000056 0173      	.DW  _0x5+19
000057 007f      	.DW  _0x0*2+19
                 
000058 0002      	.DW  0x02
000059 017d      	.DW  __base_y_G102
00005a 008a      	.DW  _0x2040003*2
                 
00005b 0001      	.DW  0x01
00005c 0181      	.DW  __seed_G105
00005d 008c      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
00005e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005f 94f8      	CLI
000060 27ee      	CLR  R30
000061 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000062 e0f1      	LDI  R31,1
000063 bffb      	OUT  GICR,R31
000064 bfeb      	OUT  GICR,R30
000065 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000066 e08d      	LDI  R24,(14-2)+1
000067 e0a2      	LDI  R26,2
000068 27bb      	CLR  R27
                 __CLEAR_REG:
000069 93ed      	ST   X+,R30
00006a 958a      	DEC  R24
00006b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006f 93ed      	ST   X+,R30
000070 9701      	SBIW R24,1
000071 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000072 e9e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000073 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000074 9185      	LPM  R24,Z+
000075 9195      	LPM  R25,Z+
000076 9700      	SBIW R24,0
000077 f061      	BREQ __GLOBAL_INI_END
000078 91a5      	LPM  R26,Z+
000079 91b5      	LPM  R27,Z+
00007a 9005      	LPM  R0,Z+
00007b 9015      	LPM  R1,Z+
00007c 01bf      	MOVW R22,R30
00007d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007e 9005      	LPM  R0,Z+
00007f 920d      	ST   X+,R0
000080 9701      	SBIW R24,1
000081 f7e1      	BRNE __GLOBAL_INI_LOOP
000082 01fb      	MOVW R30,R22
000083 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000084 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000085 bfed      	OUT  SPL,R30
000086 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000087 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000088 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000089 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008a 940c 0123 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;int cnt = 0;
                 ;int ttl = -1;
                 ;int state = 1;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0022 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0023 // Place your code here
                 ; 0000 0024 }
00008c 9518      	RETI
                 ; .FEND
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0028 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
                 ; 0000 0029 // Place your code here
                 ; 0000 002A 
                 ; 0000 002B }
00008d 9518      	RETI
                 ; .FEND
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0035 {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
00008e 920a      	ST   -Y,R0
00008f 921a      	ST   -Y,R1
000090 92fa      	ST   -Y,R15
000091 936a      	ST   -Y,R22
000092 937a      	ST   -Y,R23
000093 938a      	ST   -Y,R24
000094 939a      	ST   -Y,R25
000095 93aa      	ST   -Y,R26
000096 93ba      	ST   -Y,R27
000097 93ea      	ST   -Y,R30
000098 93fa      	ST   -Y,R31
000099 b7ef      	IN   R30,SREG
00009a 93ea      	ST   -Y,R30
                 ; 0000 0036 // Reinitialize Timer2 value
                 ; 0000 0037 TCNT2=0x00;
00009b e0e0      	LDI  R30,LOW(0)
00009c bde4      	OUT  0x24,R30
                 ; 0000 0038 
                 ; 0000 0039 // Place your code here
                 ; 0000 003A ttl = (ttl + 1) % 10;
00009d 01d3      	MOVW R26,R6
00009e 9611      	ADIW R26,1
00009f e0ea      	LDI  R30,LOW(10)
0000a0 e0f0      	LDI  R31,HIGH(10)
0000a1 940e 0456 	CALL __MODW21
0000a3 013f      	MOVW R6,R30
                 ; 0000 003B if (ttl == 0)
0000a4 2c06      	MOV  R0,R6
0000a5 2807      	OR   R0,R7
0000a6 f009      	BREQ PC+2
0000a7 c045      	RJMP _0x3
                 ; 0000 003C {
                 ; 0000 003D 
                 ; 0000 003E if (state == 1)
0000a8 e0e1      	LDI  R30,LOW(1)
0000a9 e0f0      	LDI  R31,HIGH(1)
0000aa 15e8      	CP   R30,R8
0000ab 05f9      	CPC  R31,R9
0000ac f471      	BRNE _0x4
                 ; 0000 003F {
                 ; 0000 0040 lcd_gotoxy(0,0);
0000ad 940e 0399 	CALL SUBOPT_0x0
                 ; 0000 0041 lcd_puts("rpm: +2.5");
                +
0000af e6a0     +LDI R26 , LOW ( _0x5 + ( 0 ) )
0000b0 e0b1     +LDI R27 , HIGH ( _0x5 + ( 0 ) )
                 	__POINTW2MN _0x5,0
0000b1 940e 039e 	CALL SUBOPT_0x1
                 ; 0000 0042 PORTB = (int)pow(2, 4 + (cnt % 4));
0000b3 9634      	ADIW R30,4
0000b4 940e 03ac 	CALL SUBOPT_0x2
                 ; 0000 0043 
                 ; 0000 0044 if(cnt >=  72)
0000b6 f024      	BRLT _0x6
                 ; 0000 0045 {
                 ; 0000 0046 state = 2;
0000b7 e0e2      	LDI  R30,LOW(2)
0000b8 e0f0      	LDI  R31,HIGH(2)
0000b9 940e 03bc 	CALL SUBOPT_0x3
                 ; 0000 0047 lcd_clear();
                 ; 0000 0048 cnt = 0;
                 ; 0000 0049 }
                 ; 0000 004A 
                 ; 0000 004B }
                 _0x6:
                 ; 0000 004C if (state == 2)
                 _0x4:
0000bb e0e2      	LDI  R30,LOW(2)
0000bc e0f0      	LDI  R31,HIGH(2)
0000bd 15e8      	CP   R30,R8
0000be 05f9      	CPC  R31,R9
0000bf f491      	BRNE _0x7
                 ; 0000 004D {
                 ; 0000 004E cnt += 10;
0000c0 01f2      	MOVW R30,R4
0000c1 963a      	ADIW R30,10
0000c2 012f      	MOVW R4,R30
                 ; 0000 004F lcd_gotoxy(0, 0);
0000c3 940e 0399 	CALL SUBOPT_0x0
                 ; 0000 0050 lcd_puts("  stop  ");
                +
0000c5 e6aa     +LDI R26 , LOW ( _0x5 + ( 10 ) )
0000c6 e0b1     +LDI R27 , HIGH ( _0x5 + ( 10 ) )
                 	__POINTW2MN _0x5,10
0000c7 940e 035a 	CALL _lcd_puts
                 ; 0000 0051 if(cnt >=  72)
0000c9 e4e8      	LDI  R30,LOW(72)
0000ca e0f0      	LDI  R31,HIGH(72)
0000cb 164e      	CP   R4,R30
0000cc 065f      	CPC  R5,R31
0000cd f024      	BRLT _0x8
                 ; 0000 0052 {
                 ; 0000 0053 state = 3;
0000ce e0e3      	LDI  R30,LOW(3)
0000cf e0f0      	LDI  R31,HIGH(3)
0000d0 940e 03bc 	CALL SUBOPT_0x3
                 ; 0000 0054 lcd_clear();
                 ; 0000 0055 cnt = 0;
                 ; 0000 0056 }
                 ; 0000 0057 }
                 _0x8:
                 ; 0000 0058 if (state ==  3)
                 _0x7:
0000d2 e0e3      	LDI  R30,LOW(3)
0000d3 e0f0      	LDI  R31,HIGH(3)
0000d4 15e8      	CP   R30,R8
0000d5 05f9      	CPC  R31,R9
0000d6 f499      	BRNE _0x9
                 ; 0000 0059 {
                 ; 0000 005A lcd_gotoxy(0,0);
0000d7 940e 0399 	CALL SUBOPT_0x0
                 ; 0000 005B lcd_puts("rpm: -2.5");
                +
0000d9 e7a3     +LDI R26 , LOW ( _0x5 + ( 19 ) )
0000da e0b1     +LDI R27 , HIGH ( _0x5 + ( 19 ) )
                 	__POINTW2MN _0x5,19
0000db 940e 039e 	CALL SUBOPT_0x1
                 ; 0000 005C PORTB = (int)pow(2, 7 - (cnt % 4));
0000dd e0a7      	LDI  R26,LOW(7)
0000de e0b0      	LDI  R27,HIGH(7)
0000df 940e 0488 	CALL __SWAPW12
0000e1 1bea      	SUB  R30,R26
0000e2 0bfb      	SBC  R31,R27
0000e3 940e 03ac 	CALL SUBOPT_0x2
                 ; 0000 005D if(cnt >=  72)
0000e5 f024      	BRLT _0xA
                 ; 0000 005E {
                 ; 0000 005F state = 1;
0000e6 e0e1      	LDI  R30,LOW(1)
0000e7 e0f0      	LDI  R31,HIGH(1)
0000e8 940e 03bc 	CALL SUBOPT_0x3
                 ; 0000 0060 lcd_clear();
                 ; 0000 0061 cnt = 0;
                 ; 0000 0062 }
                 ; 0000 0063 }
                 _0xA:
                 ; 0000 0064 cnt = cnt + 1;
                 _0x9:
0000ea 01f2      	MOVW R30,R4
0000eb 9631      	ADIW R30,1
0000ec 012f      	MOVW R4,R30
                 ; 0000 0065 }
                 ; 0000 0066 }
                 _0x3:
0000ed 91e9      	LD   R30,Y+
0000ee bfef      	OUT  SREG,R30
0000ef 91f9      	LD   R31,Y+
0000f0 91e9      	LD   R30,Y+
0000f1 91b9      	LD   R27,Y+
0000f2 91a9      	LD   R26,Y+
0000f3 9199      	LD   R25,Y+
0000f4 9189      	LD   R24,Y+
0000f5 9179      	LD   R23,Y+
0000f6 9169      	LD   R22,Y+
0000f7 90f9      	LD   R15,Y+
0000f8 9019      	LD   R1,Y+
0000f9 9009      	LD   R0,Y+
0000fa 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x5:
000160           	.BYTE 0x1D
                 ;void modifyDC()
                 ; 0000 0069 {
                 
                 	.CSEG
                 _modifyDC:
                 ; .FSTART _modifyDC
                 ; 0000 006A int a = 0, dc;
                 ; 0000 006B a = PINA;
0000fb 940e 0428 	CALL __SAVELOCR4
                 ;	a -> R16,R17
                 ;	dc -> R18,R19
                +
0000fd e000     +LDI R16 , LOW ( 0 )
0000fe e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000ff b309      	IN   R16,25
000100 2711      	CLR  R17
                 ; 0000 006C dc = (int)(0.35 * a) + 5;
000101 01f8      	MOVW R30,R16
000102 940e 03c2 	CALL SUBOPT_0x4
                +
000104 e3a3     +LDI R26 , LOW ( 0x3EB33333 )
000105 e3b3     +LDI R27 , HIGH ( 0x3EB33333 )
000106 eb83     +LDI R24 , BYTE3 ( 0x3EB33333 )
000107 e39e     +LDI R25 , BYTE4 ( 0x3EB33333 )
                 	__GETD2N 0x3EB33333
000108 940e 03c7 	CALL SUBOPT_0x5
00010a 9635      	ADIW R30,5
00010b 019f      	MOVW R18,R30
                 ; 0000 006D OCR0 = (int)(2.55 * dc) + 0.5;
00010c 940e 03c2 	CALL SUBOPT_0x4
                +
00010e e3a3     +LDI R26 , LOW ( 0x40233333 )
00010f e3b3     +LDI R27 , HIGH ( 0x40233333 )
000110 e283     +LDI R24 , BYTE3 ( 0x40233333 )
000111 e490     +LDI R25 , BYTE4 ( 0x40233333 )
                 	__GETD2N 0x40233333
000112 940e 03c7 	CALL SUBOPT_0x5
000114 940e 03c2 	CALL SUBOPT_0x4
                +
000116 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000117 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000118 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000119 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00011a 940e 0561 	CALL __ADDF12
00011c 940e 04ee 	CALL __CFD1U
00011e bfec      	OUT  0x3C,R30
                 ; 0000 006E }
00011f 940e 042d 	CALL __LOADLOCR4
000121 940c 019c 	JMP  _0x20C0005
                 ; .FEND
                 ;void main(void)
                 ; 0000 0071 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0072 // Declare your local variables here
                 ; 0000 0073 
                 ; 0000 0074 initialize();
000123 d031      	RCALL _initialize
                 ; 0000 0075 
                 ; 0000 0076 while (1)
                 _0xB:
                 ; 0000 0077 {
                 ; 0000 0078 // Place your code here
                 ; 0000 0079 modifyDC();
000124 dfd6      	RCALL _modifyDC
                 ; 0000 007A }
000125 cffe      	RJMP _0xB
                 ; 0000 007B }
                 _0xE:
000126 cfff      	RJMP _0xE
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void initializePorts()
                 ; 0001 0004 {
                 
                 	.CSEG
                 _initializePorts:
                 ; .FSTART _initializePorts
                 ; 0001 0005 // Input/Output Ports initialization
                 ; 0001 0006 // Port A initialization
                 ; 0001 0007 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0008 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
000127 e0e0      	LDI  R30,LOW(0)
000128 bbea      	OUT  0x1A,R30
                 ; 0001 0009 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 000A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
000129 bbeb      	OUT  0x1B,R30
                 ; 0001 000B 
                 ; 0001 000C // Port B initialization
                 ; 0001 000D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0001 000E DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1< ...
00012a efef      	LDI  R30,LOW(255)
00012b bbe7      	OUT  0x17,R30
                 ; 0001 000F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 0010 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
00012c e0e0      	LDI  R30,LOW(0)
00012d bbe8      	OUT  0x18,R30
                 ; 0001 0011 
                 ; 0001 0012 // Port C initialization
                 ; 0001 0013 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0001 0014 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1< ...
00012e efef      	LDI  R30,LOW(255)
00012f bbe4      	OUT  0x14,R30
                 ; 0001 0015 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 0016 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
000130 e0e0      	LDI  R30,LOW(0)
000131 bbe5      	OUT  0x15,R30
                 ; 0001 0017 
                 ; 0001 0018 // Port D initialization
                 ; 0001 0019 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=Out Bit0=Out
                 ; 0001 001A DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (1< ...
000132 e0e3      	LDI  R30,LOW(3)
000133 bbe1      	OUT  0x11,R30
                 ; 0001 001B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=0 Bit0=0
                 ; 0001 001C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
000134 e0e0      	LDI  R30,LOW(0)
000135 bbe2      	OUT  0x12,R30
                 ; 0001 001D }
000136 9508      	RET
                 ; .FEND
                 ;void initializeTimers()
                 ; 0001 0020 {
                 _initializeTimers:
                 ; .FSTART _initializeTimers
                 ; 0001 0021 // Timer/Counter 0 initialization
                 ; 0001 0022 // Clock source: System Clock
                 ; 0001 0023 // Clock value: 7.813 kHz
                 ; 0001 0024 // Mode: Phase correct PWM top=0xFF
                 ; 0001 0025 // OC0 output: Non-Inverted PWM
                 ; 0001 0026 // Timer Period: 65.28 ms
                 ; 0001 0027 // Output Pulse(s):
                 ; 0001 0028 // OC0 Period: 65.28 ms Width: 6.656 ms
                 ; 0001 0029 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01)  ...
000137 e6e5      	LDI  R30,LOW(101)
000138 bfe3      	OUT  0x33,R30
                 ; 0001 002A TCNT0=0x00;
000139 e0e0      	LDI  R30,LOW(0)
00013a bfe2      	OUT  0x32,R30
                 ; 0001 002B OCR0=0x10;
00013b e1e0      	LDI  R30,LOW(16)
00013c bfec      	OUT  0x3C,R30
                 ; 0001 002C 
                 ; 0001 002D // Timer/Counter 2 initialization
                 ; 0001 002E // Clock source: System Clock
                 ; 0001 002F // Clock value: Timer2 Stopped
                 ; 0001 0030 // Mode: Normal top=0xFF
                 ; 0001 0031 // OC2 output: Disconnected
                 ; 0001 0032 ASSR=0<<AS2;
00013d e0e0      	LDI  R30,LOW(0)
00013e bde2      	OUT  0x22,R30
                 ; 0001 0033 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) |  ...
00013f e0e7      	LDI  R30,LOW(7)
000140 bde5      	OUT  0x25,R30
                 ; 0001 0034 TCNT2=0x00;
000141 e0e0      	LDI  R30,LOW(0)
000142 bde4      	OUT  0x24,R30
                 ; 0001 0035 OCR2=0x00;
000143 bde3      	OUT  0x23,R30
                 ; 0001 0036 
                 ; 0001 0037 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 0038 TIMSK=(0<<OCIE2) | (1<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
000144 e4e0      	LDI  R30,LOW(64)
000145 bfe9      	OUT  0x39,R30
                 ; 0001 0039 }
000146 9508      	RET
                 ; .FEND
                 ;void initializeExternalInterrupts()
                 ; 0001 003C {
                 _initializeExternalInterrupts:
                 ; .FSTART _initializeExternalInterrupts
                 ; 0001 003D // External Interrupt(s) initialization
                 ; 0001 003E // INT0: On
                 ; 0001 003F // INT0 Mode: Low level
                 ; 0001 0040 // INT1: On
                 ; 0001 0041 // INT1 Mode: Low level
                 ; 0001 0042 // INT2: Off
                 ; 0001 0043 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
000147 b7eb      	IN   R30,0x3B
000148 6ce0      	ORI  R30,LOW(0xC0)
000149 bfeb      	OUT  0x3B,R30
                 ; 0001 0044 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00014a e0e0      	LDI  R30,LOW(0)
00014b bfe5      	OUT  0x35,R30
                 ; 0001 0045 MCUCSR=(0<<ISC2);
00014c bfe4      	OUT  0x34,R30
                 ; 0001 0046 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
00014d ece0      	LDI  R30,LOW(192)
00014e bfea      	OUT  0x3A,R30
                 ; 0001 0047 
                 ; 0001 0048 // Global enable interrupts
                 ; 0001 0049 #asm("sei")
00014f 9478      	SEI
                 ; 0001 004A }
000150 9508      	RET
                 ; .FEND
                 ;void initializeLCD()
                 ; 0001 004D {
                 _initializeLCD:
                 ; .FSTART _initializeLCD
                 ; 0001 004E // Alphanumeric LCD initialization
                 ; 0001 004F // Connections are specified in the
                 ; 0001 0050 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 0051 // RS - PORTC Bit 0
                 ; 0001 0052 // RD - PORTC Bit 1
                 ; 0001 0053 // EN - PORTC Bit 2
                 ; 0001 0054 // D4 - PORTC Bit 4
                 ; 0001 0055 // D5 - PORTC Bit 5
                 ; 0001 0056 // D6 - PORTC Bit 6
                 ; 0001 0057 // D7 - PORTC Bit 7
                 ; 0001 0058 // Characters/line: 16
                 ; 0001 0059 lcd_init(16);
000151 e1a0      	LDI  R26,LOW(16)
000152 940e 036b 	CALL _lcd_init
                 ; 0001 005A }
000154 9508      	RET
                 ; .FEND
                 ;void initialize()
                 ; 0001 005D {
                 _initialize:
                 ; .FSTART _initialize
                 ; 0001 005E initializePorts();
000155 dfd1      	RCALL _initializePorts
                 ; 0001 005F initializeTimers();
000156 dfe0      	RCALL _initializeTimers
                 ; 0001 0060 initializeExternalInterrupts();
000157 dfef      	RCALL _initializeExternalInterrupts
                 ; 0001 0061 initializeLCD();
000158 dff8      	RCALL _initializeLCD
                 ; 0001 0062 }
000159 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
00015a 940e 047d 	CALL __PUTPARD2
00015c 817b         ldd  r23,y+3
00015d 816a         ldd  r22,y+2
00015e 81f9         ldd  r31,y+1
00015f 81e8         ld   r30,y
000160 fb77         bst  r23,7
000161 0f77         lsl  r23
000162 fd67         sbrc r22,7
000163 6071         sbr  r23,1
000164 2f97         mov  r25,r23
000165 579e         subi r25,0x7e
000166 f081         breq __ftrunc0
000167 f078         brcs __ftrunc0
000168 3198         cpi  r25,24
000169 f490         brsh __ftrunc1
00016a 27aa         clr  r26
00016b 27bb         clr  r27
00016c 2788         clr  r24
                 __ftrunc2:
00016d 9408         sec
00016e 9587         ror  r24
00016f 95b7         ror  r27
000170 95a7         ror  r26
000171 959a         dec  r25
000172 f7d1         brne __ftrunc2
000173 23ea         and  r30,r26
000174 23fb         and  r31,r27
000175 2368         and  r22,r24
000176 c005         rjmp __ftrunc1
                 __ftrunc0:
000177 94e8         clt
000178 2777         clr  r23
000179 27ee         clr  r30
00017a 27ff         clr  r31
00017b 2766         clr  r22
                 __ftrunc1:
00017c 776f         cbr  r22,0x80
00017d 9576         lsr  r23
00017e f408         brcc __ftrunc3
00017f 6860         sbr  r22,0x80
                 __ftrunc3:
000180 f977         bld  r23,7
000181 91a9         ld   r26,y+
000182 91b9         ld   r27,y+
000183 9189         ld   r24,y+
000184 9199         ld   r25,y+
000185 17ea         cp   r30,r26
000186 07fb         cpc  r31,r27
000187 0768         cpc  r22,r24
000188 0779         cpc  r23,r25
000189 fb97         bst  r25,7
00018a 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00018b 940e 047d 	CALL __PUTPARD2
00018d 940e 046e 	CALL __GETD2S0
00018f 940e 015a 	CALL _ftrunc
000191 940e 0473 	CALL __PUTD1S0
000193 f419          brne __floor1
                 __floor0:
000194 940e 03ce 	CALL SUBOPT_0x6
000196 c005      	RJMP _0x20C0005
                 __floor1:
000197 f7e6          brtc __floor0
000198 940e 03ce 	CALL SUBOPT_0x6
00019a 940e 03d1 	CALL SUBOPT_0x7
                 _0x20C0005:
00019c 9624      	ADIW R28,4
00019d 9508      	RET
                 ; .FEND
                 _log:
                 ; .FSTART _log
00019e 940e 047d 	CALL __PUTPARD2
0001a0 9724      	SBIW R28,4
0001a1 931a      	ST   -Y,R17
0001a2 930a      	ST   -Y,R16
0001a3 940e 03d8 	CALL SUBOPT_0x8
0001a5 940e 0493 	CALL __CPD02
0001a7 f02c      	BRLT _0x202000C
                +
0001a8 efef     +LDI R30 , LOW ( 0xFF7FFFFF )
0001a9 efff     +LDI R31 , HIGH ( 0xFF7FFFFF )
0001aa e76f     +LDI R22 , BYTE3 ( 0xFF7FFFFF )
0001ab ef7f     +LDI R23 , BYTE4 ( 0xFF7FFFFF )
                 	__GETD1N 0xFF7FFFFF
0001ac c071      	RJMP _0x20C0004
                 _0x202000C:
0001ad 940e 03dd 	CALL SUBOPT_0x9
0001af 940e 0478 	CALL __PUTPARD1
0001b1 b7ad      	IN   R26,SPL
0001b2 b7be      	IN   R27,SPH
0001b3 9711      	SBIW R26,1
0001b4 931f      	PUSH R17
0001b5 930f      	PUSH R16
0001b6 940e 049e 	CALL _frexp
0001b8 910f      	POP  R16
0001b9 911f      	POP  R17
0001ba 940e 03e2 	CALL SUBOPT_0xA
0001bc 940e 03d8 	CALL SUBOPT_0x8
                +
0001be efe3     +LDI R30 , LOW ( 0x3F3504F3 )
0001bf e0f4     +LDI R31 , HIGH ( 0x3F3504F3 )
0001c0 e365     +LDI R22 , BYTE3 ( 0x3F3504F3 )
0001c1 e37f     +LDI R23 , BYTE4 ( 0x3F3504F3 )
                 	__GETD1N 0x3F3504F3
0001c2 940e 0642 	CALL __CMPF12
0001c4 f440      	BRSH _0x202000D
0001c5 940e 03e7 	CALL SUBOPT_0xB
0001c7 940e 0561 	CALL __ADDF12
0001c9 940e 03e2 	CALL SUBOPT_0xA
                +
0001cb 5001     +SUBI R16 , LOW ( 1 )
0001cc 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 _0x202000D:
0001cd 940e 03dd 	CALL SUBOPT_0x9
0001cf 940e 03d1 	CALL SUBOPT_0x7
0001d1 937f      	PUSH R23
0001d2 936f      	PUSH R22
0001d3 93ff      	PUSH R31
0001d4 93ef      	PUSH R30
0001d5 940e 03dd 	CALL SUBOPT_0x9
                +
0001d7 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0001d8 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0001d9 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0001da e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0001db 940e 0561 	CALL __ADDF12
0001dd 91af      	POP  R26
0001de 91bf      	POP  R27
0001df 918f      	POP  R24
0001e0 919f      	POP  R25
0001e1 940e 05fe 	CALL __DIVF21
0001e3 940e 03e2 	CALL SUBOPT_0xA
0001e5 940e 03e7 	CALL SUBOPT_0xB
0001e7 940e 03e9 	CALL SUBOPT_0xC
                +
0001e9 e2a6     +LDI R26 , LOW ( 0x3F654226 )
0001ea e4b2     +LDI R27 , HIGH ( 0x3F654226 )
0001eb e685     +LDI R24 , BYTE3 ( 0x3F654226 )
0001ec e39f     +LDI R25 , BYTE4 ( 0x3F654226 )
                 	__GETD2N 0x3F654226
0001ed 940e 03f0 	CALL SUBOPT_0xD
                +
0001ef e4ee     +LDI R30 , LOW ( 0x4054114E )
0001f0 e1f1     +LDI R31 , HIGH ( 0x4054114E )
0001f1 e564     +LDI R22 , BYTE3 ( 0x4054114E )
0001f2 e470     +LDI R23 , BYTE4 ( 0x4054114E )
                 	__GETD1N 0x4054114E
0001f3 940e 03f5 	CALL SUBOPT_0xE
0001f5 940e 03d8 	CALL SUBOPT_0x8
0001f7 940e 05b0 	CALL __MULF12
0001f9 937f      	PUSH R23
0001fa 936f      	PUSH R22
0001fb 93ff      	PUSH R31
0001fc 93ef      	PUSH R30
0001fd 940e 03fa 	CALL SUBOPT_0xF
                +
0001ff e4ad     +LDI R26 , LOW ( 0x3FD4114D )
000200 e1b1     +LDI R27 , HIGH ( 0x3FD4114D )
000201 ed84     +LDI R24 , BYTE3 ( 0x3FD4114D )
000202 e39f     +LDI R25 , BYTE4 ( 0x3FD4114D )
                 	__GETD2N 0x3FD4114D
000203 940e 055a 	CALL __SUBF12
000205 91af      	POP  R26
000206 91bf      	POP  R27
000207 918f      	POP  R24
000208 919f      	POP  R25
000209 940e 05fe 	CALL __DIVF21
00020b 937f      	PUSH R23
00020c 936f      	PUSH R22
00020d 93ff      	PUSH R31
00020e 93ef      	PUSH R30
00020f 01f8      	MOVW R30,R16
000210 940e 03c2 	CALL SUBOPT_0x4
                +
000212 e1a8     +LDI R26 , LOW ( 0x3F317218 )
000213 e7b2     +LDI R27 , HIGH ( 0x3F317218 )
000214 e381     +LDI R24 , BYTE3 ( 0x3F317218 )
000215 e39f     +LDI R25 , BYTE4 ( 0x3F317218 )
                 	__GETD2N 0x3F317218
000216 940e 05b0 	CALL __MULF12
000218 91af      	POP  R26
000219 91bf      	POP  R27
00021a 918f      	POP  R24
00021b 919f      	POP  R25
00021c 940e 0561 	CALL __ADDF12
                 _0x20C0004:
00021e 8119      	LDD  R17,Y+1
00021f 8108      	LDD  R16,Y+0
000220 962a      	ADIW R28,10
000221 9508      	RET
                 ; .FEND
                 _exp:
                 ; .FSTART _exp
000222 940e 047d 	CALL __PUTPARD2
000224 9728      	SBIW R28,8
000225 931a      	ST   -Y,R17
000226 930a      	ST   -Y,R16
000227 940e 03ff 	CALL SUBOPT_0x10
                +
000229 e5e0     +LDI R30 , LOW ( 0xC2AEAC50 )
00022a eafc     +LDI R31 , HIGH ( 0xC2AEAC50 )
00022b ea6e     +LDI R22 , BYTE3 ( 0xC2AEAC50 )
00022c ec72     +LDI R23 , BYTE4 ( 0xC2AEAC50 )
                 	__GETD1N 0xC2AEAC50
00022d 940e 0642 	CALL __CMPF12
00022f f418      	BRSH _0x202000F
000230 940e 0404 	CALL SUBOPT_0x11
000232 c083      	RJMP _0x20C0003
                 _0x202000F:
                +
000233 85ea     +LDD R30 , Y + 10
000234 85fb     +LDD R31 , Y + 10 + 1
000235 856c     +LDD R22 , Y + 10 + 2
000236 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
000237 940e 048f 	CALL __CPD10
000239 f429      	BRNE _0x2020010
                +
00023a e0e0     +LDI R30 , LOW ( 0x3F800000 )
00023b e0f0     +LDI R31 , HIGH ( 0x3F800000 )
00023c e860     +LDI R22 , BYTE3 ( 0x3F800000 )
00023d e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
00023e c077      	RJMP _0x20C0003
                 _0x2020010:
00023f 940e 03ff 	CALL SUBOPT_0x10
                +
000241 e1e8     +LDI R30 , LOW ( 0x42B17218 )
000242 e7f2     +LDI R31 , HIGH ( 0x42B17218 )
000243 eb61     +LDI R22 , BYTE3 ( 0x42B17218 )
000244 e472     +LDI R23 , BYTE4 ( 0x42B17218 )
                 	__GETD1N 0x42B17218
000245 940e 0642 	CALL __CMPF12
000247 f009      	BREQ PC+2
000248 f408      	BRCC PC+2
000249 c005      	RJMP _0x2020011
                +
00024a efef     +LDI R30 , LOW ( 0x7F7FFFFF )
00024b efff     +LDI R31 , HIGH ( 0x7F7FFFFF )
00024c e76f     +LDI R22 , BYTE3 ( 0x7F7FFFFF )
00024d e77f     +LDI R23 , BYTE4 ( 0x7F7FFFFF )
                 	__GETD1N 0x7F7FFFFF
00024e c067      	RJMP _0x20C0003
                 _0x2020011:
00024f 940e 03ff 	CALL SUBOPT_0x10
                +
000251 e3eb     +LDI R30 , LOW ( 0x3FB8AA3B )
000252 eafa     +LDI R31 , HIGH ( 0x3FB8AA3B )
000253 eb68     +LDI R22 , BYTE3 ( 0x3FB8AA3B )
000254 e37f     +LDI R23 , BYTE4 ( 0x3FB8AA3B )
                 	__GETD1N 0x3FB8AA3B
000255 940e 05b0 	CALL __MULF12
                +
000257 87ea     +STD Y + 10 , R30
000258 87fb     +STD Y + 10 + 1 , R31
000259 876c     +STD Y + 10 + 2 , R22
00025a 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
00025b 940e 03ff 	CALL SUBOPT_0x10
00025d df2d      	RCALL _floor
00025e 940e 04f0 	CALL __CFD1
000260 018f      	MOVW R16,R30
000261 940e 03ff 	CALL SUBOPT_0x10
000263 940e 03c2 	CALL SUBOPT_0x4
000265 940e 03f5 	CALL SUBOPT_0xE
000267 01df      	MOVW R26,R30
000268 01cb      	MOVW R24,R22
                +
000269 e0e0     +LDI R30 , LOW ( 0x3F000000 )
00026a e0f0     +LDI R31 , HIGH ( 0x3F000000 )
00026b e060     +LDI R22 , BYTE3 ( 0x3F000000 )
00026c e37f     +LDI R23 , BYTE4 ( 0x3F000000 )
                 	__GETD1N 0x3F000000
00026d 940e 03f5 	CALL SUBOPT_0xE
00026f 940e 03e2 	CALL SUBOPT_0xA
000271 940e 03e7 	CALL SUBOPT_0xB
000273 940e 03e9 	CALL SUBOPT_0xC
                +
000275 e6ad     +LDI R26 , LOW ( 0x3D6C4C6D )
000276 e4bc     +LDI R27 , HIGH ( 0x3D6C4C6D )
000277 e68c     +LDI R24 , BYTE3 ( 0x3D6C4C6D )
000278 e39d     +LDI R25 , BYTE4 ( 0x3D6C4C6D )
                 	__GETD2N 0x3D6C4C6D
000279 940e 05b0 	CALL __MULF12
                +
00027b eaa6     +LDI R26 , LOW ( 0x40E6E3A6 )
00027c eeb3     +LDI R27 , HIGH ( 0x40E6E3A6 )
00027d ee86     +LDI R24 , BYTE3 ( 0x40E6E3A6 )
00027e e490     +LDI R25 , BYTE4 ( 0x40E6E3A6 )
                 	__GETD2N 0x40E6E3A6
00027f 940e 0561 	CALL __ADDF12
000281 940e 03d8 	CALL SUBOPT_0x8
000283 940e 05b0 	CALL __MULF12
000285 940e 03e2 	CALL SUBOPT_0xA
000287 940e 03fa 	CALL SUBOPT_0xF
                +
000289 e2a8     +LDI R26 , LOW ( 0x41A68D28 )
00028a e8bd     +LDI R27 , HIGH ( 0x41A68D28 )
00028b ea86     +LDI R24 , BYTE3 ( 0x41A68D28 )
00028c e491     +LDI R25 , BYTE4 ( 0x41A68D28 )
                 	__GETD2N 0x41A68D28
00028d 940e 0561 	CALL __ADDF12
                +
00028f 83ea     +STD Y + 2 , R30
000290 83fb     +STD Y + 2 + 1 , R31
000291 836c     +STD Y + 2 + 2 , R22
000292 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
000293 940e 03dd 	CALL SUBOPT_0x9
                +
000295 81aa     +LDD R26 , Y + 2
000296 81bb     +LDD R27 , Y + 2 + 1
000297 818c     +LDD R24 , Y + 2 + 2
000298 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000299 940e 0561 	CALL __ADDF12
                +
00029b efa3     +LDI R26 , LOW ( 0x3FB504F3 )
00029c e0b4     +LDI R27 , HIGH ( 0x3FB504F3 )
00029d eb85     +LDI R24 , BYTE3 ( 0x3FB504F3 )
00029e e39f     +LDI R25 , BYTE4 ( 0x3FB504F3 )
                 	__GETD2N 0x3FB504F3
00029f 940e 05b0 	CALL __MULF12
0002a1 937f      	PUSH R23
0002a2 936f      	PUSH R22
0002a3 93ff      	PUSH R31
0002a4 93ef      	PUSH R30
0002a5 940e 03d8 	CALL SUBOPT_0x8
0002a7 940e 03fa 	CALL SUBOPT_0xF
0002a9 940e 055a 	CALL __SUBF12
0002ab 91af      	POP  R26
0002ac 91bf      	POP  R27
0002ad 918f      	POP  R24
0002ae 919f      	POP  R25
0002af 940e 05fe 	CALL __DIVF21
0002b1 940e 0478 	CALL __PUTPARD1
0002b3 01d8      	MOVW R26,R16
0002b4 940e 04af 	CALL _ldexp
                 _0x20C0003:
0002b6 8119      	LDD  R17,Y+1
0002b7 8108      	LDD  R16,Y+0
0002b8 962e      	ADIW R28,14
0002b9 9508      	RET
                 ; .FEND
                 _pow:
                 ; .FSTART _pow
0002ba 940e 047d 	CALL __PUTPARD2
0002bc 9724      	SBIW R28,4
0002bd 940e 0409 	CALL SUBOPT_0x12
0002bf 940e 048f 	CALL __CPD10
0002c1 f419      	BRNE _0x2020012
0002c2 940e 0404 	CALL SUBOPT_0x11
0002c4 c045      	RJMP _0x20C0002
                 _0x2020012:
                +
0002c5 85a8     +LDD R26 , Y + 8
0002c6 85b9     +LDD R27 , Y + 8 + 1
0002c7 858a     +LDD R24 , Y + 8 + 2
0002c8 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0002c9 940e 0493 	CALL __CPD02
0002cb f494      	BRGE _0x2020013
0002cc 940e 040e 	CALL SUBOPT_0x13
0002ce 940e 048f 	CALL __CPD10
0002d0 f429      	BRNE _0x2020014
                +
0002d1 e0e0     +LDI R30 , LOW ( 0x3F800000 )
0002d2 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0002d3 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0002d4 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0002d5 c034      	RJMP _0x20C0002
                 _0x2020014:
                +
0002d6 85a8     +LDD R26 , Y + 8
0002d7 85b9     +LDD R27 , Y + 8 + 1
0002d8 858a     +LDD R24 , Y + 8 + 2
0002d9 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0002da 940e 0413 	CALL SUBOPT_0x14
0002dc df45      	RCALL _exp
0002dd c02c      	RJMP _0x20C0002
                 _0x2020013:
0002de 940e 040e 	CALL SUBOPT_0x13
0002e0 01de      	MOVW R26,R28
0002e1 940e 04f0 	CALL __CFD1
0002e3 940e 0464 	CALL __PUTDP1
0002e5 940e 03ce 	CALL SUBOPT_0x6
0002e7 940e 0527 	CALL __CDF1
0002e9 01df      	MOVW R26,R30
0002ea 01cb      	MOVW R24,R22
0002eb 940e 040e 	CALL SUBOPT_0x13
0002ed 940e 0499 	CALL __CPD12
0002ef f019      	BREQ _0x2020015
0002f0 940e 0404 	CALL SUBOPT_0x11
0002f2 c017      	RJMP _0x20C0002
                 _0x2020015:
0002f3 940e 0409 	CALL SUBOPT_0x12
0002f5 940e 04bb 	CALL __ANEGF1
0002f7 01df      	MOVW R26,R30
0002f8 01cb      	MOVW R24,R22
0002f9 940e 0413 	CALL SUBOPT_0x14
0002fb df26      	RCALL _exp
                +
0002fc 87e8     +STD Y + 8 , R30
0002fd 87f9     +STD Y + 8 + 1 , R31
0002fe 876a     +STD Y + 8 + 2 , R22
0002ff 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
000300 81e8      	LD   R30,Y
000301 70e1      	ANDI R30,LOW(0x1)
000302 f419      	BRNE _0x2020016
000303 940e 0409 	CALL SUBOPT_0x12
000305 c004      	RJMP _0x20C0002
                 _0x2020016:
000306 940e 0409 	CALL SUBOPT_0x12
000308 940e 04bb 	CALL __ANEGF1
                 _0x20C0002:
00030a 962c      	ADIW R28,12
00030b 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
00030c 93aa      	ST   -Y,R26
00030d b3e5      	IN   R30,0x15
00030e 70ef      	ANDI R30,LOW(0xF)
00030f 2fae      	MOV  R26,R30
000310 81e8      	LD   R30,Y
000311 7fe0      	ANDI R30,LOW(0xF0)
000312 2bea      	OR   R30,R26
000313 bbe5      	OUT  0x15,R30
                +
000314 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000315 958a     +DEC R24
000316 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000317 9aaa      	SBI  0x15,2
                +
000318 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000319 958a     +DEC R24
00031a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00031b 98aa      	CBI  0x15,2
                +
00031c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00031d 958a     +DEC R24
00031e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00031f c077      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000320 93aa      	ST   -Y,R26
000321 81a8      	LD   R26,Y
000322 dfe9      	RCALL __lcd_write_nibble_G102
000323 81e8          ld    r30,y
000324 95e2          swap  r30
000325 83e8          st    y,r30
000326 81a8      	LD   R26,Y
000327 dfe4      	RCALL __lcd_write_nibble_G102
                +
000328 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000329 958a     +DEC R24
00032a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00032b c06b      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00032c 93aa      	ST   -Y,R26
00032d 81e8      	LD   R30,Y
00032e e0f0      	LDI  R31,0
00032f 58e3      	SUBI R30,LOW(-__base_y_G102)
000330 4ffe      	SBCI R31,HIGH(-__base_y_G102)
000331 81e0      	LD   R30,Z
000332 81a9      	LDD  R26,Y+1
000333 0fae      	ADD  R26,R30
000334 dfeb      	RCALL __lcd_write_data
000335 80b9      	LDD  R11,Y+1
000336 80a8      	LDD  R10,Y+0
000337 9622      	ADIW R28,2
000338 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000339 e0a2      	LDI  R26,LOW(2)
00033a 940e 041a 	CALL SUBOPT_0x15
00033c e0ac      	LDI  R26,LOW(12)
00033d dfe2      	RCALL __lcd_write_data
00033e e0a1      	LDI  R26,LOW(1)
00033f 940e 041a 	CALL SUBOPT_0x15
000341 e0e0      	LDI  R30,LOW(0)
000342 2eae      	MOV  R10,R30
000343 2ebe      	MOV  R11,R30
000344 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000345 93aa      	ST   -Y,R26
000346 81a8      	LD   R26,Y
000347 30aa      	CPI  R26,LOW(0xA)
000348 f011      	BREQ _0x2040005
000349 14bd      	CP   R11,R13
00034a f048      	BRLO _0x2040004
                 _0x2040005:
00034b e0e0      	LDI  R30,LOW(0)
00034c 93ea      	ST   -Y,R30
00034d 94a3      	INC  R10
00034e 2daa      	MOV  R26,R10
00034f dfdc      	RCALL _lcd_gotoxy
000350 81a8      	LD   R26,Y
000351 30aa      	CPI  R26,LOW(0xA)
000352 f409      	BRNE _0x2040007
000353 c043      	RJMP _0x20C0001
                 _0x2040007:
                 _0x2040004:
000354 94b3      	INC  R11
000355 9aa8      	SBI  0x15,0
000356 81a8      	LD   R26,Y
000357 dfc8      	RCALL __lcd_write_data
000358 98a8      	CBI  0x15,0
000359 c03d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00035a 93ba      	ST   -Y,R27
00035b 93aa      	ST   -Y,R26
00035c 931a      	ST   -Y,R17
                 _0x2040008:
00035d 81a9      	LDD  R26,Y+1
00035e 81ba      	LDD  R27,Y+1+1
00035f 91ed      	LD   R30,X+
000360 83a9      	STD  Y+1,R26
000361 83ba      	STD  Y+1+1,R27
000362 2f1e      	MOV  R17,R30
000363 30e0      	CPI  R30,0
000364 f019      	BREQ _0x204000A
000365 2fa1      	MOV  R26,R17
000366 dfde      	RCALL _lcd_putchar
000367 cff5      	RJMP _0x2040008
                 _0x204000A:
000368 8118      	LDD  R17,Y+0
000369 9623      	ADIW R28,3
00036a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00036b 93aa      	ST   -Y,R26
00036c b3e4      	IN   R30,0x14
00036d 6fe0      	ORI  R30,LOW(0xF0)
00036e bbe4      	OUT  0x14,R30
00036f 9aa2      	SBI  0x14,2
000370 9aa0      	SBI  0x14,0
000371 9aa1      	SBI  0x14,1
000372 98aa      	CBI  0x15,2
000373 98a8      	CBI  0x15,0
000374 98a9      	CBI  0x15,1
000375 80d8      	LDD  R13,Y+0
000376 81e8      	LD   R30,Y
000377 58e0      	SUBI R30,-LOW(128)
                +
000378 93e0 017f+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
00037a 81e8      	LD   R30,Y
00037b 54e0      	SUBI R30,-LOW(192)
                +
00037c 93e0 0180+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
00037e e1a4      	LDI  R26,LOW(20)
00037f e0b0      	LDI  R27,0
000380 940e 0662 	CALL _delay_ms
000382 940e 0420 	CALL SUBOPT_0x16
000384 940e 0420 	CALL SUBOPT_0x16
000386 940e 0420 	CALL SUBOPT_0x16
000388 e2a0      	LDI  R26,LOW(32)
000389 df82      	RCALL __lcd_write_nibble_G102
                +
00038a ec88     +LDI R24 , LOW ( 200 )
00038b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00038c 9701     +SBIW R24 , 1
00038d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00038e e2a8      	LDI  R26,LOW(40)
00038f df90      	RCALL __lcd_write_data
000390 e0a4      	LDI  R26,LOW(4)
000391 df8e      	RCALL __lcd_write_data
000392 e8a5      	LDI  R26,LOW(133)
000393 df8c      	RCALL __lcd_write_data
000394 e0a6      	LDI  R26,LOW(6)
000395 df8a      	RCALL __lcd_write_data
000396 dfa2      	RCALL _lcd_clear
                 _0x20C0001:
000397 9621      	ADIW R28,1
000398 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G102:
00017d           	.BYTE 0x4
                 __seed_G105:
000181           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000399 e0e0      	LDI  R30,LOW(0)
00039a 93ea      	ST   -Y,R30
00039b e0a0      	LDI  R26,LOW(0)
00039c 940c 032c 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
00039e 940e 035a 	CALL _lcd_puts
                +
0003a0 e0e0     +LDI R30 , LOW ( 0x40000000 )
0003a1 e0f0     +LDI R31 , HIGH ( 0x40000000 )
0003a2 e060     +LDI R22 , BYTE3 ( 0x40000000 )
0003a3 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0003a4 940e 0478 	CALL __PUTPARD1
0003a6 01d2      	MOVW R26,R4
0003a7 e0e4      	LDI  R30,LOW(4)
0003a8 e0f0      	LDI  R31,HIGH(4)
0003a9 940e 0456 	CALL __MODW21
0003ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2:
0003ac 940e 043e 	CALL __CWD1
0003ae 940e 0527 	CALL __CDF1
0003b0 01df      	MOVW R26,R30
0003b1 01cb      	MOVW R24,R22
0003b2 940e 02ba 	CALL _pow
0003b4 940e 04f0 	CALL __CFD1
0003b6 bbe8      	OUT  0x18,R30
0003b7 e4e8      	LDI  R30,LOW(72)
0003b8 e0f0      	LDI  R31,HIGH(72)
0003b9 164e      	CP   R4,R30
0003ba 065f      	CPC  R5,R31
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0003bc 014f      	MOVW R8,R30
0003bd 940e 0339 	CALL _lcd_clear
0003bf 2444      	CLR  R4
0003c0 2455      	CLR  R5
0003c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0003c2 940e 043e 	CALL __CWD1
0003c4 940e 0527 	CALL __CDF1
0003c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003c7 940e 05b0 	CALL __MULF12
0003c9 940e 04f0 	CALL __CFD1
0003cb 2766      	CLR  R22
0003cc 2777      	CLR  R23
0003cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003ce 940e 0469 	CALL __GETD1S0
0003d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
                +
0003d1 e0a0     +LDI R26 , LOW ( 0x3F800000 )
0003d2 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
0003d3 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
0003d4 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
0003d5 940e 055a 	CALL __SUBF12
0003d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
                +
0003d8 81ae     +LDD R26 , Y + 6
0003d9 81bf     +LDD R27 , Y + 6 + 1
0003da 8588     +LDD R24 , Y + 6 + 2
0003db 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0003dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
                +
0003dd 81ee     +LDD R30 , Y + 6
0003de 81ff     +LDD R31 , Y + 6 + 1
0003df 8568     +LDD R22 , Y + 6 + 2
0003e0 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
                +
0003e2 83ee     +STD Y + 6 , R30
0003e3 83ff     +STD Y + 6 + 1 , R31
0003e4 8768     +STD Y + 6 + 2 , R22
0003e5 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0003e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0003e7 dff5      	RCALL SUBOPT_0x9
0003e8 cfef      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0003e9 940e 05b0 	CALL __MULF12
                +
0003eb 83ea     +STD Y + 2 , R30
0003ec 83fb     +STD Y + 2 + 1 , R31
0003ed 836c     +STD Y + 2 + 2 , R22
0003ee 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0003ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0003f0 940e 05b0 	CALL __MULF12
0003f2 01df      	MOVW R26,R30
0003f3 01cb      	MOVW R24,R22
0003f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0003f5 940e 0482 	CALL __SWAPD12
0003f7 940e 055a 	CALL __SUBF12
0003f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
0003fa 81ea     +LDD R30 , Y + 2
0003fb 81fb     +LDD R31 , Y + 2 + 1
0003fc 816c     +LDD R22 , Y + 2 + 2
0003fd 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
0003fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
                +
0003ff 85aa     +LDD R26 , Y + 10
000400 85bb     +LDD R27 , Y + 10 + 1
000401 858c     +LDD R24 , Y + 10 + 2
000402 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000403 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
000404 e0e0     +LDI R30 , LOW ( 0x0 )
000405 e0f0     +LDI R31 , HIGH ( 0x0 )
000406 e060     +LDI R22 , BYTE3 ( 0x0 )
000407 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000408 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
                +
000409 85e8     +LDD R30 , Y + 8
00040a 85f9     +LDD R31 , Y + 8 + 1
00040b 856a     +LDD R22 , Y + 8 + 2
00040c 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00040d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
                +
00040e 81ec     +LDD R30 , Y + 4
00040f 81fd     +LDD R31 , Y + 4 + 1
000410 816e     +LDD R22 , Y + 4 + 2
000411 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
000412 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000413 940e 019e 	CALL _log
                +
000415 81ac     +LDD R26 , Y + 4
000416 81bd     +LDD R27 , Y + 4 + 1
000417 818e     +LDD R24 , Y + 4 + 2
000418 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000419 cfd6      	RJMP SUBOPT_0xD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
00041a 940e 0320 	CALL __lcd_write_data
00041c e0a3      	LDI  R26,LOW(3)
00041d e0b0      	LDI  R27,0
00041e 940c 0662 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
000420 e3a0      	LDI  R26,LOW(48)
000421 940e 030c 	CALL __lcd_write_nibble_G102
                +
000423 ec88     +LDI R24 , LOW ( 200 )
000424 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000425 9701     +SBIW R24 , 1
000426 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000427 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000428 933a      	ST   -Y,R19
                 __SAVELOCR3:
000429 932a      	ST   -Y,R18
                 __SAVELOCR2:
00042a 931a      	ST   -Y,R17
00042b 930a      	ST   -Y,R16
00042c 9508      	RET
                 
                 __LOADLOCR4:
00042d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00042e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00042f 8119      	LDD  R17,Y+1
000430 8108      	LD   R16,Y
000431 9508      	RET
                 
                 __ANEGW1:
000432 95f1      	NEG  R31
000433 95e1      	NEG  R30
000434 40f0      	SBCI R31,0
000435 9508      	RET
                 
                 __ANEGD1:
000436 95f0      	COM  R31
000437 9560      	COM  R22
000438 9570      	COM  R23
000439 95e1      	NEG  R30
00043a 4fff      	SBCI R31,-1
00043b 4f6f      	SBCI R22,-1
00043c 4f7f      	SBCI R23,-1
00043d 9508      	RET
                 
                 __CWD1:
00043e 2f6f      	MOV  R22,R31
00043f 0f66      	ADD  R22,R22
000440 0b66      	SBC  R22,R22
000441 2f76      	MOV  R23,R22
000442 9508      	RET
                 
                 __DIVW21U:
000443 2400      	CLR  R0
000444 2411      	CLR  R1
000445 e190      	LDI  R25,16
                 __DIVW21U1:
000446 0faa      	LSL  R26
000447 1fbb      	ROL  R27
000448 1c00      	ROL  R0
000449 1c11      	ROL  R1
00044a 1a0e      	SUB  R0,R30
00044b 0a1f      	SBC  R1,R31
00044c f418      	BRCC __DIVW21U2
00044d 0e0e      	ADD  R0,R30
00044e 1e1f      	ADC  R1,R31
00044f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000450 60a1      	SBR  R26,1
                 __DIVW21U3:
000451 959a      	DEC  R25
000452 f799      	BRNE __DIVW21U1
000453 01fd      	MOVW R30,R26
000454 01d0      	MOVW R26,R0
000455 9508      	RET
                 
                 __MODW21:
000456 94e8      	CLT
000457 ffb7      	SBRS R27,7
000458 c004      	RJMP __MODW211
000459 95b1      	NEG  R27
00045a 95a1      	NEG  R26
00045b 40b0      	SBCI R27,0
00045c 9468      	SET
                 __MODW211:
00045d fdf7      	SBRC R31,7
00045e dfd3      	RCALL __ANEGW1
00045f dfe3      	RCALL __DIVW21U
000460 01fd      	MOVW R30,R26
000461 f40e      	BRTC __MODW212
000462 dfcf      	RCALL __ANEGW1
                 __MODW212:
000463 9508      	RET
                 
                 __PUTDP1:
000464 93ed      	ST   X+,R30
000465 93fd      	ST   X+,R31
000466 936d      	ST   X+,R22
000467 937c      	ST   X,R23
000468 9508      	RET
                 
                 __GETD1S0:
000469 81e8      	LD   R30,Y
00046a 81f9      	LDD  R31,Y+1
00046b 816a      	LDD  R22,Y+2
00046c 817b      	LDD  R23,Y+3
00046d 9508      	RET
                 
                 __GETD2S0:
00046e 81a8      	LD   R26,Y
00046f 81b9      	LDD  R27,Y+1
000470 818a      	LDD  R24,Y+2
000471 819b      	LDD  R25,Y+3
000472 9508      	RET
                 
                 __PUTD1S0:
000473 83e8      	ST   Y,R30
000474 83f9      	STD  Y+1,R31
000475 836a      	STD  Y+2,R22
000476 837b      	STD  Y+3,R23
000477 9508      	RET
                 
                 __PUTPARD1:
000478 937a      	ST   -Y,R23
000479 936a      	ST   -Y,R22
00047a 93fa      	ST   -Y,R31
00047b 93ea      	ST   -Y,R30
00047c 9508      	RET
                 
                 __PUTPARD2:
00047d 939a      	ST   -Y,R25
00047e 938a      	ST   -Y,R24
00047f 93ba      	ST   -Y,R27
000480 93aa      	ST   -Y,R26
000481 9508      	RET
                 
                 __SWAPD12:
000482 2e18      	MOV  R1,R24
000483 2f86      	MOV  R24,R22
000484 2d61      	MOV  R22,R1
000485 2e19      	MOV  R1,R25
000486 2f97      	MOV  R25,R23
000487 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000488 2e1b      	MOV  R1,R27
000489 2fbf      	MOV  R27,R31
00048a 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
00048b 2e1a      	MOV  R1,R26
00048c 2fae      	MOV  R26,R30
00048d 2de1      	MOV  R30,R1
00048e 9508      	RET
                 
                 __CPD10:
00048f 9730      	SBIW R30,0
000490 4060      	SBCI R22,0
000491 4070      	SBCI R23,0
000492 9508      	RET
                 
                 __CPD02:
000493 2400      	CLR  R0
000494 160a      	CP   R0,R26
000495 060b      	CPC  R0,R27
000496 0608      	CPC  R0,R24
000497 0609      	CPC  R0,R25
000498 9508      	RET
                 
                 __CPD12:
000499 17ea      	CP   R30,R26
00049a 07fb      	CPC  R31,R27
00049b 0768      	CPC  R22,R24
00049c 0779      	CPC  R23,R25
00049d 9508      	RET
                 
                 _frexp:
00049e 91e9      	LD   R30,Y+
00049f 91f9      	LD   R31,Y+
0004a0 9169      	LD   R22,Y+
0004a1 9179      	LD   R23,Y+
0004a2 fb77      	BST  R23,7
0004a3 0f66      	LSL  R22
0004a4 1f77      	ROL  R23
0004a5 2788      	CLR  R24
0004a6 577e      	SUBI R23,0x7E
0004a7 0b88      	SBC  R24,R24
0004a8 937d      	ST   X+,R23
0004a9 938c      	ST   X,R24
0004aa e77e      	LDI  R23,0x7E
0004ab 9576      	LSR  R23
0004ac 9567      	ROR  R22
0004ad f06e      	BRTS __ANEGF1
0004ae 9508      	RET
                 
                 _ldexp:
0004af 91e9      	LD   R30,Y+
0004b0 91f9      	LD   R31,Y+
0004b1 9169      	LD   R22,Y+
0004b2 9179      	LD   R23,Y+
0004b3 fb77      	BST  R23,7
0004b4 0f66      	LSL  R22
0004b5 1f77      	ROL  R23
0004b6 0f7a      	ADD  R23,R26
0004b7 9576      	LSR  R23
0004b8 9567      	ROR  R22
0004b9 f00e      	BRTS __ANEGF1
0004ba 9508      	RET
                 
                 __ANEGF1:
0004bb 9730      	SBIW R30,0
0004bc 4060      	SBCI R22,0
0004bd 4070      	SBCI R23,0
0004be f009      	BREQ __ANEGF10
0004bf 5870      	SUBI R23,0x80
                 __ANEGF10:
0004c0 9508      	RET
                 
                 __ROUND_REPACK:
0004c1 2355      	TST  R21
0004c2 f442      	BRPL __REPACK
0004c3 3850      	CPI  R21,0x80
0004c4 f411      	BRNE __ROUND_REPACK0
0004c5 ffe0      	SBRS R30,0
0004c6 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0004c7 9631      	ADIW R30,1
0004c8 1f69      	ADC  R22,R25
0004c9 1f79      	ADC  R23,R25
0004ca f06b      	BRVS __REPACK1
                 
                 __REPACK:
0004cb e850      	LDI  R21,0x80
0004cc 2757      	EOR  R21,R23
0004cd f411      	BRNE __REPACK0
0004ce 935f      	PUSH R21
0004cf c0cf      	RJMP __ZERORES
                 __REPACK0:
0004d0 3f5f      	CPI  R21,0xFF
0004d1 f031      	BREQ __REPACK1
0004d2 0f66      	LSL  R22
0004d3 0c00      	LSL  R0
0004d4 9557      	ROR  R21
0004d5 9567      	ROR  R22
0004d6 2f75      	MOV  R23,R21
0004d7 9508      	RET
                 __REPACK1:
0004d8 935f      	PUSH R21
0004d9 2000      	TST  R0
0004da f00a      	BRMI __REPACK2
0004db c0ce      	RJMP __MAXRES
                 __REPACK2:
0004dc c0c7      	RJMP __MINRES
                 
                 __UNPACK:
0004dd e850      	LDI  R21,0x80
0004de 2e19      	MOV  R1,R25
0004df 2215      	AND  R1,R21
0004e0 0f88      	LSL  R24
0004e1 1f99      	ROL  R25
0004e2 2795      	EOR  R25,R21
0004e3 0f55      	LSL  R21
0004e4 9587      	ROR  R24
                 
                 __UNPACK1:
0004e5 e850      	LDI  R21,0x80
0004e6 2e07      	MOV  R0,R23
0004e7 2205      	AND  R0,R21
0004e8 0f66      	LSL  R22
0004e9 1f77      	ROL  R23
0004ea 2775      	EOR  R23,R21
0004eb 0f55      	LSL  R21
0004ec 9567      	ROR  R22
0004ed 9508      	RET
                 
                 __CFD1U:
0004ee 9468      	SET
0004ef c001      	RJMP __CFD1U0
                 __CFD1:
0004f0 94e8      	CLT
                 __CFD1U0:
0004f1 935f      	PUSH R21
0004f2 dff2      	RCALL __UNPACK1
0004f3 3870      	CPI  R23,0x80
0004f4 f018      	BRLO __CFD10
0004f5 3f7f      	CPI  R23,0xFF
0004f6 f408      	BRCC __CFD10
0004f7 c0a7      	RJMP __ZERORES
                 __CFD10:
0004f8 e156      	LDI  R21,22
0004f9 1b57      	SUB  R21,R23
0004fa f4aa      	BRPL __CFD11
0004fb 9551      	NEG  R21
0004fc 3058      	CPI  R21,8
0004fd f40e      	BRTC __CFD19
0004fe 3059      	CPI  R21,9
                 __CFD19:
0004ff f030      	BRLO __CFD17
000500 efef      	SER  R30
000501 efff      	SER  R31
000502 ef6f      	SER  R22
000503 e77f      	LDI  R23,0x7F
000504 f977      	BLD  R23,7
000505 c01a      	RJMP __CFD15
                 __CFD17:
000506 2777      	CLR  R23
000507 2355      	TST  R21
000508 f0b9      	BREQ __CFD15
                 __CFD18:
000509 0fee      	LSL  R30
00050a 1fff      	ROL  R31
00050b 1f66      	ROL  R22
00050c 1f77      	ROL  R23
00050d 955a      	DEC  R21
00050e f7d1      	BRNE __CFD18
00050f c010      	RJMP __CFD15
                 __CFD11:
000510 2777      	CLR  R23
                 __CFD12:
000511 3058      	CPI  R21,8
000512 f028      	BRLO __CFD13
000513 2fef      	MOV  R30,R31
000514 2ff6      	MOV  R31,R22
000515 2f67      	MOV  R22,R23
000516 5058      	SUBI R21,8
000517 cff9      	RJMP __CFD12
                 __CFD13:
000518 2355      	TST  R21
000519 f031      	BREQ __CFD15
                 __CFD14:
00051a 9576      	LSR  R23
00051b 9567      	ROR  R22
00051c 95f7      	ROR  R31
00051d 95e7      	ROR  R30
00051e 955a      	DEC  R21
00051f f7d1      	BRNE __CFD14
                 __CFD15:
000520 2000      	TST  R0
000521 f40a      	BRPL __CFD16
000522 df13      	RCALL __ANEGD1
                 __CFD16:
000523 915f      	POP  R21
000524 9508      	RET
                 
                 __CDF1U:
000525 9468      	SET
000526 c001      	RJMP __CDF1U0
                 __CDF1:
000527 94e8      	CLT
                 __CDF1U0:
000528 9730      	SBIW R30,0
000529 4060      	SBCI R22,0
00052a 4070      	SBCI R23,0
00052b f0b1      	BREQ __CDF10
00052c 2400      	CLR  R0
00052d f026      	BRTS __CDF11
00052e 2377      	TST  R23
00052f f412      	BRPL __CDF11
000530 9400      	COM  R0
000531 df04      	RCALL __ANEGD1
                 __CDF11:
000532 2e17      	MOV  R1,R23
000533 e17e      	LDI  R23,30
000534 2011      	TST  R1
                 __CDF12:
000535 f032      	BRMI __CDF13
000536 957a      	DEC  R23
000537 0fee      	LSL  R30
000538 1fff      	ROL  R31
000539 1f66      	ROL  R22
00053a 1c11      	ROL  R1
00053b cff9      	RJMP __CDF12
                 __CDF13:
00053c 2fef      	MOV  R30,R31
00053d 2ff6      	MOV  R31,R22
00053e 2d61      	MOV  R22,R1
00053f 935f      	PUSH R21
000540 df8a      	RCALL __REPACK
000541 915f      	POP  R21
                 __CDF10:
000542 9508      	RET
                 
                 __SWAPACC:
000543 934f      	PUSH R20
000544 01af      	MOVW R20,R30
000545 01fd      	MOVW R30,R26
000546 01da      	MOVW R26,R20
000547 01ab      	MOVW R20,R22
000548 01bc      	MOVW R22,R24
000549 01ca      	MOVW R24,R20
00054a 2d40      	MOV  R20,R0
00054b 2c01      	MOV  R0,R1
00054c 2e14      	MOV  R1,R20
00054d 914f      	POP  R20
00054e 9508      	RET
                 
                 __UADD12:
00054f 0fea      	ADD  R30,R26
000550 1ffb      	ADC  R31,R27
000551 1f68      	ADC  R22,R24
000552 9508      	RET
                 
                 __NEGMAN1:
000553 95e0      	COM  R30
000554 95f0      	COM  R31
000555 9560      	COM  R22
000556 5fef      	SUBI R30,-1
000557 4fff      	SBCI R31,-1
000558 4f6f      	SBCI R22,-1
000559 9508      	RET
                 
                 __SUBF12:
00055a 935f      	PUSH R21
00055b df81      	RCALL __UNPACK
00055c 3890      	CPI  R25,0x80
00055d f171      	BREQ __ADDF129
00055e e850      	LDI  R21,0x80
00055f 2615      	EOR  R1,R21
                 
000560 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000561 935f      	PUSH R21
000562 df7a      	RCALL __UNPACK
000563 3890      	CPI  R25,0x80
000564 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000565 3870      	CPI  R23,0x80
000566 f121      	BREQ __ADDF128
                 __ADDF121:
000567 2f57      	MOV  R21,R23
000568 1b59      	SUB  R21,R25
000569 f12b      	BRVS __ADDF1211
00056a f412      	BRPL __ADDF122
00056b dfd7      	RCALL __SWAPACC
00056c cffa      	RJMP __ADDF121
                 __ADDF122:
00056d 3158      	CPI  R21,24
00056e f018      	BRLO __ADDF123
00056f 27aa      	CLR  R26
000570 27bb      	CLR  R27
000571 2788      	CLR  R24
                 __ADDF123:
000572 3058      	CPI  R21,8
000573 f028      	BRLO __ADDF124
000574 2fab      	MOV  R26,R27
000575 2fb8      	MOV  R27,R24
000576 2788      	CLR  R24
000577 5058      	SUBI R21,8
000578 cff9      	RJMP __ADDF123
                 __ADDF124:
000579 2355      	TST  R21
00057a f029      	BREQ __ADDF126
                 __ADDF125:
00057b 9586      	LSR  R24
00057c 95b7      	ROR  R27
00057d 95a7      	ROR  R26
00057e 955a      	DEC  R21
00057f f7d9      	BRNE __ADDF125
                 __ADDF126:
000580 2d50      	MOV  R21,R0
000581 2551      	EOR  R21,R1
000582 f072      	BRMI __ADDF127
000583 dfcb      	RCALL __UADD12
000584 f438      	BRCC __ADDF129
000585 9567      	ROR  R22
000586 95f7      	ROR  R31
000587 95e7      	ROR  R30
000588 9573      	INC  R23
000589 f413      	BRVC __ADDF129
00058a c01f      	RJMP __MAXRES
                 __ADDF128:
00058b dfb7      	RCALL __SWAPACC
                 __ADDF129:
00058c df3e      	RCALL __REPACK
00058d 915f      	POP  R21
00058e 9508      	RET
                 __ADDF1211:
00058f f7d8      	BRCC __ADDF128
000590 cffb      	RJMP __ADDF129
                 __ADDF127:
000591 1bea      	SUB  R30,R26
000592 0bfb      	SBC  R31,R27
000593 0b68      	SBC  R22,R24
000594 f051      	BREQ __ZERORES
000595 f410      	BRCC __ADDF1210
000596 9400      	COM  R0
000597 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000598 2366      	TST  R22
000599 f392      	BRMI __ADDF129
00059a 0fee      	LSL  R30
00059b 1fff      	ROL  R31
00059c 1f66      	ROL  R22
00059d 957a      	DEC  R23
00059e f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00059f 27ee      	CLR  R30
0005a0 27ff      	CLR  R31
0005a1 01bf      	MOVW R22,R30
0005a2 915f      	POP  R21
0005a3 9508      	RET
                 
                 __MINRES:
0005a4 efef      	SER  R30
0005a5 efff      	SER  R31
0005a6 e76f      	LDI  R22,0x7F
0005a7 ef7f      	SER  R23
0005a8 915f      	POP  R21
0005a9 9508      	RET
                 
                 __MAXRES:
0005aa efef      	SER  R30
0005ab efff      	SER  R31
0005ac e76f      	LDI  R22,0x7F
0005ad e77f      	LDI  R23,0x7F
0005ae 915f      	POP  R21
0005af 9508      	RET
                 
                 __MULF12:
0005b0 935f      	PUSH R21
0005b1 df2b      	RCALL __UNPACK
0005b2 3870      	CPI  R23,0x80
0005b3 f359      	BREQ __ZERORES
0005b4 3890      	CPI  R25,0x80
0005b5 f349      	BREQ __ZERORES
0005b6 2401      	EOR  R0,R1
0005b7 9408      	SEC
0005b8 1f79      	ADC  R23,R25
0005b9 f423      	BRVC __MULF124
0005ba f324      	BRLT __ZERORES
                 __MULF125:
0005bb 2000      	TST  R0
0005bc f33a      	BRMI __MINRES
0005bd cfec      	RJMP __MAXRES
                 __MULF124:
0005be 920f      	PUSH R0
0005bf 931f      	PUSH R17
0005c0 932f      	PUSH R18
0005c1 933f      	PUSH R19
0005c2 934f      	PUSH R20
0005c3 2711      	CLR  R17
0005c4 2722      	CLR  R18
0005c5 2799      	CLR  R25
0005c6 9f68      	MUL  R22,R24
0005c7 01a0      	MOVW R20,R0
0005c8 9f8f      	MUL  R24,R31
0005c9 2d30      	MOV  R19,R0
0005ca 0d41      	ADD  R20,R1
0005cb 1f59      	ADC  R21,R25
0005cc 9f6b      	MUL  R22,R27
0005cd 0d30      	ADD  R19,R0
0005ce 1d41      	ADC  R20,R1
0005cf 1f59      	ADC  R21,R25
0005d0 9f8e      	MUL  R24,R30
0005d1 d027      	RCALL __MULF126
0005d2 9fbf      	MUL  R27,R31
0005d3 d025      	RCALL __MULF126
0005d4 9f6a      	MUL  R22,R26
0005d5 d023      	RCALL __MULF126
0005d6 9fbe      	MUL  R27,R30
0005d7 d01d      	RCALL __MULF127
0005d8 9faf      	MUL  R26,R31
0005d9 d01b      	RCALL __MULF127
0005da 9fae      	MUL  R26,R30
0005db 0d11      	ADD  R17,R1
0005dc 1f29      	ADC  R18,R25
0005dd 1f39      	ADC  R19,R25
0005de 1f49      	ADC  R20,R25
0005df 1f59      	ADC  R21,R25
0005e0 2fe3      	MOV  R30,R19
0005e1 2ff4      	MOV  R31,R20
0005e2 2f65      	MOV  R22,R21
0005e3 2f52      	MOV  R21,R18
0005e4 914f      	POP  R20
0005e5 913f      	POP  R19
0005e6 912f      	POP  R18
0005e7 911f      	POP  R17
0005e8 900f      	POP  R0
0005e9 2366      	TST  R22
0005ea f02a      	BRMI __MULF122
0005eb 0f55      	LSL  R21
0005ec 1fee      	ROL  R30
0005ed 1fff      	ROL  R31
0005ee 1f66      	ROL  R22
0005ef c002      	RJMP __MULF123
                 __MULF122:
0005f0 9573      	INC  R23
0005f1 f24b      	BRVS __MULF125
                 __MULF123:
0005f2 dece      	RCALL __ROUND_REPACK
0005f3 915f      	POP  R21
0005f4 9508      	RET
                 
                 __MULF127:
0005f5 0d10      	ADD  R17,R0
0005f6 1d21      	ADC  R18,R1
0005f7 1f39      	ADC  R19,R25
0005f8 c002      	RJMP __MULF128
                 __MULF126:
0005f9 0d20      	ADD  R18,R0
0005fa 1d31      	ADC  R19,R1
                 __MULF128:
0005fb 1f49      	ADC  R20,R25
0005fc 1f59      	ADC  R21,R25
0005fd 9508      	RET
                 
                 __DIVF21:
0005fe 935f      	PUSH R21
0005ff dedd      	RCALL __UNPACK
000600 3870      	CPI  R23,0x80
000601 f421      	BRNE __DIVF210
000602 2011      	TST  R1
                 __DIVF211:
000603 f40a      	BRPL __DIVF219
000604 cf9f      	RJMP __MINRES
                 __DIVF219:
000605 cfa4      	RJMP __MAXRES
                 __DIVF210:
000606 3890      	CPI  R25,0x80
000607 f409      	BRNE __DIVF218
                 __DIVF217:
000608 cf96      	RJMP __ZERORES
                 __DIVF218:
000609 2401      	EOR  R0,R1
00060a 9408      	SEC
00060b 0b97      	SBC  R25,R23
00060c f41b      	BRVC __DIVF216
00060d f3d4      	BRLT __DIVF217
00060e 2000      	TST  R0
00060f cff3      	RJMP __DIVF211
                 __DIVF216:
000610 2f79      	MOV  R23,R25
000611 931f      	PUSH R17
000612 932f      	PUSH R18
000613 933f      	PUSH R19
000614 934f      	PUSH R20
000615 2411      	CLR  R1
000616 2711      	CLR  R17
000617 2722      	CLR  R18
000618 2733      	CLR  R19
000619 01a9      	MOVW R20,R18
00061a e290      	LDI  R25,32
                 __DIVF212:
00061b 17ae      	CP   R26,R30
00061c 07bf      	CPC  R27,R31
00061d 0786      	CPC  R24,R22
00061e 0741      	CPC  R20,R17
00061f f030      	BRLO __DIVF213
000620 1bae      	SUB  R26,R30
000621 0bbf      	SBC  R27,R31
000622 0b86      	SBC  R24,R22
000623 0b41      	SBC  R20,R17
000624 9408      	SEC
000625 c001      	RJMP __DIVF214
                 __DIVF213:
000626 9488      	CLC
                 __DIVF214:
000627 1f55      	ROL  R21
000628 1f22      	ROL  R18
000629 1f33      	ROL  R19
00062a 1c11      	ROL  R1
00062b 1faa      	ROL  R26
00062c 1fbb      	ROL  R27
00062d 1f88      	ROL  R24
00062e 1f44      	ROL  R20
00062f 959a      	DEC  R25
000630 f751      	BRNE __DIVF212
000631 01f9      	MOVW R30,R18
000632 2d61      	MOV  R22,R1
000633 914f      	POP  R20
000634 913f      	POP  R19
000635 912f      	POP  R18
000636 911f      	POP  R17
000637 2366      	TST  R22
000638 f032      	BRMI __DIVF215
000639 0f55      	LSL  R21
00063a 1fee      	ROL  R30
00063b 1fff      	ROL  R31
00063c 1f66      	ROL  R22
00063d 957a      	DEC  R23
00063e f24b      	BRVS __DIVF217
                 __DIVF215:
00063f de81      	RCALL __ROUND_REPACK
000640 915f      	POP  R21
000641 9508      	RET
                 
                 __CMPF12:
000642 2399      	TST  R25
000643 f09a      	BRMI __CMPF120
000644 2377      	TST  R23
000645 f042      	BRMI __CMPF121
000646 1797      	CP   R25,R23
000647 f048      	BRLO __CMPF122
000648 f429      	BRNE __CMPF121
000649 17ae      	CP   R26,R30
00064a 07bf      	CPC  R27,R31
00064b 0786      	CPC  R24,R22
00064c f020      	BRLO __CMPF122
00064d f031      	BREQ __CMPF123
                 __CMPF121:
00064e 9498      	CLZ
00064f 9488      	CLC
000650 9508      	RET
                 __CMPF122:
000651 9498      	CLZ
000652 9408      	SEC
000653 9508      	RET
                 __CMPF123:
000654 9418      	SEZ
000655 9488      	CLC
000656 9508      	RET
                 __CMPF120:
000657 2377      	TST  R23
000658 f7c2      	BRPL __CMPF122
000659 1797      	CP   R25,R23
00065a f398      	BRLO __CMPF121
00065b f7a9      	BRNE __CMPF122
00065c 17ea      	CP   R30,R26
00065d 07fb      	CPC  R31,R27
00065e 0768      	CPC  R22,R24
00065f f388      	BRLO __CMPF122
000660 f399      	BREQ __CMPF123
000661 cfec      	RJMP __CMPF121
                 
                 _delay_ms:
000662 9610      	adiw r26,0
000663 f039      	breq __delay_ms1
                 __delay_ms0:
000664 95a8      	wdr
                +
000665 ed80     +LDI R24 , LOW ( 0x7D0 )
000666 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000667 9701     +SBIW R24 , 1
000668 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000669 9711      	sbiw r26,1
00066a f7c9      	brne __delay_ms0
                 __delay_ms1:
00066b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  40 r1 :  36 r2 :   0 r3 :   0 r4 :   8 r5 :   3 r6 :   3 r7 :   1 
r8 :   4 r9 :   3 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   2 
r16:  15 r17:  25 r18:  16 r19:  14 r20:  22 r21:  62 r22: 105 r23: 101 
r24:  83 r25:  72 r26: 113 r27:  66 r28:  12 r29:   1 r30: 211 r31:  97 
x  :  10 y  : 171 z  :   8 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  18 add   :  10 
adiw  :  14 and   :   5 andi  :   3 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   1 break :   0 breq  :  22 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   6 brmi  :   9 brne  :  32 brpl  :   7 brsh  :   3 brtc  :   3 
brts  :   3 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 call  : 144 
cbi   :   5 cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 
clr   :  34 cls   :   0 clt   :   4 clv   :   0 clz   :   2 com   :   8 
cp    :  14 cpc   :  21 cpi   :  20 cpse  :   0 dec   :  14 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   4 jmp   :  25 ld    :  41 ldd   :  67 ldi   : 197 
lds   :   0 lpm   :   7 lsl   :  15 lsr   :   5 mov   :  46 movw  :  40 
mul   :   9 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   2 out   :  32 pop   :  36 push  :  36 rcall :  46 ret   :  71 
reti  :   3 rjmp  :  50 rol   :  29 ror   :  17 sbc   :  10 sbci  :  15 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  14 sbr   :   3 sbrc  :   2 
sbrs  :   2 sec   :   5 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   1 sleep :   0 spm   :   0 
st    :  49 std   :  25 sts   :   2 sub   :   6 subi  :  10 swap  :   1 
tst   :  17 wdr   :   1 
Instructions used: 79 out of 116 (68.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000cd8   3182    106   3288   16384  20.1%
[.dseg] 0x000060 0x000185      0     37     37    1024   3.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
