
AVRASM ver. 2.1.30  C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\6\6_Alireza_Abrehforoush\codevision\Debug\List\main.asm Tue May 30 01:58:02 2023

C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\6\6_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1083): warning: Register r5 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\6\6_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1084): warning: Register r4 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\6\6_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1085): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0052 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0182 	JMP  _adc_isr
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 4441
000034 2043
000035 6425
000036 203a      	.DB  0x41,0x44,0x43,0x20,0x25,0x64,0x3A,0x20
000037 6425
000038 252e
000039 6d64
00003a 0076      	.DB  0x25,0x64,0x2E,0x25,0x64,0x6D,0x76,0x0
00003b 656e
00003c 3e77
00003d 4441
00003e 2543      	.DB  0x6E,0x65,0x77,0x3E,0x41,0x44,0x43,0x25
00003f 3a64
000040 6325
000041 6425
000042 766d      	.DB  0x64,0x3A,0x25,0x63,0x25,0x64,0x6D,0x76
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\6\6_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1127): warning: .cseg .db misalignment - padding zero byte
000043 0000      	.DB  0x0
                 _0x2040003:
000044 c080      	.DB  0x80,0xC0
                 _0x20A0060:
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\6\6_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1131): warning: .cseg .db misalignment - padding zero byte
000045 0001      	.DB  0x1
                 _0x20A0000:
000046 4e2d
000047 4e41
000048 4900
000049 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\6\6_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1134): warning: .cseg .db misalignment - padding zero byte
00004a 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004b 0002      	.DW  0x02
00004c 01a9      	.DW  __base_y_G102
00004d 0088      	.DW  _0x2040003*2
                 
00004e 0001      	.DW  0x01
00004f 01ad      	.DW  __seed_G105
000050 008a      	.DW  _0x20A0060*2
                 
                 _0xFFFFFFFF:
000051 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000052 94f8      	CLI
000053 27ee      	CLR  R30
000054 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000055 e0f1      	LDI  R31,1
000056 bffb      	OUT  GICR,R31
000057 bfeb      	OUT  GICR,R30
000058 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000059 e08d      	LDI  R24,(14-2)+1
00005a e0a2      	LDI  R26,2
00005b 27bb      	CLR  R27
                 __CLEAR_REG:
00005c 93ed      	ST   X+,R30
00005d 958a      	DEC  R24
00005e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000060 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000061 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000062 93ed      	ST   X+,R30
000063 9701      	SBIW R24,1
000064 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000065 e9e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000066 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000067 9185      	LPM  R24,Z+
000068 9195      	LPM  R25,Z+
000069 9700      	SBIW R24,0
00006a f061      	BREQ __GLOBAL_INI_END
00006b 91a5      	LPM  R26,Z+
00006c 91b5      	LPM  R27,Z+
00006d 9005      	LPM  R0,Z+
00006e 9015      	LPM  R1,Z+
00006f 01bf      	MOVW R22,R30
000070 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000071 9005      	LPM  R0,Z+
000072 920d      	ST   X+,R0
000073 9701      	SBIW R24,1
000074 f7e1      	BRNE __GLOBAL_INI_LOOP
000075 01fb      	MOVW R30,R22
000076 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000077 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000078 bfed      	OUT  SPL,R30
000079 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007d 940c 01dd 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void func1(unsigned char input_index)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _func1:
                 ; .FSTART _func1
                 ; 0000 0005 float temp;
                 ; 0000 0006 int tempInt, tempFloat;
                 ; 0000 0007 temp = ((float)adc_data[input_index] / MAX_ADC_IN) * 5 * 1000;
00007f 93aa      	ST   -Y,R26
000080 9724      	SBIW R28,4
000081 940e 04b5 	CALL __SAVELOCR4
                 ;	input_index -> Y+8
                 ;	temp -> Y+4
                 ;	tempInt -> R16,R17
                 ;	tempFloat -> R18,R19
000083 85e8      	LDD  R30,Y+8
000084 940e 043e 	CALL SUBOPT_0x0
000086 91ed      	LD   R30,X+
000087 91fd      	LD   R31,X+
000088 2766      	CLR  R22
000089 2777      	CLR  R23
00008a 940e 0571 	CALL __CDF1
00008c 940e 0446 	CALL SUBOPT_0x1
                +
00008e 83ec     +STD Y + 4 , R30
00008f 83fd     +STD Y + 4 + 1 , R31
000090 836e     +STD Y + 4 + 2 , R22
000091 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
                 ; 0000 0008 tempInt = (int)temp;
000092 940e 053a 	CALL __CFD1
000094 940e 045b 	CALL SUBOPT_0x2
                 ; 0000 0009 tempFloat = (int)((temp - (float)tempInt) * 10);
                +
000096 81ac     +LDD R26 , Y + 4
000097 81bd     +LDD R27 , Y + 4 + 1
000098 818e     +LDD R24 , Y + 4 + 2
000099 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
00009a 940e 04fe 	CALL __SWAPD12
00009c 940e 05a4 	CALL __SUBF12
                +
00009e e0a0     +LDI R26 , LOW ( 0x41200000 )
00009f e0b0     +LDI R27 , HIGH ( 0x41200000 )
0000a0 e280     +LDI R24 , BYTE3 ( 0x41200000 )
0000a1 e491     +LDI R25 , BYTE4 ( 0x41200000 )
                 	__GETD2N 0x41200000
0000a2 940e 05fa 	CALL __MULF12
0000a4 940e 053a 	CALL __CFD1
0000a6 019f      	MOVW R18,R30
                 ; 0000 000A sprintf(buff1,"ADC %d: %d.%dmv", input_index, tempInt, tempFloat);
0000a7 e8e8      	LDI  R30,LOW(_buff1)
0000a8 e0f1      	LDI  R31,HIGH(_buff1)
0000a9 93fa      	ST   -Y,R31
0000aa 93ea      	ST   -Y,R30
                +
0000ab e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000ac e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000ad 93fa      	ST   -Y,R31
0000ae 93ea      	ST   -Y,R30
0000af 85ec      	LDD  R30,Y+12
0000b0 940e 0461 	CALL SUBOPT_0x3
0000b2 01f8      	MOVW R30,R16
0000b3 940e 0467 	CALL SUBOPT_0x4
0000b5 01f9      	MOVW R30,R18
0000b6 940e 0467 	CALL SUBOPT_0x4
0000b8 e08c      	LDI  R24,12
0000b9 940e 035c 	CALL _sprintf
0000bb 9660      	ADIW R28,16
                 ; 0000 000B }
0000bc 940e 04bc 	CALL __LOADLOCR4
0000be 9629      	ADIW R28,9
0000bf 9508      	RET
                 ; .FEND
                 ;void func2(unsigned char input_index)
                 ; 0000 000E {
                 _func2:
                 ; .FSTART _func2
                 ; 0000 000F int change, temp;
                 ; 0000 0010 char ch;
                 ; 0000 0011 if(firstUpdateDone[input_index] == 1 && ((adc_data[input_index] - previous_data[ ...
0000c0 93aa      	ST   -Y,R26
0000c1 940e 04b3 	CALL __SAVELOCR6
                 ;	input_index -> Y+6
                 ;	change -> R16,R17
                 ;	temp -> R18,R19
                 ;	ch -> R21
0000c3 940e 046c 	CALL SUBOPT_0x5
0000c5 81a0      	LD   R26,Z
0000c6 30a1      	CPI  R26,LOW(0x1)
0000c7 f4c1      	BRNE _0x4
0000c8 81ee      	LDD  R30,Y+6
0000c9 940e 043e 	CALL SUBOPT_0x0
0000cb 940e 0471 	CALL SUBOPT_0x6
0000cd 97d3      	SBIW R26,51
0000ce f480      	BRSH _0x5
0000cf 940e 0481 	CALL SUBOPT_0x7
0000d1 0fae      	ADD  R26,R30
0000d2 1fbf      	ADC  R27,R31
0000d3 900d      	LD   R0,X+
0000d4 901c      	LD   R1,X
0000d5 81ee      	LDD  R30,Y+6
0000d6 940e 043e 	CALL SUBOPT_0x0
0000d8 91ed      	LD   R30,X+
0000d9 91fd      	LD   R31,X+
0000da 01d0      	MOVW R26,R0
0000db 1bae      	SUB  R26,R30
0000dc 0bbf      	SBC  R27,R31
0000dd 97d3      	SBIW R26,51
0000de f008      	BRLO _0x4
                 _0x5:
0000df c001      	RJMP _0x7
                 _0x4:
0000e0 c039      	RJMP _0x3
                 _0x7:
                 ; 0000 0012 {
                 ; 0000 0013 change = adc_data[input_index] - previous_data[input_index];
0000e1 81ee      	LDD  R30,Y+6
0000e2 940e 043e 	CALL SUBOPT_0x0
0000e4 940e 0471 	CALL SUBOPT_0x6
0000e6 018d      	MOVW R16,R26
                 ; 0000 0014 temp = ((float)change / MAX_ADC_IN) * 5 * 1000;
0000e7 01f8      	MOVW R30,R16
0000e8 940e 04d1 	CALL __CWD1
0000ea 940e 0571 	CALL __CDF1
0000ec 940e 0446 	CALL SUBOPT_0x1
0000ee 940e 053a 	CALL __CFD1
0000f0 019f      	MOVW R18,R30
                 ; 0000 0015 ch = change > 0 ? '+' : '-';
0000f1 2400      	CLR  R0
0000f2 1600      	CP   R0,R16
0000f3 0601      	CPC  R0,R17
0000f4 f414      	BRGE _0x8
0000f5 e2eb      	LDI  R30,LOW(43)
0000f6 c001      	RJMP _0x9
                 _0x8:
0000f7 e2ed      	LDI  R30,LOW(45)
                 _0x9:
0000f8 2f5e      	MOV  R21,R30
                 ; 0000 0016 temp = temp > 0 ? temp : temp * (-1);
0000f9 2400      	CLR  R0
0000fa 1602      	CP   R0,R18
0000fb 0603      	CPC  R0,R19
0000fc f414      	BRGE _0xB
0000fd 01f9      	MOVW R30,R18
0000fe c005      	RJMP _0xC
                 _0xB:
0000ff 01f9      	MOVW R30,R18
000100 efaf      	LDI  R26,LOW(65535)
000101 efbf      	LDI  R27,HIGH(65535)
000102 940e 04de 	CALL __MULW12
                 _0xC:
000104 019f      	MOVW R18,R30
                 ; 0000 0017 sprintf(buff2,"new>ADC%d:%c%dmv", input_index, ch, temp);
000105 e9e8      	LDI  R30,LOW(_buff2)
000106 e0f1      	LDI  R31,HIGH(_buff2)
000107 93fa      	ST   -Y,R31
000108 93ea      	ST   -Y,R30
                +
000109 e7e6     +LDI R30 , LOW ( 2 * _0x0 + ( 16 ) )
00010a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 16 ) )
                 	__POINTW1FN _0x0,16
00010b 93fa      	ST   -Y,R31
00010c 93ea      	ST   -Y,R30
00010d 85ea      	LDD  R30,Y+10
00010e 940e 0461 	CALL SUBOPT_0x3
000110 2fe5      	MOV  R30,R21
000111 940e 0461 	CALL SUBOPT_0x3
000113 01f9      	MOVW R30,R18
000114 940e 0467 	CALL SUBOPT_0x4
000116 e08c      	LDI  R24,12
000117 940e 035c 	CALL _sprintf
000119 9660      	ADIW R28,16
                 ; 0000 0018 }
                 ; 0000 0019 
                 ; 0000 001A previous_data[input_index] = adc_data[input_index];
                 _0x3:
00011a 940e 0481 	CALL SUBOPT_0x7
00011c 0fea      	ADD  R30,R26
00011d 1ffb      	ADC  R31,R27
00011e 010f      	MOVW R0,R30
00011f 81ee      	LDD  R30,Y+6
000120 940e 043e 	CALL SUBOPT_0x0
000122 91ed      	LD   R30,X+
000123 91fd      	LD   R31,X+
000124 01d0      	MOVW R26,R0
000125 93ed      	ST   X+,R30
000126 93fc      	ST   X,R31
                 ; 0000 001B if(firstUpdateDone[input_index] == 0)
000127 940e 046c 	CALL SUBOPT_0x5
000129 81e0      	LD   R30,Z
00012a 30e0      	CPI  R30,0
00012b f421      	BRNE _0xE
                 ; 0000 001C {
                 ; 0000 001D firstUpdateDone[input_index] = 1;
00012c 940e 046c 	CALL SUBOPT_0x5
00012e e0a1      	LDI  R26,LOW(1)
00012f 83a0      	STD  Z+0,R26
                 ; 0000 001E }
                 ; 0000 001F }
                 _0xE:
000130 940e 04ba 	CALL __LOADLOCR6
000132 9627      	ADIW R28,7
000133 9508      	RET
                 ; .FEND
                 ;void func3()
                 ; 0000 0022 {
                 _func3:
                 ; .FSTART _func3
                 ; 0000 0023 int duty = (int)adc_data[0] / 10.23;
                 ; 0000 0024 OCR0 = (2.55 * duty) + 0.5;
000134 931a      	ST   -Y,R17
000135 930a      	ST   -Y,R16
                 ;	duty -> R16,R17
000136 91e0 0160 	LDS  R30,_adc_data
000138 91f0 0161 	LDS  R31,_adc_data+1
00013a 940e 04d1 	CALL __CWD1
00013c 940e 0571 	CALL __CDF1
00013e 01df      	MOVW R26,R30
00013f 01cb      	MOVW R24,R22
                +
000140 e1e4     +LDI R30 , LOW ( 0x4123AE14 )
000141 eafe     +LDI R31 , HIGH ( 0x4123AE14 )
000142 e263     +LDI R22 , BYTE3 ( 0x4123AE14 )
000143 e471     +LDI R23 , BYTE4 ( 0x4123AE14 )
                 	__GETD1N 0x4123AE14
000144 940e 0648 	CALL __DIVF21
000146 940e 0538 	CALL __CFD1U
000148 940e 045b 	CALL SUBOPT_0x2
                +
00014a e3a3     +LDI R26 , LOW ( 0x40233333 )
00014b e3b3     +LDI R27 , HIGH ( 0x40233333 )
00014c e283     +LDI R24 , BYTE3 ( 0x40233333 )
00014d e490     +LDI R25 , BYTE4 ( 0x40233333 )
                 	__GETD2N 0x40233333
00014e 940e 05fa 	CALL __MULF12
                +
000150 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000151 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000152 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000153 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000154 940e 05ab 	CALL __ADDF12
000156 940e 0538 	CALL __CFD1U
000158 bfec      	OUT  0x3C,R30
                 ; 0000 0025 }
000159 9109      	LD   R16,Y+
00015a 9119      	LD   R17,Y+
00015b 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void initPorts()
                 ; 0001 0004 {
                 
                 	.CSEG
                 _initPorts:
                 ; .FSTART _initPorts
                 ; 0001 0005 // Input/Output Ports initialization
                 ; 0001 0006 // Port A initialization
                 ; 0001 0007 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 0008 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
00015c e0e0      	LDI  R30,LOW(0)
00015d bbea      	OUT  0x1A,R30
                 ; 0001 0009 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 000A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
00015e bbeb      	OUT  0x1B,R30
                 ; 0001 000B 
                 ; 0001 000C // Port B initialization
                 ; 0001 000D // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0001 000E DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1< ...
00015f efef      	LDI  R30,LOW(255)
000160 bbe7      	OUT  0x17,R30
                 ; 0001 000F // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 0010 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
000161 e0e0      	LDI  R30,LOW(0)
000162 bbe8      	OUT  0x18,R30
                 ; 0001 0011 
                 ; 0001 0012 // Port C initialization
                 ; 0001 0013 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0001 0014 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1< ...
000163 efef      	LDI  R30,LOW(255)
000164 bbe4      	OUT  0x14,R30
                 ; 0001 0015 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 0016 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
000165 e0e0      	LDI  R30,LOW(0)
000166 bbe5      	OUT  0x15,R30
                 ; 0001 0017 
                 ; 0001 0018 // Port D initialization
                 ; 0001 0019 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0001 001A DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1< ...
000167 efef      	LDI  R30,LOW(255)
000168 bbe1      	OUT  0x11,R30
                 ; 0001 001B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 001C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
000169 e0e0      	LDI  R30,LOW(0)
00016a bbe2      	OUT  0x12,R30
                 ; 0001 001D }
00016b 9508      	RET
                 ; .FEND
                 ;void initTimers()
                 ; 0001 0020 {
                 _initTimers:
                 ; .FSTART _initTimers
                 ; 0001 0021 // Timer/Counter 0 initialization
                 ; 0001 0022 // Clock source: System Clock
                 ; 0001 0023 // Clock value: 7.813 kHz
                 ; 0001 0024 // Mode: Phase correct PWM top=0xFF
                 ; 0001 0025 // OC0 output: Non-Inverted PWM
                 ; 0001 0026 // Timer Period: 65.28 ms
                 ; 0001 0027 // Output Pulse(s):
                 ; 0001 0028 // OC0 Period: 65.28 ms Width: 0 us
                 ; 0001 0029 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01)  ...
00016c e6e5      	LDI  R30,LOW(101)
00016d bfe3      	OUT  0x33,R30
                 ; 0001 002A TCNT0=0x00;
00016e e0e0      	LDI  R30,LOW(0)
00016f bfe2      	OUT  0x32,R30
                 ; 0001 002B OCR0=0x00;
000170 bfec      	OUT  0x3C,R30
                 ; 0001 002C 
                 ; 0001 002D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 002E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
000171 bfe9      	OUT  0x39,R30
                 ; 0001 002F }
000172 9508      	RET
                 ; .FEND
                 ;void inintADC()
                 ; 0001 0032 {
                 _inintADC:
                 ; .FSTART _inintADC
                 ; 0001 0033 // ADC initialization
                 ; 0001 0034 // ADC Clock frequency: 1000.000 kHz
                 ; 0001 0035 // ADC Voltage Reference: AREF pin
                 ; 0001 0036 // ADC Auto Trigger Source: Free Running
                 ; 0001 0037 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
000173 e0e0      	LDI  R30,LOW(0)
000174 b9e7      	OUT  0x7,R30
                 ; 0001 0038 ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | ...
000175 eeeb      	LDI  R30,LOW(235)
000176 b9e6      	OUT  0x6,R30
                 ; 0001 0039 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000177 e0e0      	LDI  R30,LOW(0)
000178 bfe0      	OUT  0x30,R30
                 ; 0001 003A }
000179 9508      	RET
                 ; .FEND
                 ;void initBoard()
                 ; 0001 003D {
                 _initBoard:
                 ; .FSTART _initBoard
                 ; 0001 003E initPorts();
00017a dfe1      	RCALL _initPorts
                 ; 0001 003F initTimers();
00017b dff0      	RCALL _initTimers
                 ; 0001 0040 inintADC();
00017c dff6      	RCALL _inintADC
                 ; 0001 0041 
                 ; 0001 0042 // Alphanumeric LCD initialization
                 ; 0001 0043 // Connections are specified in the
                 ; 0001 0044 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 0045 // RS - PORTC Bit 0
                 ; 0001 0046 // RD - PORTC Bit 1
                 ; 0001 0047 // EN - PORTC Bit 2
                 ; 0001 0048 // D4 - PORTC Bit 4
                 ; 0001 0049 // D5 - PORTC Bit 5
                 ; 0001 004A // D6 - PORTC Bit 6
                 ; 0001 004B // D7 - PORTC Bit 7
                 ; 0001 004C // Characters/line: 16
                 ; 0001 004D lcd_init(16);
00017d e1a0      	LDI  R26,LOW(16)
00017e 940e 03f7 	CALL _lcd_init
                 ; 0001 004E 
                 ; 0001 004F // Global enable interrupts
                 ; 0001 0050 #asm("sei")
000180 9478      	SEI
                 ; 0001 0051 }
000181 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;unsigned int adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;unsigned int previous_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1] = {0};
                 ;char firstUpdateDone[LAST_ADC_INPUT-FIRST_ADC_INPUT+1] = {0};
                 ;char buff1[16], buff2[16];
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0002 0022 {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
000182 920a      	ST   -Y,R0
000183 921a      	ST   -Y,R1
000184 92fa      	ST   -Y,R15
000185 936a      	ST   -Y,R22
000186 937a      	ST   -Y,R23
000187 938a      	ST   -Y,R24
000188 939a      	ST   -Y,R25
000189 93aa      	ST   -Y,R26
00018a 93ba      	ST   -Y,R27
00018b 93ea      	ST   -Y,R30
00018c 93fa      	ST   -Y,R31
00018d b7ef      	IN   R30,SREG
00018e 93ea      	ST   -Y,R30
                 ; 0002 0023 static unsigned char input_index=0;
                 ; 0002 0024 
                 ; 0002 0025 // Read the AD conversion result
                 ; 0002 0026 adc_data[input_index] = ADCW;
00018f 91e0 01a8 	LDS  R30,_input_index_S0020000000
000191 e6a0      	LDI  R26,LOW(_adc_data)
000192 e0b1      	LDI  R27,HIGH(_adc_data)
000193 e0f0      	LDI  R31,0
000194 0fee      	LSL  R30
000195 1fff      	ROL  R31
000196 0fae      	ADD  R26,R30
000197 1fbf      	ADC  R27,R31
000198 b1e4      	IN   R30,0x4
000199 b1f5      	IN   R31,0x4+1
00019a 93ed      	ST   X+,R30
00019b 93fc      	ST   X,R31
                 ; 0002 0027 
                 ; 0002 0028 /*combined parts 1 and 2  */
                 ; 0002 0029 // print adc valuse
                 ; 0002 002A func1(input_index);
00019c 91a0 01a8 	LDS  R26,_input_index_S0020000000
00019e 940e 007f 	CALL _func1
                 ; 0002 002B lcd_clear();
0001a0 940e 03c5 	CALL _lcd_clear
                 ; 0002 002C lcd_gotoxy(0, 0);
0001a2 e0e0      	LDI  R30,LOW(0)
0001a3 93ea      	ST   -Y,R30
0001a4 e0a0      	LDI  R26,LOW(0)
0001a5 940e 03b8 	CALL _lcd_gotoxy
                 ; 0002 002D lcd_puts(buff1);
0001a7 e8a8      	LDI  R26,LOW(_buff1)
0001a8 e0b1      	LDI  R27,HIGH(_buff1)
0001a9 940e 03e6 	CALL _lcd_puts
                 ; 0002 002E 
                 ; 0002 002F // check adc updates
                 ; 0002 0030 func2(input_index);
0001ab 91a0 01a8 	LDS  R26,_input_index_S0020000000
0001ad 940e 00c0 	CALL _func2
                 ; 0002 0031 lcd_gotoxy(0, 1);
0001af e0e0      	LDI  R30,LOW(0)
0001b0 93ea      	ST   -Y,R30
0001b1 e0a1      	LDI  R26,LOW(1)
0001b2 940e 03b8 	CALL _lcd_gotoxy
                 ; 0002 0032 lcd_puts(buff2);
0001b4 e9a8      	LDI  R26,LOW(_buff2)
0001b5 e0b1      	LDI  R27,HIGH(_buff2)
0001b6 940e 03e6 	CALL _lcd_puts
                 ; 0002 0033 
                 ; 0002 0034 /* set timer0 dutucyle in pwm mode */
                 ; 0002 0035 func3();
0001b8 940e 0134 	CALL _func3
                 ; 0002 0036 
                 ; 0002 0037 // delay for display
                 ; 0002 0038 delay_ms(125);
0001ba e7ad      	LDI  R26,LOW(125)
0001bb e0b0      	LDI  R27,0
0001bc 940e 068c 	CALL _delay_ms
                 ; 0002 0039 
                 ; 0002 003A // Select next ADC input
                 ; 0002 003B if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
0001be 91a0 01a8 	LDS  R26,_input_index_S0020000000
0001c0 5faf      	SUBI R26,-LOW(1)
0001c1 93a0 01a8 	STS  _input_index_S0020000000,R26
0001c3 30a8      	CPI  R26,LOW(0x8)
0001c4 f018      	BRLO _0x40003
                 ; 0002 003C input_index = 0;
0001c5 e0e0      	LDI  R30,LOW(0)
0001c6 93e0 01a8 	STS  _input_index_S0020000000,R30
                 ; 0002 003D ADMUX = (FIRST_ADC_INPUT | ADC_VREF_TYPE) + input_index;
                 _0x40003:
0001c8 91e0 01a8 	LDS  R30,_input_index_S0020000000
0001ca b9e7      	OUT  0x7,R30
                 ; 0002 003E 
                 ; 0002 003F // Delay needed for the stabilization of the ADC input voltage
                 ; 0002 0040 delay_us(10);
                +
0001cb e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0001cc 958a     +DEC R24
0001cd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0002 0041 
                 ; 0002 0042 // Start the AD conversion
                 ; 0002 0043 ADCSRA |= (1 << ADSC);
0001ce 9a36      	SBI  0x6,6
                 ; 0002 0044 }
0001cf 91e9      	LD   R30,Y+
0001d0 bfef      	OUT  SREG,R30
0001d1 91f9      	LD   R31,Y+
0001d2 91e9      	LD   R30,Y+
0001d3 91b9      	LD   R27,Y+
0001d4 91a9      	LD   R26,Y+
0001d5 9199      	LD   R25,Y+
0001d6 9189      	LD   R24,Y+
0001d7 9179      	LD   R23,Y+
0001d8 9169      	LD   R22,Y+
0001d9 90f9      	LD   R15,Y+
0001da 9019      	LD   R1,Y+
0001db 9009      	LD   R0,Y+
0001dc 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0002 0047 {
                 _main:
                 ; .FSTART _main
                 ; 0002 0048 // Declare your local variables here
                 ; 0002 0049 
                 ; 0002 004A initBoard();
0001dd df9c      	RCALL _initBoard
                 ; 0002 004B while (1)
                 _0x40004:
                 ; 0002 004C { // Place your code here
                 ; 0002 004D 
                 ; 0002 004E }
0001de cfff      	RJMP _0x40004
                 ; 0002 004F }
                 _0x40007:
0001df cfff      	RJMP _0x40007
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0001e0 93ba      	ST   -Y,R27
0001e1 93aa      	ST   -Y,R26
0001e2 931a      	ST   -Y,R17
0001e3 930a      	ST   -Y,R16
0001e4 81aa      	LDD  R26,Y+2
0001e5 81bb      	LDD  R27,Y+2+1
0001e6 9612      	ADIW R26,2
0001e7 940e 04f1 	CALL __GETW1P
0001e9 9730      	SBIW R30,0
0001ea f159      	BREQ _0x2000010
0001eb 81aa      	LDD  R26,Y+2
0001ec 81bb      	LDD  R27,Y+2+1
0001ed 9614      	ADIW R26,4
0001ee 940e 04f1 	CALL __GETW1P
0001f0 018f      	MOVW R16,R30
0001f1 9730      	SBIW R30,0
0001f2 f061      	BREQ _0x2000012
                +
0001f3 3002     +CPI R16 , LOW ( 2 )
0001f4 e0e0     +LDI R30 , HIGH ( 2 )
0001f5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001f6 f098      	BRLO _0x2000013
0001f7 01f8      	MOVW R30,R16
0001f8 9731      	SBIW R30,1
0001f9 018f      	MOVW R16,R30
                +
0001fa 81aa     +LDD R26 , Y + 2
0001fb 81bb     +LDD R27 , Y + 2 + 1
0001fc 9614     +ADIW R26 , 4
0001fd 93ed     +ST X + , R30
0001fe 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0001ff 81aa      	LDD  R26,Y+2
000200 81bb      	LDD  R27,Y+2+1
000201 9612      	ADIW R26,2
000202 91ed      	LD   R30,X+
000203 91fd      	LD   R31,X+
000204 9631      	ADIW R30,1
000205 93fe      	ST   -X,R31
000206 93ee      	ST   -X,R30
000207 9731      	SBIW R30,1
000208 81ac      	LDD  R26,Y+4
000209 83a0      	STD  Z+0,R26
                 _0x2000013:
00020a 81aa      	LDD  R26,Y+2
00020b 81bb      	LDD  R27,Y+2+1
00020c 940e 04f1 	CALL __GETW1P
00020e 23ff      	TST  R31
00020f f02a      	BRMI _0x2000014
000210 91ed      	LD   R30,X+
000211 91fd      	LD   R31,X+
000212 9631      	ADIW R30,1
000213 93fe      	ST   -X,R31
000214 93ee      	ST   -X,R30
                 _0x2000014:
000215 c006      	RJMP _0x2000015
                 _0x2000010:
000216 81aa      	LDD  R26,Y+2
000217 81bb      	LDD  R27,Y+2+1
000218 efef      	LDI  R30,LOW(65535)
000219 efff      	LDI  R31,HIGH(65535)
00021a 93ed      	ST   X+,R30
00021b 93fc      	ST   X,R31
                 _0x2000015:
00021c 8119      	LDD  R17,Y+1
00021d 8108      	LDD  R16,Y+0
00021e 9625      	ADIW R28,5
00021f 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000220 93ba      	ST   -Y,R27
000221 93aa      	ST   -Y,R26
000222 9726      	SBIW R28,6
000223 940e 04b3 	CALL __SAVELOCR6
000225 e010      	LDI  R17,0
000226 85ac      	LDD  R26,Y+12
000227 85bd      	LDD  R27,Y+12+1
000228 e0e0      	LDI  R30,LOW(0)
000229 e0f0      	LDI  R31,HIGH(0)
00022a 93ed      	ST   X+,R30
00022b 93fc      	ST   X,R31
                 _0x2000016:
00022c 89ea      	LDD  R30,Y+18
00022d 89fb      	LDD  R31,Y+18+1
00022e 9631      	ADIW R30,1
00022f 8bea      	STD  Y+18,R30
000230 8bfb      	STD  Y+18+1,R31
000231 9731      	SBIW R30,1
000232 91e4      	LPM  R30,Z
000233 2f2e      	MOV  R18,R30
000234 30e0      	CPI  R30,0
000235 f409      	BRNE PC+2
000236 c11d      	RJMP _0x2000018
000237 2fe1      	MOV  R30,R17
000238 30e0      	CPI  R30,0
000239 f439      	BRNE _0x200001C
00023a 3225      	CPI  R18,37
00023b f411      	BRNE _0x200001D
00023c e011      	LDI  R17,LOW(1)
00023d c002      	RJMP _0x200001E
                 _0x200001D:
00023e 940e 0488 	CALL SUBOPT_0x8
                 _0x200001E:
000240 c112      	RJMP _0x200001B
                 _0x200001C:
000241 30e1      	CPI  R30,LOW(0x1)
000242 f4a9      	BRNE _0x200001F
000243 3225      	CPI  R18,37
000244 f419      	BRNE _0x2000020
000245 940e 0488 	CALL SUBOPT_0x8
000247 c10a      	RJMP _0x20000CC
                 _0x2000020:
000248 e012      	LDI  R17,LOW(2)
000249 e040      	LDI  R20,LOW(0)
00024a e000      	LDI  R16,LOW(0)
00024b 322d      	CPI  R18,45
00024c f411      	BRNE _0x2000021
00024d e001      	LDI  R16,LOW(1)
00024e c104      	RJMP _0x200001B
                 _0x2000021:
00024f 322b      	CPI  R18,43
000250 f411      	BRNE _0x2000022
000251 e24b      	LDI  R20,LOW(43)
000252 c100      	RJMP _0x200001B
                 _0x2000022:
000253 3220      	CPI  R18,32
000254 f411      	BRNE _0x2000023
000255 e240      	LDI  R20,LOW(32)
000256 c0fc      	RJMP _0x200001B
                 _0x2000023:
000257 c002      	RJMP _0x2000024
                 _0x200001F:
000258 30e2      	CPI  R30,LOW(0x2)
000259 f439      	BRNE _0x2000025
                 _0x2000024:
00025a e050      	LDI  R21,LOW(0)
00025b e013      	LDI  R17,LOW(3)
00025c 3320      	CPI  R18,48
00025d f411      	BRNE _0x2000026
00025e 6800      	ORI  R16,LOW(128)
00025f c0f3      	RJMP _0x200001B
                 _0x2000026:
000260 c003      	RJMP _0x2000027
                 _0x2000025:
000261 30e3      	CPI  R30,LOW(0x3)
000262 f009      	BREQ PC+2
000263 c0ef      	RJMP _0x200001B
                 _0x2000027:
000264 3320      	CPI  R18,48
000265 f010      	BRLO _0x200002A
000266 332a      	CPI  R18,58
000267 f008      	BRLO _0x200002B
                 _0x200002A:
000268 c007      	RJMP _0x2000029
                 _0x200002B:
000269 e0aa      	LDI  R26,LOW(10)
00026a 9f5a      	MUL  R21,R26
00026b 2d50      	MOV  R21,R0
00026c 2fe2      	MOV  R30,R18
00026d 53e0      	SUBI R30,LOW(48)
00026e 0f5e      	ADD  R21,R30
00026f c0e3      	RJMP _0x200001B
                 _0x2000029:
000270 2fe2      	MOV  R30,R18
000271 36e3      	CPI  R30,LOW(0x63)
000272 f449      	BRNE _0x200002F
000273 940e 048f 	CALL SUBOPT_0x9
000275 89e8      	LDD  R30,Y+16
000276 89f9      	LDD  R31,Y+16+1
000277 81a4      	LDD  R26,Z+4
000278 93aa      	ST   -Y,R26
000279 940e 0495 	CALL SUBOPT_0xA
00027b c0d6      	RJMP _0x2000030
                 _0x200002F:
00027c 37e3      	CPI  R30,LOW(0x73)
00027d f441      	BRNE _0x2000032
00027e 940e 048f 	CALL SUBOPT_0x9
000280 940e 049b 	CALL SUBOPT_0xB
000282 940e 0425 	CALL _strlen
000284 2f1e      	MOV  R17,R30
000285 c00a      	RJMP _0x2000033
                 _0x2000032:
000286 37e0      	CPI  R30,LOW(0x70)
000287 f461      	BRNE _0x2000035
000288 940e 048f 	CALL SUBOPT_0x9
00028a 940e 049b 	CALL SUBOPT_0xB
00028c 940e 0431 	CALL _strlenf
00028e 2f1e      	MOV  R17,R30
00028f 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000290 6002      	ORI  R16,LOW(2)
000291 770f      	ANDI R16,LOW(127)
000292 e030      	LDI  R19,LOW(0)
000293 c03c      	RJMP _0x2000036
                 _0x2000035:
000294 36e4      	CPI  R30,LOW(0x64)
000295 f011      	BREQ _0x2000039
000296 36e9      	CPI  R30,LOW(0x69)
000297 f411      	BRNE _0x200003A
                 _0x2000039:
000298 6004      	ORI  R16,LOW(4)
000299 c002      	RJMP _0x200003B
                 _0x200003A:
00029a 37e5      	CPI  R30,LOW(0x75)
00029b f431      	BRNE _0x200003C
                 _0x200003B:
00029c e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00029d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00029e 83ee      	STD  Y+6,R30
00029f 83ff      	STD  Y+6+1,R31
0002a0 e015      	LDI  R17,LOW(5)
0002a1 c00c      	RJMP _0x200003D
                 _0x200003C:
0002a2 35e8      	CPI  R30,LOW(0x58)
0002a3 f411      	BRNE _0x200003F
0002a4 6008      	ORI  R16,LOW(8)
0002a5 c003      	RJMP _0x2000040
                 _0x200003F:
0002a6 37e8      	CPI  R30,LOW(0x78)
0002a7 f009      	BREQ PC+2
0002a8 c0a9      	RJMP _0x2000071
                 _0x2000040:
0002a9 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0002aa e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0002ab 83ee      	STD  Y+6,R30
0002ac 83ff      	STD  Y+6+1,R31
0002ad e014      	LDI  R17,LOW(4)
                 _0x200003D:
0002ae ff02      	SBRS R16,2
0002af c017      	RJMP _0x2000042
0002b0 940e 048f 	CALL SUBOPT_0x9
0002b2 89a8      	LDD  R26,Y+16
0002b3 89b9      	LDD  R27,Y+16+1
0002b4 9614      	ADIW R26,4
0002b5 91ed      	LD   R30,X+
0002b6 91fd      	LD   R31,X+
0002b7 87ea      	STD  Y+10,R30
0002b8 87fb      	STD  Y+10+1,R31
0002b9 85ab      	LDD  R26,Y+11
0002ba 23aa      	TST  R26
0002bb f42a      	BRPL _0x2000043
0002bc 940e 04c5 	CALL __ANEGW1
0002be 87ea      	STD  Y+10,R30
0002bf 87fb      	STD  Y+10+1,R31
0002c0 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0002c1 3040      	CPI  R20,0
0002c2 f011      	BREQ _0x2000044
0002c3 5f1f      	SUBI R17,-LOW(1)
0002c4 c001      	RJMP _0x2000045
                 _0x2000044:
0002c5 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0002c6 c009      	RJMP _0x2000046
                 _0x2000042:
0002c7 940e 048f 	CALL SUBOPT_0x9
0002c9 89a8      	LDD  R26,Y+16
0002ca 89b9      	LDD  R27,Y+16+1
0002cb 9614      	ADIW R26,4
0002cc 940e 04f1 	CALL __GETW1P
0002ce 87ea      	STD  Y+10,R30
0002cf 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
0002d0 fd00      	SBRC R16,0
0002d1 c011      	RJMP _0x2000047
                 _0x2000048:
0002d2 1715      	CP   R17,R21
0002d3 f478      	BRSH _0x200004A
0002d4 ff07      	SBRS R16,7
0002d5 c008      	RJMP _0x200004B
0002d6 ff02      	SBRS R16,2
0002d7 c004      	RJMP _0x200004C
0002d8 7f0b      	ANDI R16,LOW(251)
0002d9 2f24      	MOV  R18,R20
0002da 5011      	SUBI R17,LOW(1)
0002db c001      	RJMP _0x200004D
                 _0x200004C:
0002dc e320      	LDI  R18,LOW(48)
                 _0x200004D:
0002dd c001      	RJMP _0x200004E
                 _0x200004B:
0002de e220      	LDI  R18,LOW(32)
                 _0x200004E:
0002df 940e 0488 	CALL SUBOPT_0x8
0002e1 5051      	SUBI R21,LOW(1)
0002e2 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0002e3 2f31      	MOV  R19,R17
0002e4 ff01      	SBRS R16,1
0002e5 c017      	RJMP _0x200004F
                 _0x2000050:
0002e6 3030      	CPI  R19,0
0002e7 f0a1      	BREQ _0x2000052
0002e8 ff03      	SBRS R16,3
0002e9 c006      	RJMP _0x2000053
0002ea 81ee      	LDD  R30,Y+6
0002eb 81ff      	LDD  R31,Y+6+1
0002ec 9125      	LPM  R18,Z+
0002ed 83ee      	STD  Y+6,R30
0002ee 83ff      	STD  Y+6+1,R31
0002ef c005      	RJMP _0x2000054
                 _0x2000053:
0002f0 81ae      	LDD  R26,Y+6
0002f1 81bf      	LDD  R27,Y+6+1
0002f2 912d      	LD   R18,X+
0002f3 83ae      	STD  Y+6,R26
0002f4 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0002f5 940e 0488 	CALL SUBOPT_0x8
0002f7 3050      	CPI  R21,0
0002f8 f009      	BREQ _0x2000055
0002f9 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0002fa 5031      	SUBI R19,LOW(1)
0002fb cfea      	RJMP _0x2000050
                 _0x2000052:
0002fc c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0002fd e320      	LDI  R18,LOW(48)
0002fe 81ee      	LDD  R30,Y+6
0002ff 81ff      	LDD  R31,Y+6+1
000300 940e 04f5 	CALL __GETW1PF
000302 87e8      	STD  Y+8,R30
000303 87f9      	STD  Y+8+1,R31
000304 81ee      	LDD  R30,Y+6
000305 81ff      	LDD  R31,Y+6+1
000306 9632      	ADIW R30,2
000307 83ee      	STD  Y+6,R30
000308 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000309 85e8      	LDD  R30,Y+8
00030a 85f9      	LDD  R31,Y+8+1
00030b 85aa      	LDD  R26,Y+10
00030c 85bb      	LDD  R27,Y+10+1
00030d 17ae      	CP   R26,R30
00030e 07bf      	CPC  R27,R31
00030f f050      	BRLO _0x200005C
000310 5f2f      	SUBI R18,-LOW(1)
000311 85a8      	LDD  R26,Y+8
000312 85b9      	LDD  R27,Y+8+1
000313 85ea      	LDD  R30,Y+10
000314 85fb      	LDD  R31,Y+10+1
000315 1bea      	SUB  R30,R26
000316 0bfb      	SBC  R31,R27
000317 87ea      	STD  Y+10,R30
000318 87fb      	STD  Y+10+1,R31
000319 cfef      	RJMP _0x200005A
                 _0x200005C:
00031a 332a      	CPI  R18,58
00031b f028      	BRLO _0x200005D
00031c ff03      	SBRS R16,3
00031d c002      	RJMP _0x200005E
00031e 5f29      	SUBI R18,-LOW(7)
00031f c001      	RJMP _0x200005F
                 _0x200005E:
000320 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000321 fd04      	SBRC R16,4
000322 c01a      	RJMP _0x2000061
000323 3321      	CPI  R18,49
000324 f420      	BRSH _0x2000063
000325 85a8      	LDD  R26,Y+8
000326 85b9      	LDD  R27,Y+8+1
000327 9711      	SBIW R26,1
000328 f409      	BRNE _0x2000062
                 _0x2000063:
000329 c009      	RJMP _0x20000CD
                 _0x2000062:
00032a 1753      	CP   R21,R19
00032b f010      	BRLO _0x2000067
00032c ff00      	SBRS R16,0
00032d c001      	RJMP _0x2000068
                 _0x2000067:
00032e c013      	RJMP _0x2000066
                 _0x2000068:
00032f e220      	LDI  R18,LOW(32)
000330 ff07      	SBRS R16,7
000331 c00b      	RJMP _0x2000069
000332 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000333 6100      	ORI  R16,LOW(16)
000334 ff02      	SBRS R16,2
000335 c007      	RJMP _0x200006A
000336 7f0b      	ANDI R16,LOW(251)
000337 934a      	ST   -Y,R20
000338 940e 0495 	CALL SUBOPT_0xA
00033a 3050      	CPI  R21,0
00033b f009      	BREQ _0x200006B
00033c 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00033d 940e 0488 	CALL SUBOPT_0x8
00033f 3050      	CPI  R21,0
000340 f009      	BREQ _0x200006C
000341 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000342 5031      	SUBI R19,LOW(1)
000343 85a8      	LDD  R26,Y+8
000344 85b9      	LDD  R27,Y+8+1
000345 9712      	SBIW R26,2
000346 f008      	BRLO _0x2000059
000347 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000348 ff00      	SBRS R16,0
000349 c008      	RJMP _0x200006D
                 _0x200006E:
00034a 3050      	CPI  R21,0
00034b f031      	BREQ _0x2000070
00034c 5051      	SUBI R21,LOW(1)
00034d e2e0      	LDI  R30,LOW(32)
00034e 93ea      	ST   -Y,R30
00034f 940e 0495 	CALL SUBOPT_0xA
000351 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000352 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000353 ced8      	RJMP _0x2000016
                 _0x2000018:
000354 85ac      	LDD  R26,Y+12
000355 85bd      	LDD  R27,Y+12+1
000356 91ed      	LD   R30,X+
000357 91fd      	LD   R31,X+
000358 940e 04ba 	CALL __LOADLOCR6
00035a 9664      	ADIW R28,20
00035b 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00035c 92ff      	PUSH R15
00035d 2ef8      	MOV  R15,R24
00035e 9726      	SBIW R28,6
00035f 940e 04b5 	CALL __SAVELOCR4
000361 01de      	MOVW R26,R28
000362 961c      	ADIW R26,12
000363 940e 04c1 	CALL __ADDW2R15
000365 940e 04f1 	CALL __GETW1P
000367 9730      	SBIW R30,0
000368 f419      	BRNE _0x2000072
000369 efef      	LDI  R30,LOW(65535)
00036a efff      	LDI  R31,HIGH(65535)
00036b c027      	RJMP _0x20C0002
                 _0x2000072:
00036c 01de      	MOVW R26,R28
00036d 9616      	ADIW R26,6
00036e 940e 04c1 	CALL __ADDW2R15
000370 018d      	MOVW R16,R26
000371 01de      	MOVW R26,R28
000372 961c      	ADIW R26,12
000373 940e 04c1 	CALL __ADDW2R15
000375 91ed      	LD   R30,X+
000376 91fd      	LD   R31,X+
000377 83ee      	STD  Y+6,R30
000378 83ff      	STD  Y+6+1,R31
000379 e0e0      	LDI  R30,LOW(0)
00037a 87e8      	STD  Y+8,R30
00037b 87e9      	STD  Y+8+1,R30
00037c 01de      	MOVW R26,R28
00037d 961a      	ADIW R26,10
00037e 940e 04c1 	CALL __ADDW2R15
000380 91ed      	LD   R30,X+
000381 91fd      	LD   R31,X+
000382 93fa      	ST   -Y,R31
000383 93ea      	ST   -Y,R30
000384 931a      	ST   -Y,R17
000385 930a      	ST   -Y,R16
000386 eee0      	LDI  R30,LOW(_put_buff_G100)
000387 e0f1      	LDI  R31,HIGH(_put_buff_G100)
000388 93fa      	ST   -Y,R31
000389 93ea      	ST   -Y,R30
00038a 01de      	MOVW R26,R28
00038b 961a      	ADIW R26,10
00038c de93      	RCALL __print_G100
00038d 019f      	MOVW R18,R30
00038e 81ae      	LDD  R26,Y+6
00038f 81bf      	LDD  R27,Y+6+1
000390 e0e0      	LDI  R30,LOW(0)
000391 93ec      	ST   X,R30
000392 01f9      	MOVW R30,R18
                 _0x20C0002:
000393 940e 04bc 	CALL __LOADLOCR4
000395 962a      	ADIW R28,10
000396 90ff      	POP  R15
000397 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
000398 93aa      	ST   -Y,R26
000399 b3e5      	IN   R30,0x15
00039a 70ef      	ANDI R30,LOW(0xF)
00039b 2fae      	MOV  R26,R30
00039c 81e8      	LD   R30,Y
00039d 7fe0      	ANDI R30,LOW(0xF0)
00039e 2bea      	OR   R30,R26
00039f bbe5      	OUT  0x15,R30
                +
0003a0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003a1 958a     +DEC R24
0003a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003a3 9aaa      	SBI  0x15,2
                +
0003a4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003a5 958a     +DEC R24
0003a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003a7 98aa      	CBI  0x15,2
                +
0003a8 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003a9 958a     +DEC R24
0003aa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003ab c077      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003ac 93aa      	ST   -Y,R26
0003ad 81a8      	LD   R26,Y
0003ae dfe9      	RCALL __lcd_write_nibble_G102
0003af 81e8          ld    r30,y
0003b0 95e2          swap  r30
0003b1 83e8          st    y,r30
0003b2 81a8      	LD   R26,Y
0003b3 dfe4      	RCALL __lcd_write_nibble_G102
                +
0003b4 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0003b5 958a     +DEC R24
0003b6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0003b7 c06b      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0003b8 93aa      	ST   -Y,R26
0003b9 81e8      	LD   R30,Y
0003ba e0f0      	LDI  R31,0
0003bb 55e7      	SUBI R30,LOW(-__base_y_G102)
0003bc 4ffe      	SBCI R31,HIGH(-__base_y_G102)
0003bd 81e0      	LD   R30,Z
0003be 81a9      	LDD  R26,Y+1
0003bf 0fae      	ADD  R26,R30
0003c0 dfeb      	RCALL __lcd_write_data
0003c1 8059      	LDD  R5,Y+1
0003c2 8048      	LDD  R4,Y+0
0003c3 9622      	ADIW R28,2
0003c4 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0003c5 e0a2      	LDI  R26,LOW(2)
0003c6 940e 04a5 	CALL SUBOPT_0xC
0003c8 e0ac      	LDI  R26,LOW(12)
0003c9 dfe2      	RCALL __lcd_write_data
0003ca e0a1      	LDI  R26,LOW(1)
0003cb 940e 04a5 	CALL SUBOPT_0xC
0003cd e0e0      	LDI  R30,LOW(0)
0003ce 2e4e      	MOV  R4,R30
0003cf 2e5e      	MOV  R5,R30
0003d0 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0003d1 93aa      	ST   -Y,R26
0003d2 81a8      	LD   R26,Y
0003d3 30aa      	CPI  R26,LOW(0xA)
0003d4 f011      	BREQ _0x2040005
0003d5 1457      	CP   R5,R7
0003d6 f048      	BRLO _0x2040004
                 _0x2040005:
0003d7 e0e0      	LDI  R30,LOW(0)
0003d8 93ea      	ST   -Y,R30
0003d9 9443      	INC  R4
0003da 2da4      	MOV  R26,R4
0003db dfdc      	RCALL _lcd_gotoxy
0003dc 81a8      	LD   R26,Y
0003dd 30aa      	CPI  R26,LOW(0xA)
0003de f409      	BRNE _0x2040007
0003df c043      	RJMP _0x20C0001
                 _0x2040007:
                 _0x2040004:
0003e0 9453      	INC  R5
0003e1 9aa8      	SBI  0x15,0
0003e2 81a8      	LD   R26,Y
0003e3 dfc8      	RCALL __lcd_write_data
0003e4 98a8      	CBI  0x15,0
0003e5 c03d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0003e6 93ba      	ST   -Y,R27
0003e7 93aa      	ST   -Y,R26
0003e8 931a      	ST   -Y,R17
                 _0x2040008:
0003e9 81a9      	LDD  R26,Y+1
0003ea 81ba      	LDD  R27,Y+1+1
0003eb 91ed      	LD   R30,X+
0003ec 83a9      	STD  Y+1,R26
0003ed 83ba      	STD  Y+1+1,R27
0003ee 2f1e      	MOV  R17,R30
0003ef 30e0      	CPI  R30,0
0003f0 f019      	BREQ _0x204000A
0003f1 2fa1      	MOV  R26,R17
0003f2 dfde      	RCALL _lcd_putchar
0003f3 cff5      	RJMP _0x2040008
                 _0x204000A:
0003f4 8118      	LDD  R17,Y+0
0003f5 9623      	ADIW R28,3
0003f6 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0003f7 93aa      	ST   -Y,R26
0003f8 b3e4      	IN   R30,0x14
0003f9 6fe0      	ORI  R30,LOW(0xF0)
0003fa bbe4      	OUT  0x14,R30
0003fb 9aa2      	SBI  0x14,2
0003fc 9aa0      	SBI  0x14,0
0003fd 9aa1      	SBI  0x14,1
0003fe 98aa      	CBI  0x15,2
0003ff 98a8      	CBI  0x15,0
000400 98a9      	CBI  0x15,1
000401 8078      	LDD  R7,Y+0
000402 81e8      	LD   R30,Y
000403 58e0      	SUBI R30,-LOW(128)
                +
000404 93e0 01ab+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000406 81e8      	LD   R30,Y
000407 54e0      	SUBI R30,-LOW(192)
                +
000408 93e0 01ac+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
00040a e1a4      	LDI  R26,LOW(20)
00040b e0b0      	LDI  R27,0
00040c 940e 068c 	CALL _delay_ms
00040e 940e 04ab 	CALL SUBOPT_0xD
000410 940e 04ab 	CALL SUBOPT_0xD
000412 940e 04ab 	CALL SUBOPT_0xD
000414 e2a0      	LDI  R26,LOW(32)
000415 df82      	RCALL __lcd_write_nibble_G102
                +
000416 ec88     +LDI R24 , LOW ( 200 )
000417 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000418 9701     +SBIW R24 , 1
000419 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00041a e2a8      	LDI  R26,LOW(40)
00041b df90      	RCALL __lcd_write_data
00041c e0a4      	LDI  R26,LOW(4)
00041d df8e      	RCALL __lcd_write_data
00041e e8a5      	LDI  R26,LOW(133)
00041f df8c      	RCALL __lcd_write_data
000420 e0a6      	LDI  R26,LOW(6)
000421 df8a      	RCALL __lcd_write_data
000422 dfa2      	RCALL _lcd_clear
                 _0x20C0001:
000423 9621      	ADIW R28,1
000424 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000425 93ba      	ST   -Y,R27
000426 93aa      	ST   -Y,R26
000427 91a9          ld   r26,y+
000428 91b9          ld   r27,y+
000429 27ee          clr  r30
00042a 27ff          clr  r31
                 strlen0:
00042b 916d          ld   r22,x+
00042c 2366          tst  r22
00042d f011          breq strlen1
00042e 9631          adiw r30,1
00042f cffb          rjmp strlen0
                 strlen1:
000430 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000431 93ba      	ST   -Y,R27
000432 93aa      	ST   -Y,R26
000433 27aa          clr  r26
000434 27bb          clr  r27
000435 91e9          ld   r30,y+
000436 91f9          ld   r31,y+
                 strlenf0:
000437 9005      	lpm  r0,z+
000438 2000          tst  r0
000439 f011          breq strlenf1
00043a 9611          adiw r26,1
00043b cffb          rjmp strlenf0
                 strlenf1:
00043c 01fd          movw r30,r26
00043d 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _adc_data:
000160           	.BYTE 0x10
                 _previous_data:
000170           	.BYTE 0x10
                 _firstUpdateDone:
000180           	.BYTE 0x8
                 _buff1:
000188           	.BYTE 0x10
                 _buff2:
000198           	.BYTE 0x10
                 _input_index_S0020000000:
0001a8           	.BYTE 0x1
                 __base_y_G102:
0001a9           	.BYTE 0x4
                 __seed_G105:
0001ad           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x0:
00043e e6a0      	LDI  R26,LOW(_adc_data)
00043f e0b1      	LDI  R27,HIGH(_adc_data)
000440 e0f0      	LDI  R31,0
000441 0fee      	LSL  R30
000442 1fff      	ROL  R31
000443 0fae      	ADD  R26,R30
000444 1fbf      	ADC  R27,R31
000445 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
000446 01df      	MOVW R26,R30
000447 01cb      	MOVW R24,R22
                +
000448 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000449 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
00044a e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
00044b e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
00044c 940e 0648 	CALL __DIVF21
                +
00044e e0a0     +LDI R26 , LOW ( 0x40A00000 )
00044f e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000450 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
000451 e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
000452 940e 05fa 	CALL __MULF12
                +
000454 e0a0     +LDI R26 , LOW ( 0x447A0000 )
000455 e0b0     +LDI R27 , HIGH ( 0x447A0000 )
000456 e78a     +LDI R24 , BYTE3 ( 0x447A0000 )
000457 e494     +LDI R25 , BYTE4 ( 0x447A0000 )
                 	__GETD2N 0x447A0000
000458 940e 05fa 	CALL __MULF12
00045a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00045b 018f      	MOVW R16,R30
00045c 940e 04d1 	CALL __CWD1
00045e 940e 0571 	CALL __CDF1
000460 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000461 27ff      	CLR  R31
000462 2766      	CLR  R22
000463 2777      	CLR  R23
000464 940e 04f9 	CALL __PUTPARD1
000466 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000467 940e 04d1 	CALL __CWD1
000469 940e 04f9 	CALL __PUTPARD1
00046b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00046c 81ee      	LDD  R30,Y+6
00046d e0f0      	LDI  R31,0
00046e 58e0      	SUBI R30,LOW(-_firstUpdateDone)
00046f 4ffe      	SBCI R31,HIGH(-_firstUpdateDone)
000470 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x6:
000471 900d      	LD   R0,X+
000472 901c      	LD   R1,X
000473 81ee      	LDD  R30,Y+6
000474 e7a0      	LDI  R26,LOW(_previous_data)
000475 e0b1      	LDI  R27,HIGH(_previous_data)
000476 e0f0      	LDI  R31,0
000477 0fee      	LSL  R30
000478 1fff      	ROL  R31
000479 0fae      	ADD  R26,R30
00047a 1fbf      	ADC  R27,R31
00047b 91ed      	LD   R30,X+
00047c 91fd      	LD   R31,X+
00047d 01d0      	MOVW R26,R0
00047e 1bae      	SUB  R26,R30
00047f 0bbf      	SBC  R27,R31
000480 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000481 81ee      	LDD  R30,Y+6
000482 e7a0      	LDI  R26,LOW(_previous_data)
000483 e0b1      	LDI  R27,HIGH(_previous_data)
000484 e0f0      	LDI  R31,0
000485 0fee      	LSL  R30
000486 1fff      	ROL  R31
000487 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
000488 932a      	ST   -Y,R18
000489 85ad      	LDD  R26,Y+13
00048a 85be      	LDD  R27,Y+13+1
00048b 85ef      	LDD  R30,Y+15
00048c 89f8      	LDD  R31,Y+15+1
00048d 9509      	ICALL
00048e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x9:
00048f 89e8      	LDD  R30,Y+16
000490 89f9      	LDD  R31,Y+16+1
000491 9734      	SBIW R30,4
000492 8be8      	STD  Y+16,R30
000493 8bf9      	STD  Y+16+1,R31
000494 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000495 85ad      	LDD  R26,Y+13
000496 85be      	LDD  R27,Y+13+1
000497 85ef      	LDD  R30,Y+15
000498 89f8      	LDD  R31,Y+15+1
000499 9509      	ICALL
00049a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xB:
00049b 89a8      	LDD  R26,Y+16
00049c 89b9      	LDD  R27,Y+16+1
00049d 9614      	ADIW R26,4
00049e 91ed      	LD   R30,X+
00049f 91fd      	LD   R31,X+
0004a0 83ee      	STD  Y+6,R30
0004a1 83ff      	STD  Y+6+1,R31
0004a2 81ae      	LDD  R26,Y+6
0004a3 81bf      	LDD  R27,Y+6+1
0004a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0004a5 940e 03ac 	CALL __lcd_write_data
0004a7 e0a3      	LDI  R26,LOW(3)
0004a8 e0b0      	LDI  R27,0
0004a9 940c 068c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0004ab e3a0      	LDI  R26,LOW(48)
0004ac 940e 0398 	CALL __lcd_write_nibble_G102
                +
0004ae ec88     +LDI R24 , LOW ( 200 )
0004af e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004b0 9701     +SBIW R24 , 1
0004b1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004b2 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0004b3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0004b4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0004b5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0004b6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0004b7 931a      	ST   -Y,R17
0004b8 930a      	ST   -Y,R16
0004b9 9508      	RET
                 
                 __LOADLOCR6:
0004ba 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004bb 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004bc 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004bd 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004be 8119      	LDD  R17,Y+1
0004bf 8108      	LD   R16,Y
0004c0 9508      	RET
                 
                 __ADDW2R15:
0004c1 2400      	CLR  R0
0004c2 0daf      	ADD  R26,R15
0004c3 1db0      	ADC  R27,R0
0004c4 9508      	RET
                 
                 __ANEGW1:
0004c5 95f1      	NEG  R31
0004c6 95e1      	NEG  R30
0004c7 40f0      	SBCI R31,0
0004c8 9508      	RET
                 
                 __ANEGD1:
0004c9 95f0      	COM  R31
0004ca 9560      	COM  R22
0004cb 9570      	COM  R23
0004cc 95e1      	NEG  R30
0004cd 4fff      	SBCI R31,-1
0004ce 4f6f      	SBCI R22,-1
0004cf 4f7f      	SBCI R23,-1
0004d0 9508      	RET
                 
                 __CWD1:
0004d1 2f6f      	MOV  R22,R31
0004d2 0f66      	ADD  R22,R22
0004d3 0b66      	SBC  R22,R22
0004d4 2f76      	MOV  R23,R22
0004d5 9508      	RET
                 
                 __MULW12U:
0004d6 9ffa      	MUL  R31,R26
0004d7 2df0      	MOV  R31,R0
0004d8 9feb      	MUL  R30,R27
0004d9 0df0      	ADD  R31,R0
0004da 9fea      	MUL  R30,R26
0004db 2de0      	MOV  R30,R0
0004dc 0df1      	ADD  R31,R1
0004dd 9508      	RET
                 
                 __MULW12:
0004de d004      	RCALL __CHKSIGNW
0004df dff6      	RCALL __MULW12U
0004e0 f40e      	BRTC __MULW121
0004e1 dfe3      	RCALL __ANEGW1
                 __MULW121:
0004e2 9508      	RET
                 
                 __CHKSIGNW:
0004e3 94e8      	CLT
0004e4 fff7      	SBRS R31,7
0004e5 c002      	RJMP __CHKSW1
0004e6 dfde      	RCALL __ANEGW1
0004e7 9468      	SET
                 __CHKSW1:
0004e8 ffb7      	SBRS R27,7
0004e9 c006      	RJMP __CHKSW2
0004ea 95b1      	NEG  R27
0004eb 95a1      	NEG  R26
0004ec 40b0      	SBCI R27,0
0004ed f800      	BLD  R0,0
0004ee 9403      	INC  R0
0004ef fa00      	BST  R0,0
                 __CHKSW2:
0004f0 9508      	RET
                 
                 __GETW1P:
0004f1 91ed      	LD   R30,X+
0004f2 91fc      	LD   R31,X
0004f3 9711      	SBIW R26,1
0004f4 9508      	RET
                 
                 __GETW1PF:
0004f5 9005      	LPM  R0,Z+
0004f6 91f4      	LPM  R31,Z
0004f7 2de0      	MOV  R30,R0
0004f8 9508      	RET
                 
                 __PUTPARD1:
0004f9 937a      	ST   -Y,R23
0004fa 936a      	ST   -Y,R22
0004fb 93fa      	ST   -Y,R31
0004fc 93ea      	ST   -Y,R30
0004fd 9508      	RET
                 
                 __SWAPD12:
0004fe 2e18      	MOV  R1,R24
0004ff 2f86      	MOV  R24,R22
000500 2d61      	MOV  R22,R1
000501 2e19      	MOV  R1,R25
000502 2f97      	MOV  R25,R23
000503 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000504 2e1b      	MOV  R1,R27
000505 2fbf      	MOV  R27,R31
000506 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000507 2e1a      	MOV  R1,R26
000508 2fae      	MOV  R26,R30
000509 2de1      	MOV  R30,R1
00050a 9508      	RET
                 
                 __ROUND_REPACK:
00050b 2355      	TST  R21
00050c f442      	BRPL __REPACK
00050d 3850      	CPI  R21,0x80
00050e f411      	BRNE __ROUND_REPACK0
00050f ffe0      	SBRS R30,0
000510 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000511 9631      	ADIW R30,1
000512 1f69      	ADC  R22,R25
000513 1f79      	ADC  R23,R25
000514 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000515 e850      	LDI  R21,0x80
000516 2757      	EOR  R21,R23
000517 f411      	BRNE __REPACK0
000518 935f      	PUSH R21
000519 c0cf      	RJMP __ZERORES
                 __REPACK0:
00051a 3f5f      	CPI  R21,0xFF
00051b f031      	BREQ __REPACK1
00051c 0f66      	LSL  R22
00051d 0c00      	LSL  R0
00051e 9557      	ROR  R21
00051f 9567      	ROR  R22
000520 2f75      	MOV  R23,R21
000521 9508      	RET
                 __REPACK1:
000522 935f      	PUSH R21
000523 2000      	TST  R0
000524 f00a      	BRMI __REPACK2
000525 c0ce      	RJMP __MAXRES
                 __REPACK2:
000526 c0c7      	RJMP __MINRES
                 
                 __UNPACK:
000527 e850      	LDI  R21,0x80
000528 2e19      	MOV  R1,R25
000529 2215      	AND  R1,R21
00052a 0f88      	LSL  R24
00052b 1f99      	ROL  R25
00052c 2795      	EOR  R25,R21
00052d 0f55      	LSL  R21
00052e 9587      	ROR  R24
                 
                 __UNPACK1:
00052f e850      	LDI  R21,0x80
000530 2e07      	MOV  R0,R23
000531 2205      	AND  R0,R21
000532 0f66      	LSL  R22
000533 1f77      	ROL  R23
000534 2775      	EOR  R23,R21
000535 0f55      	LSL  R21
000536 9567      	ROR  R22
000537 9508      	RET
                 
                 __CFD1U:
000538 9468      	SET
000539 c001      	RJMP __CFD1U0
                 __CFD1:
00053a 94e8      	CLT
                 __CFD1U0:
00053b 935f      	PUSH R21
00053c dff2      	RCALL __UNPACK1
00053d 3870      	CPI  R23,0x80
00053e f018      	BRLO __CFD10
00053f 3f7f      	CPI  R23,0xFF
000540 f408      	BRCC __CFD10
000541 c0a7      	RJMP __ZERORES
                 __CFD10:
000542 e156      	LDI  R21,22
000543 1b57      	SUB  R21,R23
000544 f4aa      	BRPL __CFD11
000545 9551      	NEG  R21
000546 3058      	CPI  R21,8
000547 f40e      	BRTC __CFD19
000548 3059      	CPI  R21,9
                 __CFD19:
000549 f030      	BRLO __CFD17
00054a efef      	SER  R30
00054b efff      	SER  R31
00054c ef6f      	SER  R22
00054d e77f      	LDI  R23,0x7F
00054e f977      	BLD  R23,7
00054f c01a      	RJMP __CFD15
                 __CFD17:
000550 2777      	CLR  R23
000551 2355      	TST  R21
000552 f0b9      	BREQ __CFD15
                 __CFD18:
000553 0fee      	LSL  R30
000554 1fff      	ROL  R31
000555 1f66      	ROL  R22
000556 1f77      	ROL  R23
000557 955a      	DEC  R21
000558 f7d1      	BRNE __CFD18
000559 c010      	RJMP __CFD15
                 __CFD11:
00055a 2777      	CLR  R23
                 __CFD12:
00055b 3058      	CPI  R21,8
00055c f028      	BRLO __CFD13
00055d 2fef      	MOV  R30,R31
00055e 2ff6      	MOV  R31,R22
00055f 2f67      	MOV  R22,R23
000560 5058      	SUBI R21,8
000561 cff9      	RJMP __CFD12
                 __CFD13:
000562 2355      	TST  R21
000563 f031      	BREQ __CFD15
                 __CFD14:
000564 9576      	LSR  R23
000565 9567      	ROR  R22
000566 95f7      	ROR  R31
000567 95e7      	ROR  R30
000568 955a      	DEC  R21
000569 f7d1      	BRNE __CFD14
                 __CFD15:
00056a 2000      	TST  R0
00056b f40a      	BRPL __CFD16
00056c df5c      	RCALL __ANEGD1
                 __CFD16:
00056d 915f      	POP  R21
00056e 9508      	RET
                 
                 __CDF1U:
00056f 9468      	SET
000570 c001      	RJMP __CDF1U0
                 __CDF1:
000571 94e8      	CLT
                 __CDF1U0:
000572 9730      	SBIW R30,0
000573 4060      	SBCI R22,0
000574 4070      	SBCI R23,0
000575 f0b1      	BREQ __CDF10
000576 2400      	CLR  R0
000577 f026      	BRTS __CDF11
000578 2377      	TST  R23
000579 f412      	BRPL __CDF11
00057a 9400      	COM  R0
00057b df4d      	RCALL __ANEGD1
                 __CDF11:
00057c 2e17      	MOV  R1,R23
00057d e17e      	LDI  R23,30
00057e 2011      	TST  R1
                 __CDF12:
00057f f032      	BRMI __CDF13
000580 957a      	DEC  R23
000581 0fee      	LSL  R30
000582 1fff      	ROL  R31
000583 1f66      	ROL  R22
000584 1c11      	ROL  R1
000585 cff9      	RJMP __CDF12
                 __CDF13:
000586 2fef      	MOV  R30,R31
000587 2ff6      	MOV  R31,R22
000588 2d61      	MOV  R22,R1
000589 935f      	PUSH R21
00058a df8a      	RCALL __REPACK
00058b 915f      	POP  R21
                 __CDF10:
00058c 9508      	RET
                 
                 __SWAPACC:
00058d 934f      	PUSH R20
00058e 01af      	MOVW R20,R30
00058f 01fd      	MOVW R30,R26
000590 01da      	MOVW R26,R20
000591 01ab      	MOVW R20,R22
000592 01bc      	MOVW R22,R24
000593 01ca      	MOVW R24,R20
000594 2d40      	MOV  R20,R0
000595 2c01      	MOV  R0,R1
000596 2e14      	MOV  R1,R20
000597 914f      	POP  R20
000598 9508      	RET
                 
                 __UADD12:
000599 0fea      	ADD  R30,R26
00059a 1ffb      	ADC  R31,R27
00059b 1f68      	ADC  R22,R24
00059c 9508      	RET
                 
                 __NEGMAN1:
00059d 95e0      	COM  R30
00059e 95f0      	COM  R31
00059f 9560      	COM  R22
0005a0 5fef      	SUBI R30,-1
0005a1 4fff      	SBCI R31,-1
0005a2 4f6f      	SBCI R22,-1
0005a3 9508      	RET
                 
                 __SUBF12:
0005a4 935f      	PUSH R21
0005a5 df81      	RCALL __UNPACK
0005a6 3890      	CPI  R25,0x80
0005a7 f171      	BREQ __ADDF129
0005a8 e850      	LDI  R21,0x80
0005a9 2615      	EOR  R1,R21
                 
0005aa c004      	RJMP __ADDF120
                 
                 __ADDF12:
0005ab 935f      	PUSH R21
0005ac df7a      	RCALL __UNPACK
0005ad 3890      	CPI  R25,0x80
0005ae f139      	BREQ __ADDF129
                 
                 __ADDF120:
0005af 3870      	CPI  R23,0x80
0005b0 f121      	BREQ __ADDF128
                 __ADDF121:
0005b1 2f57      	MOV  R21,R23
0005b2 1b59      	SUB  R21,R25
0005b3 f12b      	BRVS __ADDF1211
0005b4 f412      	BRPL __ADDF122
0005b5 dfd7      	RCALL __SWAPACC
0005b6 cffa      	RJMP __ADDF121
                 __ADDF122:
0005b7 3158      	CPI  R21,24
0005b8 f018      	BRLO __ADDF123
0005b9 27aa      	CLR  R26
0005ba 27bb      	CLR  R27
0005bb 2788      	CLR  R24
                 __ADDF123:
0005bc 3058      	CPI  R21,8
0005bd f028      	BRLO __ADDF124
0005be 2fab      	MOV  R26,R27
0005bf 2fb8      	MOV  R27,R24
0005c0 2788      	CLR  R24
0005c1 5058      	SUBI R21,8
0005c2 cff9      	RJMP __ADDF123
                 __ADDF124:
0005c3 2355      	TST  R21
0005c4 f029      	BREQ __ADDF126
                 __ADDF125:
0005c5 9586      	LSR  R24
0005c6 95b7      	ROR  R27
0005c7 95a7      	ROR  R26
0005c8 955a      	DEC  R21
0005c9 f7d9      	BRNE __ADDF125
                 __ADDF126:
0005ca 2d50      	MOV  R21,R0
0005cb 2551      	EOR  R21,R1
0005cc f072      	BRMI __ADDF127
0005cd dfcb      	RCALL __UADD12
0005ce f438      	BRCC __ADDF129
0005cf 9567      	ROR  R22
0005d0 95f7      	ROR  R31
0005d1 95e7      	ROR  R30
0005d2 9573      	INC  R23
0005d3 f413      	BRVC __ADDF129
0005d4 c01f      	RJMP __MAXRES
                 __ADDF128:
0005d5 dfb7      	RCALL __SWAPACC
                 __ADDF129:
0005d6 df3e      	RCALL __REPACK
0005d7 915f      	POP  R21
0005d8 9508      	RET
                 __ADDF1211:
0005d9 f7d8      	BRCC __ADDF128
0005da cffb      	RJMP __ADDF129
                 __ADDF127:
0005db 1bea      	SUB  R30,R26
0005dc 0bfb      	SBC  R31,R27
0005dd 0b68      	SBC  R22,R24
0005de f051      	BREQ __ZERORES
0005df f410      	BRCC __ADDF1210
0005e0 9400      	COM  R0
0005e1 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
0005e2 2366      	TST  R22
0005e3 f392      	BRMI __ADDF129
0005e4 0fee      	LSL  R30
0005e5 1fff      	ROL  R31
0005e6 1f66      	ROL  R22
0005e7 957a      	DEC  R23
0005e8 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
0005e9 27ee      	CLR  R30
0005ea 27ff      	CLR  R31
0005eb 01bf      	MOVW R22,R30
0005ec 915f      	POP  R21
0005ed 9508      	RET
                 
                 __MINRES:
0005ee efef      	SER  R30
0005ef efff      	SER  R31
0005f0 e76f      	LDI  R22,0x7F
0005f1 ef7f      	SER  R23
0005f2 915f      	POP  R21
0005f3 9508      	RET
                 
                 __MAXRES:
0005f4 efef      	SER  R30
0005f5 efff      	SER  R31
0005f6 e76f      	LDI  R22,0x7F
0005f7 e77f      	LDI  R23,0x7F
0005f8 915f      	POP  R21
0005f9 9508      	RET
                 
                 __MULF12:
0005fa 935f      	PUSH R21
0005fb df2b      	RCALL __UNPACK
0005fc 3870      	CPI  R23,0x80
0005fd f359      	BREQ __ZERORES
0005fe 3890      	CPI  R25,0x80
0005ff f349      	BREQ __ZERORES
000600 2401      	EOR  R0,R1
000601 9408      	SEC
000602 1f79      	ADC  R23,R25
000603 f423      	BRVC __MULF124
000604 f324      	BRLT __ZERORES
                 __MULF125:
000605 2000      	TST  R0
000606 f33a      	BRMI __MINRES
000607 cfec      	RJMP __MAXRES
                 __MULF124:
000608 920f      	PUSH R0
000609 931f      	PUSH R17
00060a 932f      	PUSH R18
00060b 933f      	PUSH R19
00060c 934f      	PUSH R20
00060d 2711      	CLR  R17
00060e 2722      	CLR  R18
00060f 2799      	CLR  R25
000610 9f68      	MUL  R22,R24
000611 01a0      	MOVW R20,R0
000612 9f8f      	MUL  R24,R31
000613 2d30      	MOV  R19,R0
000614 0d41      	ADD  R20,R1
000615 1f59      	ADC  R21,R25
000616 9f6b      	MUL  R22,R27
000617 0d30      	ADD  R19,R0
000618 1d41      	ADC  R20,R1
000619 1f59      	ADC  R21,R25
00061a 9f8e      	MUL  R24,R30
00061b d027      	RCALL __MULF126
00061c 9fbf      	MUL  R27,R31
00061d d025      	RCALL __MULF126
00061e 9f6a      	MUL  R22,R26
00061f d023      	RCALL __MULF126
000620 9fbe      	MUL  R27,R30
000621 d01d      	RCALL __MULF127
000622 9faf      	MUL  R26,R31
000623 d01b      	RCALL __MULF127
000624 9fae      	MUL  R26,R30
000625 0d11      	ADD  R17,R1
000626 1f29      	ADC  R18,R25
000627 1f39      	ADC  R19,R25
000628 1f49      	ADC  R20,R25
000629 1f59      	ADC  R21,R25
00062a 2fe3      	MOV  R30,R19
00062b 2ff4      	MOV  R31,R20
00062c 2f65      	MOV  R22,R21
00062d 2f52      	MOV  R21,R18
00062e 914f      	POP  R20
00062f 913f      	POP  R19
000630 912f      	POP  R18
000631 911f      	POP  R17
000632 900f      	POP  R0
000633 2366      	TST  R22
000634 f02a      	BRMI __MULF122
000635 0f55      	LSL  R21
000636 1fee      	ROL  R30
000637 1fff      	ROL  R31
000638 1f66      	ROL  R22
000639 c002      	RJMP __MULF123
                 __MULF122:
00063a 9573      	INC  R23
00063b f24b      	BRVS __MULF125
                 __MULF123:
00063c dece      	RCALL __ROUND_REPACK
00063d 915f      	POP  R21
00063e 9508      	RET
                 
                 __MULF127:
00063f 0d10      	ADD  R17,R0
000640 1d21      	ADC  R18,R1
000641 1f39      	ADC  R19,R25
000642 c002      	RJMP __MULF128
                 __MULF126:
000643 0d20      	ADD  R18,R0
000644 1d31      	ADC  R19,R1
                 __MULF128:
000645 1f49      	ADC  R20,R25
000646 1f59      	ADC  R21,R25
000647 9508      	RET
                 
                 __DIVF21:
000648 935f      	PUSH R21
000649 dedd      	RCALL __UNPACK
00064a 3870      	CPI  R23,0x80
00064b f421      	BRNE __DIVF210
00064c 2011      	TST  R1
                 __DIVF211:
00064d f40a      	BRPL __DIVF219
00064e cf9f      	RJMP __MINRES
                 __DIVF219:
00064f cfa4      	RJMP __MAXRES
                 __DIVF210:
000650 3890      	CPI  R25,0x80
000651 f409      	BRNE __DIVF218
                 __DIVF217:
000652 cf96      	RJMP __ZERORES
                 __DIVF218:
000653 2401      	EOR  R0,R1
000654 9408      	SEC
000655 0b97      	SBC  R25,R23
000656 f41b      	BRVC __DIVF216
000657 f3d4      	BRLT __DIVF217
000658 2000      	TST  R0
000659 cff3      	RJMP __DIVF211
                 __DIVF216:
00065a 2f79      	MOV  R23,R25
00065b 931f      	PUSH R17
00065c 932f      	PUSH R18
00065d 933f      	PUSH R19
00065e 934f      	PUSH R20
00065f 2411      	CLR  R1
000660 2711      	CLR  R17
000661 2722      	CLR  R18
000662 2733      	CLR  R19
000663 01a9      	MOVW R20,R18
000664 e290      	LDI  R25,32
                 __DIVF212:
000665 17ae      	CP   R26,R30
000666 07bf      	CPC  R27,R31
000667 0786      	CPC  R24,R22
000668 0741      	CPC  R20,R17
000669 f030      	BRLO __DIVF213
00066a 1bae      	SUB  R26,R30
00066b 0bbf      	SBC  R27,R31
00066c 0b86      	SBC  R24,R22
00066d 0b41      	SBC  R20,R17
00066e 9408      	SEC
00066f c001      	RJMP __DIVF214
                 __DIVF213:
000670 9488      	CLC
                 __DIVF214:
000671 1f55      	ROL  R21
000672 1f22      	ROL  R18
000673 1f33      	ROL  R19
000674 1c11      	ROL  R1
000675 1faa      	ROL  R26
000676 1fbb      	ROL  R27
000677 1f88      	ROL  R24
000678 1f44      	ROL  R20
000679 959a      	DEC  R25
00067a f751      	BRNE __DIVF212
00067b 01f9      	MOVW R30,R18
00067c 2d61      	MOV  R22,R1
00067d 914f      	POP  R20
00067e 913f      	POP  R19
00067f 912f      	POP  R18
000680 911f      	POP  R17
000681 2366      	TST  R22
000682 f032      	BRMI __DIVF215
000683 0f55      	LSL  R21
000684 1fee      	ROL  R30
000685 1fff      	ROL  R31
000686 1f66      	ROL  R22
000687 957a      	DEC  R23
000688 f24b      	BRVS __DIVF217
                 __DIVF215:
000689 de81      	RCALL __ROUND_REPACK
00068a 915f      	POP  R21
00068b 9508      	RET
                 
                 _delay_ms:
00068c 9610      	adiw r26,0
00068d f039      	breq __delay_ms1
                 __delay_ms0:
00068e 95a8      	wdr
                +
00068f ed80     +LDI R24 , LOW ( 0x7D0 )
000690 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000691 9701     +SBIW R24 , 1
000692 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000693 9711      	sbiw r26,1
000694 f7c9      	brne __delay_ms0
                 __delay_ms1:
000695 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  53 r1 :  35 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  41 r17:  37 r18:  50 r19:  21 r20:  31 r21:  81 r22:  61 r23:  47 
r24:  54 r25:  40 r26: 162 r27:  78 r28:  19 r29:   1 r30: 284 r31: 132 
x  :  49 y  : 221 z  :  18 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  23 add   :  17 
adiw  :  30 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  28 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   2 brmi  :   8 brne  :  41 brpl  :   7 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   1 call  : 103 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  30 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   8 
cp    :   7 cpc   :   7 cpi   :  52 cpse  :   0 dec   :  13 des   :   0 
eor   :   7 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   5 jmp   :  23 ld    :  63 ldd   :  91 ldi   : 167 
lds   :   7 lpm   :  14 lsl   :  15 lsr   :   2 mov   :  59 movw  :  44 
mul   :  13 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   1 
ori   :   7 out   :  26 pop   :  19 push  :  19 rcall :  42 ret   :  57 
reti  :   1 rjmp  :  89 rol   :  28 ror   :  12 sbc   :  10 sbci  :  11 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :  23 sbr   :   0 sbrc  :   2 
sbrs  :  13 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  84 std   :  38 sts   :   4 sub   :   7 subi  :  21 swap  :   1 
tst   :  18 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d2c   3292     80   3372   16384  20.6%
[.dseg] 0x000060 0x0001b1      0     81     81    1024   7.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
