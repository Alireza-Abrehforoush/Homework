
AVRASM ver. 2.1.30  C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\2\2_Alireza_Abrehforoush\codevision\Debug\List\a.asm Tue Apr 04 14:53:20 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x20003:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
00002f 000a      	.DW  0x0A
000030 0160      	.DW  _digits
000031 0054      	.DW  _0x20003*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000046 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000047 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000048 9185      	LPM  R24,Z+
000049 9195      	LPM  R25,Z+
00004a 9700      	SBIW R24,0
00004b f061      	BREQ __GLOBAL_INI_END
00004c 91a5      	LPM  R26,Z+
00004d 91b5      	LPM  R27,Z+
00004e 9005      	LPM  R0,Z+
00004f 9015      	LPM  R1,Z+
000050 01bf      	MOVW R22,R30
000051 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000052 9005      	LPM  R0,Z+
000053 920d      	ST   X+,R0
000054 9701      	SBIW R24,1
000055 f7e1      	BRNE __GLOBAL_INI_LOOP
000056 01fb      	MOVW R30,R22
000057 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000058 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000059 bfed      	OUT  SPL,R30
00005a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005e 940c 0060 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void main(void)
                 ; 0000 000A {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 000B while (1)
                 _0x3:
                 ; 0000 000C {
                 ; 0000 000D // Please write your application code here
                 ; 0000 000E part3(4, 500);
000060 e0e4      	LDI  R30,LOW(4)
000061 e0f0      	LDI  R31,HIGH(4)
000062 93fa      	ST   -Y,R31
000063 93ea      	ST   -Y,R30
000064 efa4      	LDI  R26,LOW(500)
000065 e0b1      	LDI  R27,HIGH(500)
000066 d064      	RCALL _part3
                 ; 0000 000F delay_ms(1000);
000067 eea8      	LDI  R26,LOW(1000)
000068 e0b3      	LDI  R27,HIGH(1000)
000069 940e 017f 	CALL _delay_ms
                 ; 0000 0010 part4();
00006b d072      	RCALL _part4
                 ; 0000 0011 delay_ms(1000);
00006c eea8      	LDI  R26,LOW(1000)
00006d e0b3      	LDI  R27,HIGH(1000)
00006e 940e 017f 	CALL _delay_ms
                 ; 0000 0012 part5(6789, port_C, port_D);
000070 e8e5      	LDI  R30,LOW(6789)
000071 e1fa      	LDI  R31,HIGH(6789)
000072 93fa      	ST   -Y,R31
000073 93ea      	ST   -Y,R30
000074 e0e3      	LDI  R30,LOW(3)
000075 93ea      	ST   -Y,R30
000076 e0a4      	LDI  R26,LOW(4)
000077 d06f      	RCALL _part5
                 ; 0000 0013 }
000078 cfe7      	RJMP _0x3
                 ; 0000 0014 }
                 _0x6:
000079 cfff      	RJMP _0x6
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;char digits[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 
                 	.DSEG
                 ;char part1(char port_in)
                 ; 0001 0006 {
                 
                 	.CSEG
                 _part1:
                 ; .FSTART _part1
                 ; 0001 0007 char data_in;
                 ; 0001 0008 switch(port_in)
00007a 931a      	ST   -Y,R17
00007b 930a      	ST   -Y,R16
00007c 2f0a      	MOV  R16,R26
                 ;	port_in -> R16
                 ;	data_in -> R17
00007d 2fe0      	MOV  R30,R16
00007e e0f0      	LDI  R31,0
                 ; 0001 0009 {
                 ; 0001 000A case port_A:
00007f 30e1      	CPI  R30,LOW(0x1)
000080 e0a0      	LDI  R26,HIGH(0x1)
000081 07fa      	CPC  R31,R26
000082 f421      	BRNE _0x20007
                 ; 0001 000B DDRA = 0x00; // as input
000083 e0e0      	LDI  R30,LOW(0)
000084 bbea      	OUT  0x1A,R30
                 ; 0001 000C data_in = PINA;
000085 b319      	IN   R17,25
                 ; 0001 000D break;
000086 c017      	RJMP _0x20006
                 ; 0001 000E case port_B:
                 _0x20007:
000087 30e2      	CPI  R30,LOW(0x2)
000088 e0a0      	LDI  R26,HIGH(0x2)
000089 07fa      	CPC  R31,R26
00008a f421      	BRNE _0x20008
                 ; 0001 000F DDRB = 0x00; // as input
00008b e0e0      	LDI  R30,LOW(0)
00008c bbe7      	OUT  0x17,R30
                 ; 0001 0010 data_in = PINB;
00008d b316      	IN   R17,22
                 ; 0001 0011 break;
00008e c00f      	RJMP _0x20006
                 ; 0001 0012 case port_C:
                 _0x20008:
00008f 30e3      	CPI  R30,LOW(0x3)
000090 e0a0      	LDI  R26,HIGH(0x3)
000091 07fa      	CPC  R31,R26
000092 f421      	BRNE _0x20009
                 ; 0001 0013 DDRC = 0x00; // as input
000093 e0e0      	LDI  R30,LOW(0)
000094 bbe4      	OUT  0x14,R30
                 ; 0001 0014 data_in = PINC;
000095 b313      	IN   R17,19
                 ; 0001 0015 break;
000096 c007      	RJMP _0x20006
                 ; 0001 0016 case port_D:
                 _0x20009:
000097 30e4      	CPI  R30,LOW(0x4)
000098 e0a0      	LDI  R26,HIGH(0x4)
000099 07fa      	CPC  R31,R26
00009a f419      	BRNE _0x20006
                 ; 0001 0017 DDRD = 0x00; // as input
00009b e0e0      	LDI  R30,LOW(0)
00009c bbe1      	OUT  0x11,R30
                 ; 0001 0018 data_in = PIND;
00009d b310      	IN   R17,16
                 ; 0001 0019 break;
                 ; 0001 001A }
                 _0x20006:
                 ; 0001 001B return data_in;
00009e 2fe1      	MOV  R30,R17
00009f 9109      	LD   R16,Y+
0000a0 9119      	LD   R17,Y+
0000a1 9508      	RET
                 ; 0001 001C }
                 ; .FEND
                 ;void part2(char data_in, char port_out)
                 ; 0001 001F {
                 _part2:
                 ; .FSTART _part2
                 ; 0001 0020 switch(port_out)
0000a2 931a      	ST   -Y,R17
0000a3 930a      	ST   -Y,R16
0000a4 2f1a      	MOV  R17,R26
0000a5 810a      	LDD  R16,Y+2
                 ;	data_in -> R16
                 ;	port_out -> R17
0000a6 2fe1      	MOV  R30,R17
0000a7 e0f0      	LDI  R31,0
                 ; 0001 0021 {
                 ; 0001 0022 case port_A:
0000a8 30e1      	CPI  R30,LOW(0x1)
0000a9 e0a0      	LDI  R26,HIGH(0x1)
0000aa 07fa      	CPC  R31,R26
0000ab f421      	BRNE _0x2000E
                 ; 0001 0023 DDRA = 0xFF; // as output
0000ac efef      	LDI  R30,LOW(255)
0000ad bbea      	OUT  0x1A,R30
                 ; 0001 0024 PORTA = data_in;
0000ae bb0b      	OUT  0x1B,R16
                 ; 0001 0025 break;
0000af c017      	RJMP _0x2000D
                 ; 0001 0026 case port_B:
                 _0x2000E:
0000b0 30e2      	CPI  R30,LOW(0x2)
0000b1 e0a0      	LDI  R26,HIGH(0x2)
0000b2 07fa      	CPC  R31,R26
0000b3 f421      	BRNE _0x2000F
                 ; 0001 0027 DDRB = 0xFF; // as output
0000b4 efef      	LDI  R30,LOW(255)
0000b5 bbe7      	OUT  0x17,R30
                 ; 0001 0028 PORTB = data_in;
0000b6 bb08      	OUT  0x18,R16
                 ; 0001 0029 break;
0000b7 c00f      	RJMP _0x2000D
                 ; 0001 002A case port_C:
                 _0x2000F:
0000b8 30e3      	CPI  R30,LOW(0x3)
0000b9 e0a0      	LDI  R26,HIGH(0x3)
0000ba 07fa      	CPC  R31,R26
0000bb f421      	BRNE _0x20010
                 ; 0001 002B DDRC = 0xFF; // as output
0000bc efef      	LDI  R30,LOW(255)
0000bd bbe4      	OUT  0x14,R30
                 ; 0001 002C PORTC = data_in;
0000be bb05      	OUT  0x15,R16
                 ; 0001 002D break;
0000bf c007      	RJMP _0x2000D
                 ; 0001 002E case port_D:
                 _0x20010:
0000c0 30e4      	CPI  R30,LOW(0x4)
0000c1 e0a0      	LDI  R26,HIGH(0x4)
0000c2 07fa      	CPC  R31,R26
0000c3 f419      	BRNE _0x2000D
                 ; 0001 002F DDRD = 0xFF; // as output
0000c4 efef      	LDI  R30,LOW(255)
0000c5 bbe1      	OUT  0x11,R30
                 ; 0001 0030 PORTD = data_in;
0000c6 bb02      	OUT  0x12,R16
                 ; 0001 0031 break;
                 ; 0001 0032 }
                 _0x2000D:
                 ; 0001 0033 return;
0000c7 8119      	LDD  R17,Y+1
0000c8 8108      	LDD  R16,Y+0
0000c9 9623      	ADIW R28,3
0000ca 9508      	RET
                 ; 0001 0034 }
                 ; .FEND
                 ;void part3(int number, unsigned int interval)
                 ; 0001 0037 {
                 _part3:
                 ; .FSTART _part3
                 ; 0001 0038 int i;
                 ; 0001 0039 for (i = 0; i < number; i++)
0000cb d06d      	RCALL __SAVELOCR6
0000cc 019d      	MOVW R18,R26
                +
0000cd 814e     +LDD R20 , Y + 6
0000ce 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                 ;	number -> R20,R21
                 ;	interval -> R18,R19
                 ;	i -> R16,R17
                +
0000cf e000     +LDI R16 , LOW ( 0 )
0000d0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20013:
                +
0000d1 1704     +CP R16 , R20
0000d2 0715     +CPC R17 , R21
                 	__CPWRR 16,17,20,21
0000d3 f43c      	BRGE _0x20014
                 ; 0001 003A {
                 ; 0001 003B part2(0x00, port_B);
0000d4 e0e0      	LDI  R30,LOW(0)
0000d5 d042      	RCALL SUBOPT_0x0
                 ; 0001 003C delay_ms(interval);
                 ; 0001 003D part2(0xFF, port_B);
0000d6 efef      	LDI  R30,LOW(255)
0000d7 d040      	RCALL SUBOPT_0x0
                 ; 0001 003E delay_ms(interval);
                 ; 0001 003F }
                +
0000d8 5f0f     +SUBI R16 , LOW ( - 1 )
0000d9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000da cff6      	RJMP _0x20013
                 _0x20014:
                 ; 0001 0040 return;
0000db d064      	RCALL __LOADLOCR6
0000dc 9628      	ADIW R28,8
0000dd 9508      	RET
                 ; 0001 0041 }
                 ; .FEND
                 ;void part4()
                 ; 0001 0044 {
                 _part4:
                 ; .FSTART _part4
                 ; 0001 0045 char data;
                 ; 0001 0046 data = part1(port_A);
0000de 931a      	ST   -Y,R17
                 ;	data -> R17
0000df e0a1      	LDI  R26,LOW(1)
0000e0 df99      	RCALL _part1
0000e1 2f1e      	MOV  R17,R30
                 ; 0001 0047 part2(data, port_B);
0000e2 931a      	ST   -Y,R17
0000e3 e0a2      	LDI  R26,LOW(2)
0000e4 dfbd      	RCALL _part2
                 ; 0001 0048 return;
0000e5 9119      	LD   R17,Y+
0000e6 9508      	RET
                 ; 0001 0049 }
                 ; .FEND
                 ;void part5(int data, char data_port, char enable_data)
                 ; 0001 004C {
                 _part5:
                 ; .FSTART _part5
                 ; 0001 004D int cnt = 10;
                 ; 0001 004E 
                 ; 0001 004F int temp;
                 ; 0001 0050 char one, two, three, four;
                 ; 0001 0051 temp = data;
0000e7 93aa      	ST   -Y,R26
0000e8 9722      	SBIW R28,2
0000e9 d04f      	RCALL __SAVELOCR6
                 ;	data -> Y+10
                 ;	data_port -> Y+9
                 ;	enable_data -> Y+8
                 ;	cnt -> R16,R17
                 ;	temp -> R18,R19
                 ;	one -> R21
                 ;	two -> R20
                 ;	three -> Y+7
                 ;	four -> Y+6
                +
0000ea e00a     +LDI R16 , LOW ( 10 )
0000eb e010     +LDI R17 , HIGH ( 10 )
                 	__GETWRN 16,17,10
                +
0000ec 852a     +LDD R18 , Y + 10
0000ed 853b     +LDD R19 , Y + 10 + 1
                 	__GETWRS 18,19,10
                 ; 0001 0052 
                 ; 0001 0053 four = temp % 10;
0000ee d02f      	RCALL SUBOPT_0x1
0000ef 83ee      	STD  Y+6,R30
                 ; 0001 0054 temp /= 10;
0000f0 d033      	RCALL SUBOPT_0x2
                 ; 0001 0055 
                 ; 0001 0056 three = temp % 10;
0000f1 83ef      	STD  Y+7,R30
                 ; 0001 0057 temp /= 10;
0000f2 d031      	RCALL SUBOPT_0x2
                 ; 0001 0058 
                 ; 0001 0059 two = temp % 10;
0000f3 2f4e      	MOV  R20,R30
                 ; 0001 005A temp /= 10;
0000f4 d02f      	RCALL SUBOPT_0x2
                 ; 0001 005B 
                 ; 0001 005C one = temp % 10;
0000f5 2f5e      	MOV  R21,R30
                 ; 0001 005D temp /= 10;
0000f6 01d9      	MOVW R26,R18
0000f7 e0ea      	LDI  R30,LOW(10)
0000f8 e0f0      	LDI  R31,HIGH(10)
0000f9 940e 015e 	CALL __DIVW21
0000fb 019f      	MOVW R18,R30
                 ; 0001 005E 
                 ; 0001 005F while(cnt > 0)
                 _0x20015:
0000fc 2400      	CLR  R0
0000fd 1600      	CP   R0,R16
0000fe 0601      	CPC  R0,R17
0000ff f49c      	BRGE _0x20017
                 ; 0001 0060 {
                 ; 0001 0061 part2(~0x01, enable_data);
000100 efee      	LDI  R30,LOW(254)
000101 d029      	RCALL SUBOPT_0x3
                 ; 0001 0062 part2(digits[four], data_port);
000102 81ee      	LDD  R30,Y+6
000103 d02a      	RCALL SUBOPT_0x4
                 ; 0001 0063 delay_ms(50);
                 ; 0001 0064 
                 ; 0001 0065 part2(~0x02, enable_data);
000104 efed      	LDI  R30,LOW(253)
000105 d025      	RCALL SUBOPT_0x3
                 ; 0001 0066 part2(digits[three], data_port);
000106 81ef      	LDD  R30,Y+7
000107 d026      	RCALL SUBOPT_0x4
                 ; 0001 0067 delay_ms(50);
                 ; 0001 0068 
                 ; 0001 0069 part2(~0x04, enable_data);
000108 efeb      	LDI  R30,LOW(251)
000109 d021      	RCALL SUBOPT_0x3
                 ; 0001 006A part2(digits[two], data_port);
00010a 2fe4      	MOV  R30,R20
00010b d022      	RCALL SUBOPT_0x4
                 ; 0001 006B delay_ms(50);
                 ; 0001 006C 
                 ; 0001 006D part2(~0x08, enable_data);
00010c efe7      	LDI  R30,LOW(247)
00010d d01d      	RCALL SUBOPT_0x3
                 ; 0001 006E part2(digits[one], data_port);
00010e 2fe5      	MOV  R30,R21
00010f d01e      	RCALL SUBOPT_0x4
                 ; 0001 006F delay_ms(50);
                 ; 0001 0070 
                 ; 0001 0071 cnt--;
                +
000110 5001     +SUBI R16 , LOW ( 1 )
000111 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0001 0072 }
000112 cfe9      	RJMP _0x20015
                 _0x20017:
                 ; 0001 0073 part2(~0x00, enable_data);
000113 efef      	LDI  R30,LOW(255)
000114 d016      	RCALL SUBOPT_0x3
                 ; 0001 0074 return;
000115 d02a      	RCALL __LOADLOCR6
000116 962c      	ADIW R28,12
000117 9508      	RET
                 ; 0001 0075 }
                 ; .FEND
                 
                 	.DSEG
                 _digits:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000118 93ea      	ST   -Y,R30
000119 e0a2      	LDI  R26,LOW(2)
00011a df87      	RCALL _part2
00011b 01d9      	MOVW R26,R18
00011c 940c 017f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00011e 01d9      	MOVW R26,R18
00011f e0ea      	LDI  R30,LOW(10)
000120 e0f0      	LDI  R31,HIGH(10)
000121 940e 0163 	CALL __MODW21
000123 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000124 01d9      	MOVW R26,R18
000125 e0ea      	LDI  R30,LOW(10)
000126 e0f0      	LDI  R31,HIGH(10)
000127 940e 015e 	CALL __DIVW21
000129 019f      	MOVW R18,R30
00012a cff3      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00012b 93ea      	ST   -Y,R30
00012c 85a9      	LDD  R26,Y+9
00012d cf74      	RJMP _part2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x4:
00012e e0f0      	LDI  R31,0
00012f 5ae0      	SUBI R30,LOW(-_digits)
000130 4ffe      	SBCI R31,HIGH(-_digits)
000131 81e0      	LD   R30,Z
000132 93ea      	ST   -Y,R30
000133 85aa      	LDD  R26,Y+10
000134 df6d      	RCALL _part2
000135 e3a2      	LDI  R26,LOW(50)
000136 e0b0      	LDI  R27,0
000137 940c 017f 	JMP  _delay_ms
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000139 935a      	ST   -Y,R21
                 __SAVELOCR5:
00013a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00013b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00013c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00013d 931a      	ST   -Y,R17
00013e 930a      	ST   -Y,R16
00013f 9508      	RET
                 
                 __LOADLOCR6:
000140 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000141 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000142 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000143 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000144 8119      	LDD  R17,Y+1
000145 8108      	LD   R16,Y
000146 9508      	RET
                 
                 __ANEGW1:
000147 95f1      	NEG  R31
000148 95e1      	NEG  R30
000149 40f0      	SBCI R31,0
00014a 9508      	RET
                 
                 __DIVW21U:
00014b 2400      	CLR  R0
00014c 2411      	CLR  R1
00014d e190      	LDI  R25,16
                 __DIVW21U1:
00014e 0faa      	LSL  R26
00014f 1fbb      	ROL  R27
000150 1c00      	ROL  R0
000151 1c11      	ROL  R1
000152 1a0e      	SUB  R0,R30
000153 0a1f      	SBC  R1,R31
000154 f418      	BRCC __DIVW21U2
000155 0e0e      	ADD  R0,R30
000156 1e1f      	ADC  R1,R31
000157 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000158 60a1      	SBR  R26,1
                 __DIVW21U3:
000159 959a      	DEC  R25
00015a f799      	BRNE __DIVW21U1
00015b 01fd      	MOVW R30,R26
00015c 01d0      	MOVW R26,R0
00015d 9508      	RET
                 
                 __DIVW21:
00015e d012      	RCALL __CHKSIGNW
00015f dfeb      	RCALL __DIVW21U
000160 f40e      	BRTC __DIVW211
000161 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000162 9508      	RET
                 
                 __MODW21:
000163 94e8      	CLT
000164 ffb7      	SBRS R27,7
000165 c004      	RJMP __MODW211
000166 95b1      	NEG  R27
000167 95a1      	NEG  R26
000168 40b0      	SBCI R27,0
000169 9468      	SET
                 __MODW211:
00016a fdf7      	SBRC R31,7
00016b dfdb      	RCALL __ANEGW1
00016c dfde      	RCALL __DIVW21U
00016d 01fd      	MOVW R30,R26
00016e f40e      	BRTC __MODW212
00016f dfd7      	RCALL __ANEGW1
                 __MODW212:
000170 9508      	RET
                 
                 __CHKSIGNW:
000171 94e8      	CLT
000172 fff7      	SBRS R31,7
000173 c002      	RJMP __CHKSW1
000174 dfd2      	RCALL __ANEGW1
000175 9468      	SET
                 __CHKSW1:
000176 ffb7      	SBRS R27,7
000177 c006      	RJMP __CHKSW2
000178 95b1      	NEG  R27
000179 95a1      	NEG  R26
00017a 40b0      	SBCI R27,0
00017b f800      	BLD  R0,0
00017c 9403      	INC  R0
00017d fa00      	BST  R0,0
                 __CHKSW2:
00017e 9508      	RET
                 
                 _delay_ms:
00017f 9610      	adiw r26,0
000180 f039      	breq __delay_ms1
                 __delay_ms0:
000181 95a8      	wdr
                +
000182 ed80     +LDI R24 , LOW ( 0x7D0 )
000183 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000184 9701     +SBIW R24 , 1
000185 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000186 9711      	sbiw r26,1
000187 f7c9      	brne __delay_ms0
                 __delay_ms1:
000188 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  19 r17:  23 r18:  10 r19:   3 r20:   6 r21:   6 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  46 r27:  13 r28:   5 r29:   1 r30:  78 r31:  28 
x  :   3 y  :  43 z  :   8 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :  10 cpi   :   8 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  24 ld    :   5 ldd   :  16 ldi   :  68 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  10 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   0 
ori   :   0 out   :  18 pop   :   0 push  :   0 rcall :  33 ret   :  14 
reti  :   0 rjmp  :  17 rol   :   3 ror   :   0 sbc   :   1 sbci  :   6 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  24 std   :   2 sts   :   0 sub   :   1 subi  :   3 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 46 out of 116 (39.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000312    768     18    786   16384   4.8%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
