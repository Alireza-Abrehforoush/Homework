;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;int capacity = 1000;

	.DSEG
;char msec = 0, second = 0, minute = 0, hour = 0;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F // Place your code here
; 0000 0020 parking();
;PCODE: $0000000F VOL: 0
; 0000 0021 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0025 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0026 // Place your code here
; 0000 0027 chronometer();
;PCODE: $00000015 VOL: 0
; 0000 0028 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 002C {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002D // Place your code here
; 0000 002E // for question 3: optional
; 0000 002F }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0033 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0034 // Reinitialize Timer 0 value
; 0000 0035 TCNT0=0xB2;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0036 // Place your code here
; 0000 0037 msec++;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0038 if(msec >= 100){
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0039 msec %= 100;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A second++;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003B if(second >= 60){
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003C second %= 60;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003D minute++;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 003E if (minute >= 60){
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003F minute %= 60;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0040 hour = (hour + 1) % 24;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0041 }
; 0000 0042 }
;PCODE: $0000004A VOL: 0
; 0000 0043 }
;PCODE: $0000004B VOL: 0
; 0000 0044 displayTime(hour, minute, second, msec);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0045 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;void main(void)
; 0000 0048 {
;PCODE: $00000058 VOL: 0
; 0000 0049 // Declare your local variables here
; 0000 004A 
; 0000 004B initBoard();
;PCODE: $00000059 VOL: 0
; 0000 004C 
; 0000 004D initDisplay();
;PCODE: $0000005A VOL: 0
; 0000 004E 
; 0000 004F while (1) {
;PCODE: $0000005B VOL: 0
; 0000 0050 // Place your code here
; 0000 0051 }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0052 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;int capacity = 1000;

	.DSEG
;char msec = 0, second = 0, minute = 0, hour = 0;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 005C {

	.CSEG
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 005D // Place your code here
; 0000 005E parking();
;PCODE: $00000063 VOL: 0
; 0000 005F }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0063 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0064 // Place your code here
; 0000 0065 chronometer();
;PCODE: $00000069 VOL: 0
; 0000 0066 }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 006A {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006B // Place your code here
; 0000 006C // for question 3: optional
; 0000 006D }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0071 {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0072 // Reinitialize Timer 0 value
; 0000 0073 TCNT0=0xB2;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0074 // Place your code here
; 0000 0075 msec++;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0076 if(msec >= 100){
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0077 msec %= 100;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0078 second++;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0079 if(second >= 60){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 007A second %= 60;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007B minute++;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007C if (minute >= 60){
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 007D minute %= 60;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 007E hour = (hour + 1) % 24;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 007F }
; 0000 0080 }
;PCODE: $0000009E VOL: 0
; 0000 0081 }
;PCODE: $0000009F VOL: 0
; 0000 0082 displayTime(hour, minute, second, msec);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0083 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;void main(void)
; 0000 0086 {
;PCODE: $000000AC VOL: 0
; 0000 0087 // Declare your local variables here
; 0000 0088 
; 0000 0089 initBoard();
;PCODE: $000000AD VOL: 0
; 0000 008A 
; 0000 008B initDisplay();
;PCODE: $000000AE VOL: 0
; 0000 008C 
; 0000 008D while (1) {
;PCODE: $000000AF VOL: 0
; 0000 008E // Place your code here
; 0000 008F }
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0090 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
