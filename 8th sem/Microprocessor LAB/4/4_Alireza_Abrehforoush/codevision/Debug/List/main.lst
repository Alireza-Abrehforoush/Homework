
AVRASM ver. 2.1.30  C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm Sat Apr 15 01:04:38 2023

C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1083): warning: Register r5 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1084): warning: Register r4 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1085): warning: Register r7 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1086): warning: Register r6 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1087): warning: Register r9 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1088): warning: Register r8 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1089): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _csec=R5
                 	.DEF _second=R4
                 	.DEF _minute=R7
                 	.DEF _hour=R6
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0052 	JMP  __RESET
000002 940c 00c5 	JMP  _ext_int0_isr
000004 940c 00c6 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00cb 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00ca 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000035 2020
000036 3025
000037 6432
000038 253a      	.DB  0x20,0x20,0x25,0x30,0x32,0x64,0x3A,0x25
000039 3230
00003a 3a64
00003b 3025
00003c 6432      	.DB  0x30,0x32,0x64,0x3A,0x25,0x30,0x32,0x64
00003d 253a
00003e 3230
00003f 2064
000040 0020      	.DB  0x3A,0x25,0x30,0x32,0x64,0x20,0x20,0x0
                 _0x2020060:
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1135): warning: .cseg .db misalignment - padding zero byte
000041 0001      	.DB  0x1
                 _0x2020000:
000042 4e2d
000043 4e41
000044 4900
000045 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\4\4_Alireza_Abrehforoush\codevision\Debug\List\main.asm(1138): warning: .cseg .db misalignment - padding zero byte
000046 0000      	.DB  0x0
                 _0x2060003:
000047 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000048 0004      	.DW  0x04
000049 0004      	.DW  0x04
00004a 0066      	.DW  __REG_VARS*2
                 
00004b 0001      	.DW  0x01
00004c 0160      	.DW  __seed_G101
00004d 0082      	.DW  _0x2020060*2
                 
00004e 0002      	.DW  0x02
00004f 0164      	.DW  __base_y_G103
000050 008e      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000051 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000052 94f8      	CLI
000053 27ee      	CLR  R30
000054 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000055 e0f1      	LDI  R31,1
000056 bffb      	OUT  GICR,R31
000057 bfeb      	OUT  GICR,R30
000058 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000059 e08d      	LDI  R24,(14-2)+1
00005a e0a2      	LDI  R26,2
00005b 27bb      	CLR  R27
                 __CLEAR_REG:
00005c 93ed      	ST   X+,R30
00005d 958a      	DEC  R24
00005e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000060 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000061 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000062 93ed      	ST   X+,R30
000063 9701      	SBIW R24,1
000064 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000065 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000066 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000067 9185      	LPM  R24,Z+
000068 9195      	LPM  R25,Z+
000069 9700      	SBIW R24,0
00006a f061      	BREQ __GLOBAL_INI_END
00006b 91a5      	LPM  R26,Z+
00006c 91b5      	LPM  R27,Z+
00006d 9005      	LPM  R0,Z+
00006e 9015      	LPM  R1,Z+
00006f 01bf      	MOVW R22,R30
000070 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000071 9005      	LPM  R0,Z+
000072 920d      	ST   X+,R0
000073 9701      	SBIW R24,1
000074 f7e1      	BRNE __GLOBAL_INI_LOOP
000075 01fb      	MOVW R30,R22
000076 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000077 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000078 bfed      	OUT  SPL,R30
000079 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007d 940c 0109 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char csec = 0, second = 0, minute = 0, hour = 0;
                 ;void displayTimeOnLCD(char hour, char minute, char second, char csec)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _displayTimeOnLCD:
                 ; .FSTART _displayTimeOnLCD
                 ; 0000 0025 char buffer[16];
                 ; 0000 0026 lcd_gotoxy(0, 0);
00007f 9760      	SBIW R28,16
000080 940e 03e0 	CALL __SAVELOCR4
000082 2f1a      	MOV  R17,R26
000083 890c      	LDD  R16,Y+20
000084 893d      	LDD  R19,Y+21
000085 892e      	LDD  R18,Y+22
                 ;	hour -> R18
                 ;	minute -> R19
                 ;	second -> R16
                 ;	csec -> R17
                 ;	buffer -> Y+4
000086 e0e0      	LDI  R30,LOW(0)
000087 93ea      	ST   -Y,R30
000088 e0a0      	LDI  R26,LOW(0)
000089 940e 0327 	CALL _lcd_gotoxy
                 ; 0000 0027 sprintf(buffer, "  %02d:%02d:%02d:%02d  ", hour, minute, second, csec);
00008b 01fe      	MOVW R30,R28
00008c 9634      	ADIW R30,4
00008d 93fa      	ST   -Y,R31
00008e 93ea      	ST   -Y,R30
                +
00008f e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000090 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000091 93fa      	ST   -Y,R31
000092 93ea      	ST   -Y,R30
000093 2fe2      	MOV  R30,R18
000094 940e 0399 	CALL SUBOPT_0x0
000096 2fe3      	MOV  R30,R19
000097 940e 0399 	CALL SUBOPT_0x0
000099 2fe0      	MOV  R30,R16
00009a 940e 0399 	CALL SUBOPT_0x0
00009c 2fe1      	MOV  R30,R17
00009d 940e 0399 	CALL SUBOPT_0x0
00009f e180      	LDI  R24,16
0000a0 940e 02b6 	CALL _sprintf
0000a2 9664      	ADIW R28,20
                 ; 0000 0028 lcd_clear();
0000a3 940e 0339 	CALL _lcd_clear
                 ; 0000 0029 lcd_puts(buffer);
0000a5 01de      	MOVW R26,R28
0000a6 9614      	ADIW R26,4
0000a7 940e 0359 	CALL _lcd_puts
                 ; 0000 002A }
0000a9 940e 03e7 	CALL __LOADLOCR4
0000ab 9667      	ADIW R28,23
0000ac 9508      	RET
                 ; .FEND
                 ;void stopwatch()
                 ; 0000 002C {
                 _stopwatch:
                 ; .FSTART _stopwatch
                 ; 0000 002D if (PINB.4 == 0)
0000ad 99b4      	SBIC 0x16,4
0000ae c002      	RJMP _0x3
                 ; 0000 002E {
                 ; 0000 002F TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (1 << CS02)  ...
0000af e0e5      	LDI  R30,LOW(5)
0000b0 bfe3      	OUT  0x33,R30
                 ; 0000 0030 }
                 ; 0000 0031 if (PINB.5 == 0)
                 _0x3:
0000b1 99b5      	SBIC 0x16,5
0000b2 c011      	RJMP _0x4
                 ; 0000 0032 {
                 ; 0000 0033 if (TCCR0 == 0x05)
0000b3 b7e3      	IN   R30,0x33
0000b4 30e5      	CPI  R30,LOW(0x5)
0000b5 f419      	BRNE _0x5
                 ; 0000 0034 {
                 ; 0000 0035 TCCR0 = 0x00;
0000b6 e0e0      	LDI  R30,LOW(0)
0000b7 bfe3      	OUT  0x33,R30
                 ; 0000 0036 }
                 ; 0000 0037 else if (TCCR0 == 0x00)
0000b8 c00b      	RJMP _0x6
                 _0x5:
0000b9 b7e3      	IN   R30,0x33
0000ba 30e0      	CPI  R30,0
0000bb f441      	BRNE _0x7
                 ; 0000 0038 {
                 ; 0000 0039 TCNT0 = 0x00;
0000bc e0e0      	LDI  R30,LOW(0)
0000bd bfe2      	OUT  0x32,R30
                 ; 0000 003A csec = 0;
0000be 2455      	CLR  R5
                 ; 0000 003B second = 0;
0000bf 2444      	CLR  R4
                 ; 0000 003C minute = 0;
0000c0 2477      	CLR  R7
                 ; 0000 003D hour = 0;
0000c1 2466      	CLR  R6
                 ; 0000 003E displayTimeOnLCD(hour, minute, second, csec);
0000c2 940e 039f 	CALL SUBOPT_0x1
                 ; 0000 003F }
                 ; 0000 0040 }
                 _0x7:
                 _0x6:
                 ; 0000 0041 }
                 _0x4:
0000c4 9508      	RET
                 ; .FEND
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0044 {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0045 // Place your code here
                 ; 0000 0046 
                 ; 0000 0047 }
0000c5 9518      	RETI
                 ; .FEND
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 004B {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0000c6 940e 03a5 	CALL SUBOPT_0x2
                 ; 0000 004C // Place your code here
                 ; 0000 004D stopwatch();
0000c8 dfe4      	RCALL _stopwatch
                 ; 0000 004E }
0000c9 c031      	RJMP _0xF
                 ; .FEND
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0052 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
                 ; 0000 0053 // Place your code here
                 ; 0000 0054 
                 ; 0000 0055 }
0000ca 9518      	RETI
                 ; .FEND
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0059 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000cb 940e 03a5 	CALL SUBOPT_0x2
                 ; 0000 005A // Reinitialize Timer 0 value
                 ; 0000 005B TCNT0=0xB2;
0000cd ebe2      	LDI  R30,LOW(178)
0000ce bfe2      	OUT  0x32,R30
                 ; 0000 005C // Place your code here
                 ; 0000 005D csec++;
0000cf 9453      	INC  R5
                 ; 0000 005E if (csec >= 100)
0000d0 e6e4      	LDI  R30,LOW(100)
0000d1 165e      	CP   R5,R30
0000d2 f130      	BRLO _0x8
                 ; 0000 005F {
                 ; 0000 0060 second++;
0000d3 9443      	INC  R4
                 ; 0000 0061 csec %= 100;
0000d4 2da5      	MOV  R26,R5
0000d5 27bb      	CLR  R27
0000d6 e6e4      	LDI  R30,LOW(100)
0000d7 e0f0      	LDI  R31,HIGH(100)
0000d8 940e 040b 	CALL __MODW21
0000da 2e5e      	MOV  R5,R30
                 ; 0000 0062 if (second >= 60)
0000db e3ec      	LDI  R30,LOW(60)
0000dc 164e      	CP   R4,R30
0000dd f0d8      	BRLO _0x9
                 ; 0000 0063 {
                 ; 0000 0064 minute++;
0000de 9473      	INC  R7
                 ; 0000 0065 second %= 60;
0000df 2da4      	MOV  R26,R4
0000e0 27bb      	CLR  R27
0000e1 e3ec      	LDI  R30,LOW(60)
0000e2 e0f0      	LDI  R31,HIGH(60)
0000e3 940e 040b 	CALL __MODW21
0000e5 2e4e      	MOV  R4,R30
                 ; 0000 0066 if (minute >= 60)
0000e6 e3ec      	LDI  R30,LOW(60)
0000e7 167e      	CP   R7,R30
0000e8 f080      	BRLO _0xA
                 ; 0000 0067 {
                 ; 0000 0068 hour = (hour + 1) % 24;
0000e9 2de6      	MOV  R30,R6
0000ea e0f0      	LDI  R31,0
0000eb 9631      	ADIW R30,1
0000ec 01df      	MOVW R26,R30
0000ed e1e8      	LDI  R30,LOW(24)
0000ee e0f0      	LDI  R31,HIGH(24)
0000ef 940e 040b 	CALL __MODW21
0000f1 2e6e      	MOV  R6,R30
                 ; 0000 0069 minute %= 60;
0000f2 2da7      	MOV  R26,R7
0000f3 27bb      	CLR  R27
0000f4 e3ec      	LDI  R30,LOW(60)
0000f5 e0f0      	LDI  R31,HIGH(60)
0000f6 940e 040b 	CALL __MODW21
0000f8 2e7e      	MOV  R7,R30
                 ; 0000 006A }
                 ; 0000 006B }
                 _0xA:
                 ; 0000 006C }
                 _0x9:
                 ; 0000 006D displayTimeOnLCD(hour, minute, second, csec);
                 _0x8:
0000f9 940e 039f 	CALL SUBOPT_0x1
                 ; 0000 006E }
                 _0xF:
0000fb 91e9      	LD   R30,Y+
0000fc bfef      	OUT  SREG,R30
0000fd 91f9      	LD   R31,Y+
0000fe 91e9      	LD   R30,Y+
0000ff 91b9      	LD   R27,Y+
000100 91a9      	LD   R26,Y+
000101 9199      	LD   R25,Y+
000102 9189      	LD   R24,Y+
000103 9179      	LD   R23,Y+
000104 9169      	LD   R22,Y+
000105 90f9      	LD   R15,Y+
000106 9019      	LD   R1,Y+
000107 9009      	LD   R0,Y+
000108 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0071 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0072 // Declare your local variables here
                 ; 0000 0073 
                 ; 0000 0074 // Input/Output Ports initialization
                 ; 0000 0075 // Port A initialization
                 ; 0000 0076 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0077 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
000109 e0e0      	LDI  R30,LOW(0)
00010a bbea      	OUT  0x1A,R30
                 ; 0000 0078 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0079 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
00010b bbeb      	OUT  0x1B,R30
                 ; 0000 007A 
                 ; 0000 007B // Port B initialization
                 ; 0000 007C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 007D DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0< ...
00010c bbe7      	OUT  0x17,R30
                 ; 0000 007E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 007F PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
00010d bbe8      	OUT  0x18,R30
                 ; 0000 0080 
                 ; 0000 0081 // Port C initialization
                 ; 0000 0082 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0 ...
                 ; 0000 0083 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1< ...
00010e efef      	LDI  R30,LOW(255)
00010f bbe4      	OUT  0x14,R30
                 ; 0000 0084 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0085 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
000110 e0e0      	LDI  R30,LOW(0)
000111 bbe5      	OUT  0x15,R30
                 ; 0000 0086 
                 ; 0000 0087 // Port D initialization
                 ; 0000 0088 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0089 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
000112 bbe1      	OUT  0x11,R30
                 ; 0000 008A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 008B PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
000113 bbe2      	OUT  0x12,R30
                 ; 0000 008C 
                 ; 0000 008D // Timer/Counter 0 initialization
                 ; 0000 008E // Clock source: System Clock
                 ; 0000 008F // Clock value: 7.813 kHz
                 ; 0000 0090 // Mode: Normal top=0xFF
                 ; 0000 0091 // OC0 output: Disconnected
                 ; 0000 0092 // Timer Period: 9.984 ms
                 ; 0000 0093 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01)  ...
000114 e0e5      	LDI  R30,LOW(5)
000115 bfe3      	OUT  0x33,R30
                 ; 0000 0094 TCNT0=0xB2;
000116 ebe2      	LDI  R30,LOW(178)
000117 bfe2      	OUT  0x32,R30
                 ; 0000 0095 OCR0=0x00;
000118 e0e0      	LDI  R30,LOW(0)
000119 bfec      	OUT  0x3C,R30
                 ; 0000 0096 
                 ; 0000 0097 // Timer/Counter 1 initialization
                 ; 0000 0098 // Clock source: System Clock
                 ; 0000 0099 // Clock value: Timer1 Stopped
                 ; 0000 009A // Mode: Normal top=0xFFFF
                 ; 0000 009B // OC1A output: Disconnected
                 ; 0000 009C // OC1B output: Disconnected
                 ; 0000 009D // Noise Canceler: Off
                 ; 0000 009E // Input Capture on Falling Edge
                 ; 0000 009F // Timer1 Overflow Interrupt: Off
                 ; 0000 00A0 // Input Capture Interrupt: Off
                 ; 0000 00A1 // Compare A Match Interrupt: Off
                 ; 0000 00A2 // Compare B Match Interrupt: Off
                 ; 0000 00A3 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<< ...
00011a bdef      	OUT  0x2F,R30
                 ; 0000 00A4 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) ...
00011b bdee      	OUT  0x2E,R30
                 ; 0000 00A5 TCNT1H=0x00;
00011c bded      	OUT  0x2D,R30
                 ; 0000 00A6 TCNT1L=0x00;
00011d bdec      	OUT  0x2C,R30
                 ; 0000 00A7 ICR1H=0x00;
00011e bde7      	OUT  0x27,R30
                 ; 0000 00A8 ICR1L=0x00;
00011f bde6      	OUT  0x26,R30
                 ; 0000 00A9 OCR1AH=0x00;
000120 bdeb      	OUT  0x2B,R30
                 ; 0000 00AA OCR1AL=0x00;
000121 bdea      	OUT  0x2A,R30
                 ; 0000 00AB OCR1BH=0x00;
000122 bde9      	OUT  0x29,R30
                 ; 0000 00AC OCR1BL=0x00;
000123 bde8      	OUT  0x28,R30
                 ; 0000 00AD 
                 ; 0000 00AE // Timer/Counter 2 initialization
                 ; 0000 00AF // Clock source: System Clock
                 ; 0000 00B0 // Clock value: Timer2 Stopped
                 ; 0000 00B1 // Mode: Normal top=0xFF
                 ; 0000 00B2 // OC2 output: Disconnected
                 ; 0000 00B3 ASSR=0<<AS2;
000124 bde2      	OUT  0x22,R30
                 ; 0000 00B4 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) |  ...
000125 bde5      	OUT  0x25,R30
                 ; 0000 00B5 TCNT2=0x00;
000126 bde4      	OUT  0x24,R30
                 ; 0000 00B6 OCR2=0x00;
000127 bde3      	OUT  0x23,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00B9 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TO ...
000128 e0e1      	LDI  R30,LOW(1)
000129 bfe9      	OUT  0x39,R30
                 ; 0000 00BA 
                 ; 0000 00BB // External Interrupt(s) initialization
                 ; 0000 00BC // INT0: On
                 ; 0000 00BD // INT0 Mode: Falling Edge
                 ; 0000 00BE // INT1: On
                 ; 0000 00BF // INT1 Mode: Falling Edge
                 ; 0000 00C0 // INT2: On
                 ; 0000 00C1 // INT2 Mode: Falling Edge
                 ; 0000 00C2 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
00012a b7eb      	IN   R30,0x3B
00012b 6ee0      	ORI  R30,LOW(0xE0)
00012c bfeb      	OUT  0x3B,R30
                 ; 0000 00C3 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
00012d e0ea      	LDI  R30,LOW(10)
00012e bfe5      	OUT  0x35,R30
                 ; 0000 00C4 MCUCSR=(0<<ISC2);
00012f e0e0      	LDI  R30,LOW(0)
000130 bfe4      	OUT  0x34,R30
                 ; 0000 00C5 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
000131 eee0      	LDI  R30,LOW(224)
000132 bfea      	OUT  0x3A,R30
                 ; 0000 00C6 
                 ; 0000 00C7 // USART initialization
                 ; 0000 00C8 // USART disabled
                 ; 0000 00C9 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2)  ...
000133 e0e0      	LDI  R30,LOW(0)
000134 b9ea      	OUT  0xA,R30
                 ; 0000 00CA 
                 ; 0000 00CB // Analog Comparator initialization
                 ; 0000 00CC // Analog Comparator: Off
                 ; 0000 00CD // The Analog Comparator's positive input is
                 ; 0000 00CE // connected to the AIN0 pin
                 ; 0000 00CF // The Analog Comparator's negative input is
                 ; 0000 00D0 // connected to the AIN1 pin
                 ; 0000 00D1 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<AC ...
000135 e8e0      	LDI  R30,LOW(128)
000136 b9e8      	OUT  0x8,R30
                 ; 0000 00D2 SFIOR=(0<<ACME);
000137 e0e0      	LDI  R30,LOW(0)
000138 bfe0      	OUT  0x30,R30
                 ; 0000 00D3 
                 ; 0000 00D4 // ADC initialization
                 ; 0000 00D5 // ADC disabled
                 ; 0000 00D6 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | ...
000139 b9e6      	OUT  0x6,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // SPI initialization
                 ; 0000 00D9 // SPI disabled
                 ; 0000 00DA SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<< ...
00013a b9ed      	OUT  0xD,R30
                 ; 0000 00DB 
                 ; 0000 00DC // TWI initialization
                 ; 0000 00DD // TWI disabled
                 ; 0000 00DE TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00013b bfe6      	OUT  0x36,R30
                 ; 0000 00DF 
                 ; 0000 00E0 // Alphanumeric LCD initialization
                 ; 0000 00E1 // Connections are specified in the
                 ; 0000 00E2 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00E3 // RS - PORTA Bit 0
                 ; 0000 00E4 // RD - PORTA Bit 3
                 ; 0000 00E5 // EN - PORTA Bit 1
                 ; 0000 00E6 // D4 - PORTA Bit 4
                 ; 0000 00E7 // D5 - PORTA Bit 5
                 ; 0000 00E8 // D6 - PORTA Bit 6
                 ; 0000 00E9 // D7 - PORTA Bit 7
                 ; 0000 00EA // Characters/line: 16
                 ; 0000 00EB lcd_init(16);
00013c e1a0      	LDI  R26,LOW(16)
00013d 940e 036a 	CALL _lcd_init
                 ; 0000 00EC 
                 ; 0000 00ED // Globally enable interrupts
                 ; 0000 00EE #asm("sei")
00013f 9478      	SEI
                 ; 0000 00EF while (1)
                 _0xB:
                 ; 0000 00F0 {
                 ; 0000 00F1 // Place your code here
                 ; 0000 00F2 
                 ; 0000 00F3 }
000140 cfff      	RJMP _0xB
                 ; 0000 00F4 }
                 _0xE:
000141 cfff      	RJMP _0xE
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000142 940e 03de 	CALL __SAVELOCR6
000144 019d      	MOVW R18,R26
000145 815e      	LDD  R21,Y+6
000146 9612      	ADIW R26,2
000147 940e 0419 	CALL __GETW1P
000149 9730      	SBIW R30,0
00014a f131      	BREQ _0x2000010
00014b 01d9      	MOVW R26,R18
00014c 9614      	ADIW R26,4
00014d 940e 0419 	CALL __GETW1P
00014f 018f      	MOVW R16,R30
000150 9730      	SBIW R30,0
000151 f059      	BREQ _0x2000012
                +
000152 3002     +CPI R16 , LOW ( 2 )
000153 e0e0     +LDI R30 , HIGH ( 2 )
000154 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000155 f080      	BRLO _0x2000013
000156 01f8      	MOVW R30,R16
000157 9731      	SBIW R30,1
000158 018f      	MOVW R16,R30
                +
000159 01d9     +MOVW R26 , R18
00015a 9614     +ADIW R26 , 4
00015b 93ed     +ST X + , R30
00015c 93fc     +ST X , R31
                 	__PUTW1RNS 18,4
                 _0x2000012:
00015d 01d9      	MOVW R26,R18
00015e 9612      	ADIW R26,2
00015f 91ed      	LD   R30,X+
000160 91fd      	LD   R31,X+
000161 9631      	ADIW R30,1
000162 93fe      	ST   -X,R31
000163 93ee      	ST   -X,R30
000164 9731      	SBIW R30,1
000165 8350      	ST   Z,R21
                 _0x2000013:
000166 01d9      	MOVW R26,R18
000167 940e 0419 	CALL __GETW1P
000169 23ff      	TST  R31
00016a f02a      	BRMI _0x2000014
00016b 91ed      	LD   R30,X+
00016c 91fd      	LD   R31,X+
00016d 9631      	ADIW R30,1
00016e 93fe      	ST   -X,R31
00016f 93ee      	ST   -X,R30
                 _0x2000014:
000170 c005      	RJMP _0x2000015
                 _0x2000010:
000171 01d9      	MOVW R26,R18
000172 efef      	LDI  R30,LOW(65535)
000173 efff      	LDI  R31,HIGH(65535)
000174 93ed      	ST   X+,R30
000175 93fc      	ST   X,R31
                 _0x2000015:
000176 940e 03e5 	CALL __LOADLOCR6
000178 9627      	ADIW R28,7
000179 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00017a 93ba      	ST   -Y,R27
00017b 93aa      	ST   -Y,R26
00017c 9726      	SBIW R28,6
00017d 940e 03de 	CALL __SAVELOCR6
00017f e010      	LDI  R17,0
000180 85ac      	LDD  R26,Y+12
000181 85bd      	LDD  R27,Y+12+1
000182 e0e0      	LDI  R30,LOW(0)
000183 e0f0      	LDI  R31,HIGH(0)
000184 93ed      	ST   X+,R30
000185 93fc      	ST   X,R31
                 _0x2000016:
000186 89ea      	LDD  R30,Y+18
000187 89fb      	LDD  R31,Y+18+1
000188 9631      	ADIW R30,1
000189 8bea      	STD  Y+18,R30
00018a 8bfb      	STD  Y+18+1,R31
00018b 9731      	SBIW R30,1
00018c 91e4      	LPM  R30,Z
00018d 2f2e      	MOV  R18,R30
00018e 30e0      	CPI  R30,0
00018f f409      	BRNE PC+2
000190 c11d      	RJMP _0x2000018
000191 2fe1      	MOV  R30,R17
000192 30e0      	CPI  R30,0
000193 f439      	BRNE _0x200001C
000194 3225      	CPI  R18,37
000195 f411      	BRNE _0x200001D
000196 e011      	LDI  R17,LOW(1)
000197 c002      	RJMP _0x200001E
                 _0x200001D:
000198 940e 03b3 	CALL SUBOPT_0x3
                 _0x200001E:
00019a c112      	RJMP _0x200001B
                 _0x200001C:
00019b 30e1      	CPI  R30,LOW(0x1)
00019c f4a9      	BRNE _0x200001F
00019d 3225      	CPI  R18,37
00019e f419      	BRNE _0x2000020
00019f 940e 03b3 	CALL SUBOPT_0x3
0001a1 c10a      	RJMP _0x20000CC
                 _0x2000020:
0001a2 e012      	LDI  R17,LOW(2)
0001a3 e040      	LDI  R20,LOW(0)
0001a4 e000      	LDI  R16,LOW(0)
0001a5 322d      	CPI  R18,45
0001a6 f411      	BRNE _0x2000021
0001a7 e001      	LDI  R16,LOW(1)
0001a8 c104      	RJMP _0x200001B
                 _0x2000021:
0001a9 322b      	CPI  R18,43
0001aa f411      	BRNE _0x2000022
0001ab e24b      	LDI  R20,LOW(43)
0001ac c100      	RJMP _0x200001B
                 _0x2000022:
0001ad 3220      	CPI  R18,32
0001ae f411      	BRNE _0x2000023
0001af e240      	LDI  R20,LOW(32)
0001b0 c0fc      	RJMP _0x200001B
                 _0x2000023:
0001b1 c002      	RJMP _0x2000024
                 _0x200001F:
0001b2 30e2      	CPI  R30,LOW(0x2)
0001b3 f439      	BRNE _0x2000025
                 _0x2000024:
0001b4 e050      	LDI  R21,LOW(0)
0001b5 e013      	LDI  R17,LOW(3)
0001b6 3320      	CPI  R18,48
0001b7 f411      	BRNE _0x2000026
0001b8 6800      	ORI  R16,LOW(128)
0001b9 c0f3      	RJMP _0x200001B
                 _0x2000026:
0001ba c003      	RJMP _0x2000027
                 _0x2000025:
0001bb 30e3      	CPI  R30,LOW(0x3)
0001bc f009      	BREQ PC+2
0001bd c0ef      	RJMP _0x200001B
                 _0x2000027:
0001be 3320      	CPI  R18,48
0001bf f010      	BRLO _0x200002A
0001c0 332a      	CPI  R18,58
0001c1 f008      	BRLO _0x200002B
                 _0x200002A:
0001c2 c007      	RJMP _0x2000029
                 _0x200002B:
0001c3 e0aa      	LDI  R26,LOW(10)
0001c4 9f5a      	MUL  R21,R26
0001c5 2d50      	MOV  R21,R0
0001c6 2fe2      	MOV  R30,R18
0001c7 53e0      	SUBI R30,LOW(48)
0001c8 0f5e      	ADD  R21,R30
0001c9 c0e3      	RJMP _0x200001B
                 _0x2000029:
0001ca 2fe2      	MOV  R30,R18
0001cb 36e3      	CPI  R30,LOW(0x63)
0001cc f449      	BRNE _0x200002F
0001cd 940e 03ba 	CALL SUBOPT_0x4
0001cf 89e8      	LDD  R30,Y+16
0001d0 89f9      	LDD  R31,Y+16+1
0001d1 81a4      	LDD  R26,Z+4
0001d2 93aa      	ST   -Y,R26
0001d3 940e 03c0 	CALL SUBOPT_0x5
0001d5 c0d6      	RJMP _0x2000030
                 _0x200002F:
0001d6 37e3      	CPI  R30,LOW(0x73)
0001d7 f441      	BRNE _0x2000032
0001d8 940e 03ba 	CALL SUBOPT_0x4
0001da 940e 03c6 	CALL SUBOPT_0x6
0001dc 940e 02ec 	CALL _strlen
0001de 2f1e      	MOV  R17,R30
0001df c00a      	RJMP _0x2000033
                 _0x2000032:
0001e0 37e0      	CPI  R30,LOW(0x70)
0001e1 f461      	BRNE _0x2000035
0001e2 940e 03ba 	CALL SUBOPT_0x4
0001e4 940e 03c6 	CALL SUBOPT_0x6
0001e6 940e 02f8 	CALL _strlenf
0001e8 2f1e      	MOV  R17,R30
0001e9 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001ea 6002      	ORI  R16,LOW(2)
0001eb 770f      	ANDI R16,LOW(127)
0001ec e030      	LDI  R19,LOW(0)
0001ed c03c      	RJMP _0x2000036
                 _0x2000035:
0001ee 36e4      	CPI  R30,LOW(0x64)
0001ef f011      	BREQ _0x2000039
0001f0 36e9      	CPI  R30,LOW(0x69)
0001f1 f411      	BRNE _0x200003A
                 _0x2000039:
0001f2 6004      	ORI  R16,LOW(4)
0001f3 c002      	RJMP _0x200003B
                 _0x200003A:
0001f4 37e5      	CPI  R30,LOW(0x75)
0001f5 f431      	BRNE _0x200003C
                 _0x200003B:
0001f6 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001f7 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001f8 83ee      	STD  Y+6,R30
0001f9 83ff      	STD  Y+6+1,R31
0001fa e015      	LDI  R17,LOW(5)
0001fb c00c      	RJMP _0x200003D
                 _0x200003C:
0001fc 35e8      	CPI  R30,LOW(0x58)
0001fd f411      	BRNE _0x200003F
0001fe 6008      	ORI  R16,LOW(8)
0001ff c003      	RJMP _0x2000040
                 _0x200003F:
000200 37e8      	CPI  R30,LOW(0x78)
000201 f009      	BREQ PC+2
000202 c0a9      	RJMP _0x2000071
                 _0x2000040:
000203 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000204 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000205 83ee      	STD  Y+6,R30
000206 83ff      	STD  Y+6+1,R31
000207 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000208 ff02      	SBRS R16,2
000209 c017      	RJMP _0x2000042
00020a 940e 03ba 	CALL SUBOPT_0x4
00020c 89a8      	LDD  R26,Y+16
00020d 89b9      	LDD  R27,Y+16+1
00020e 9614      	ADIW R26,4
00020f 91ed      	LD   R30,X+
000210 91fd      	LD   R31,X+
000211 87ea      	STD  Y+10,R30
000212 87fb      	STD  Y+10+1,R31
000213 85ab      	LDD  R26,Y+11
000214 23aa      	TST  R26
000215 f42a      	BRPL _0x2000043
000216 940e 03f4 	CALL __ANEGW1
000218 87ea      	STD  Y+10,R30
000219 87fb      	STD  Y+10+1,R31
00021a e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00021b 3040      	CPI  R20,0
00021c f011      	BREQ _0x2000044
00021d 5f1f      	SUBI R17,-LOW(1)
00021e c001      	RJMP _0x2000045
                 _0x2000044:
00021f 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000220 c009      	RJMP _0x2000046
                 _0x2000042:
000221 940e 03ba 	CALL SUBOPT_0x4
000223 89a8      	LDD  R26,Y+16
000224 89b9      	LDD  R27,Y+16+1
000225 9614      	ADIW R26,4
000226 940e 0419 	CALL __GETW1P
000228 87ea      	STD  Y+10,R30
000229 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
00022a fd00      	SBRC R16,0
00022b c011      	RJMP _0x2000047
                 _0x2000048:
00022c 1715      	CP   R17,R21
00022d f478      	BRSH _0x200004A
00022e ff07      	SBRS R16,7
00022f c008      	RJMP _0x200004B
000230 ff02      	SBRS R16,2
000231 c004      	RJMP _0x200004C
000232 7f0b      	ANDI R16,LOW(251)
000233 2f24      	MOV  R18,R20
000234 5011      	SUBI R17,LOW(1)
000235 c001      	RJMP _0x200004D
                 _0x200004C:
000236 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000237 c001      	RJMP _0x200004E
                 _0x200004B:
000238 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000239 940e 03b3 	CALL SUBOPT_0x3
00023b 5051      	SUBI R21,LOW(1)
00023c cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00023d 2f31      	MOV  R19,R17
00023e ff01      	SBRS R16,1
00023f c017      	RJMP _0x200004F
                 _0x2000050:
000240 3030      	CPI  R19,0
000241 f0a1      	BREQ _0x2000052
000242 ff03      	SBRS R16,3
000243 c006      	RJMP _0x2000053
000244 81ee      	LDD  R30,Y+6
000245 81ff      	LDD  R31,Y+6+1
000246 9125      	LPM  R18,Z+
000247 83ee      	STD  Y+6,R30
000248 83ff      	STD  Y+6+1,R31
000249 c005      	RJMP _0x2000054
                 _0x2000053:
00024a 81ae      	LDD  R26,Y+6
00024b 81bf      	LDD  R27,Y+6+1
00024c 912d      	LD   R18,X+
00024d 83ae      	STD  Y+6,R26
00024e 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00024f 940e 03b3 	CALL SUBOPT_0x3
000251 3050      	CPI  R21,0
000252 f009      	BREQ _0x2000055
000253 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000254 5031      	SUBI R19,LOW(1)
000255 cfea      	RJMP _0x2000050
                 _0x2000052:
000256 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000257 e320      	LDI  R18,LOW(48)
000258 81ee      	LDD  R30,Y+6
000259 81ff      	LDD  R31,Y+6+1
00025a 940e 041d 	CALL __GETW1PF
00025c 87e8      	STD  Y+8,R30
00025d 87f9      	STD  Y+8+1,R31
00025e 81ee      	LDD  R30,Y+6
00025f 81ff      	LDD  R31,Y+6+1
000260 9632      	ADIW R30,2
000261 83ee      	STD  Y+6,R30
000262 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000263 85e8      	LDD  R30,Y+8
000264 85f9      	LDD  R31,Y+8+1
000265 85aa      	LDD  R26,Y+10
000266 85bb      	LDD  R27,Y+10+1
000267 17ae      	CP   R26,R30
000268 07bf      	CPC  R27,R31
000269 f050      	BRLO _0x200005C
00026a 5f2f      	SUBI R18,-LOW(1)
00026b 85a8      	LDD  R26,Y+8
00026c 85b9      	LDD  R27,Y+8+1
00026d 85ea      	LDD  R30,Y+10
00026e 85fb      	LDD  R31,Y+10+1
00026f 1bea      	SUB  R30,R26
000270 0bfb      	SBC  R31,R27
000271 87ea      	STD  Y+10,R30
000272 87fb      	STD  Y+10+1,R31
000273 cfef      	RJMP _0x200005A
                 _0x200005C:
000274 332a      	CPI  R18,58
000275 f028      	BRLO _0x200005D
000276 ff03      	SBRS R16,3
000277 c002      	RJMP _0x200005E
000278 5f29      	SUBI R18,-LOW(7)
000279 c001      	RJMP _0x200005F
                 _0x200005E:
00027a 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00027b fd04      	SBRC R16,4
00027c c01a      	RJMP _0x2000061
00027d 3321      	CPI  R18,49
00027e f420      	BRSH _0x2000063
00027f 85a8      	LDD  R26,Y+8
000280 85b9      	LDD  R27,Y+8+1
000281 9711      	SBIW R26,1
000282 f409      	BRNE _0x2000062
                 _0x2000063:
000283 c009      	RJMP _0x20000CD
                 _0x2000062:
000284 1753      	CP   R21,R19
000285 f010      	BRLO _0x2000067
000286 ff00      	SBRS R16,0
000287 c001      	RJMP _0x2000068
                 _0x2000067:
000288 c013      	RJMP _0x2000066
                 _0x2000068:
000289 e220      	LDI  R18,LOW(32)
00028a ff07      	SBRS R16,7
00028b c00b      	RJMP _0x2000069
00028c e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00028d 6100      	ORI  R16,LOW(16)
00028e ff02      	SBRS R16,2
00028f c007      	RJMP _0x200006A
000290 7f0b      	ANDI R16,LOW(251)
000291 934a      	ST   -Y,R20
000292 940e 03c0 	CALL SUBOPT_0x5
000294 3050      	CPI  R21,0
000295 f009      	BREQ _0x200006B
000296 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000297 940e 03b3 	CALL SUBOPT_0x3
000299 3050      	CPI  R21,0
00029a f009      	BREQ _0x200006C
00029b 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00029c 5031      	SUBI R19,LOW(1)
00029d 85a8      	LDD  R26,Y+8
00029e 85b9      	LDD  R27,Y+8+1
00029f 9712      	SBIW R26,2
0002a0 f008      	BRLO _0x2000059
0002a1 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002a2 ff00      	SBRS R16,0
0002a3 c008      	RJMP _0x200006D
                 _0x200006E:
0002a4 3050      	CPI  R21,0
0002a5 f031      	BREQ _0x2000070
0002a6 5051      	SUBI R21,LOW(1)
0002a7 e2e0      	LDI  R30,LOW(32)
0002a8 93ea      	ST   -Y,R30
0002a9 940e 03c0 	CALL SUBOPT_0x5
0002ab cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002ac e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002ad ced8      	RJMP _0x2000016
                 _0x2000018:
0002ae 85ac      	LDD  R26,Y+12
0002af 85bd      	LDD  R27,Y+12+1
0002b0 91ed      	LD   R30,X+
0002b1 91fd      	LD   R31,X+
0002b2 940e 03e5 	CALL __LOADLOCR6
0002b4 9664      	ADIW R28,20
0002b5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002b6 92ff      	PUSH R15
0002b7 2ef8      	MOV  R15,R24
0002b8 9726      	SBIW R28,6
0002b9 940e 03de 	CALL __SAVELOCR6
0002bb 01fe      	MOVW R30,R28
0002bc 940e 03ec 	CALL __ADDW1R15
                +
0002be 8546     +LDD R20 , Z + 14
0002bf 8557     +LDD R21 , Z + 14 + 1
                 	__GETWRZ 20,21,14
0002c0 2e04      	MOV  R0,R20
0002c1 2a05      	OR   R0,R21
0002c2 f419      	BRNE _0x2000072
0002c3 efef      	LDI  R30,LOW(65535)
0002c4 efff      	LDI  R31,HIGH(65535)
0002c5 c021      	RJMP _0x20C0002
                 _0x2000072:
0002c6 01de      	MOVW R26,R28
0002c7 9618      	ADIW R26,8
0002c8 940e 03f0 	CALL __ADDW2R15
0002ca 018d      	MOVW R16,R26
                +
0002cb 8748     +STD Y + 8 , R20
0002cc 8759     +STD Y + 8 + 1 , R21
                 	__PUTWSR 20,21,8
0002cd e0e0      	LDI  R30,LOW(0)
0002ce 87ea      	STD  Y+10,R30
0002cf 87eb      	STD  Y+10+1,R30
0002d0 01de      	MOVW R26,R28
0002d1 961c      	ADIW R26,12
0002d2 940e 03f0 	CALL __ADDW2R15
0002d4 91ed      	LD   R30,X+
0002d5 91fd      	LD   R31,X+
0002d6 93fa      	ST   -Y,R31
0002d7 93ea      	ST   -Y,R30
0002d8 931a      	ST   -Y,R17
0002d9 930a      	ST   -Y,R16
0002da e4e2      	LDI  R30,LOW(_put_buff_G100)
0002db e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002dc 93fa      	ST   -Y,R31
0002dd 93ea      	ST   -Y,R30
0002de 01de      	MOVW R26,R28
0002df 961c      	ADIW R26,12
0002e0 de99      	RCALL __print_G100
0002e1 019f      	MOVW R18,R30
0002e2 85a8      	LDD  R26,Y+8
0002e3 85b9      	LDD  R27,Y+8+1
0002e4 e0e0      	LDI  R30,LOW(0)
0002e5 93ec      	ST   X,R30
0002e6 01f9      	MOVW R30,R18
                 _0x20C0002:
0002e7 940e 03e5 	CALL __LOADLOCR6
0002e9 962c      	ADIW R28,12
0002ea 90ff      	POP  R15
0002eb 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002ec 93ba      	ST   -Y,R27
0002ed 93aa      	ST   -Y,R26
0002ee 91a9          ld   r26,y+
0002ef 91b9          ld   r27,y+
0002f0 27ee          clr  r30
0002f1 27ff          clr  r31
                 strlen0:
0002f2 916d          ld   r22,x+
0002f3 2366          tst  r22
0002f4 f011          breq strlen1
0002f5 9631          adiw r30,1
0002f6 cffb          rjmp strlen0
                 strlen1:
0002f7 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002f8 93ba      	ST   -Y,R27
0002f9 93aa      	ST   -Y,R26
0002fa 27aa          clr  r26
0002fb 27bb          clr  r27
0002fc 91e9          ld   r30,y+
0002fd 91f9          ld   r31,y+
                 strlenf0:
0002fe 9005      	lpm  r0,z+
0002ff 2000          tst  r0
000300 f011          breq strlenf1
000301 9611          adiw r26,1
000302 cffb          rjmp strlenf0
                 strlenf1:
000303 01fd          movw r30,r26
000304 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000305 931a      	ST   -Y,R17
000306 2f1a      	MOV  R17,R26
000307 b3eb      	IN   R30,0x1B
000308 70ef      	ANDI R30,LOW(0xF)
000309 2fae      	MOV  R26,R30
00030a 2fe1      	MOV  R30,R17
00030b 7fe0      	ANDI R30,LOW(0xF0)
00030c 2bea      	OR   R30,R26
00030d bbeb      	OUT  0x1B,R30
                +
00030e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00030f 958a     +DEC R24
000310 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000311 9ad9      	SBI  0x1B,1
                +
000312 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000313 958a     +DEC R24
000314 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000315 98d9      	CBI  0x1B,1
                +
000316 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000317 958a     +DEC R24
000318 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000319 c07d      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00031a 93aa      	ST   -Y,R26
00031b 81a8      	LD   R26,Y
00031c dfe8      	RCALL __lcd_write_nibble_G103
00031d 81e8          ld    r30,y
00031e 95e2          swap  r30
00031f 83e8          st    y,r30
000320 81a8      	LD   R26,Y
000321 dfe3      	RCALL __lcd_write_nibble_G103
                +
000322 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000323 958a     +DEC R24
000324 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000325 9621      	ADIW R28,1
000326 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000327 931a      	ST   -Y,R17
000328 930a      	ST   -Y,R16
000329 2f1a      	MOV  R17,R26
00032a 810a      	LDD  R16,Y+2
00032b 2fe1      	MOV  R30,R17
00032c e0f0      	LDI  R31,0
00032d 59ec      	SUBI R30,LOW(-__base_y_G103)
00032e 4ffe      	SBCI R31,HIGH(-__base_y_G103)
00032f 81e0      	LD   R30,Z
000330 0fe0      	ADD  R30,R16
000331 2fae      	MOV  R26,R30
000332 dfe7      	RCALL __lcd_write_data
000333 2e90      	MOV  R9,R16
000334 2e81      	MOV  R8,R17
000335 8119      	LDD  R17,Y+1
000336 8108      	LDD  R16,Y+0
000337 9623      	ADIW R28,3
000338 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000339 e0a2      	LDI  R26,LOW(2)
00033a 940e 03d0 	CALL SUBOPT_0x7
00033c e0ac      	LDI  R26,LOW(12)
00033d dfdc      	RCALL __lcd_write_data
00033e e0a1      	LDI  R26,LOW(1)
00033f 940e 03d0 	CALL SUBOPT_0x7
000341 e0e0      	LDI  R30,LOW(0)
000342 2e8e      	MOV  R8,R30
000343 2e9e      	MOV  R9,R30
000344 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000345 931a      	ST   -Y,R17
000346 2f1a      	MOV  R17,R26
000347 301a      	CPI  R17,10
000348 f011      	BREQ _0x2060005
000349 149b      	CP   R9,R11
00034a f040      	BRLO _0x2060004
                 _0x2060005:
00034b e0e0      	LDI  R30,LOW(0)
00034c 93ea      	ST   -Y,R30
00034d 9483      	INC  R8
00034e 2da8      	MOV  R26,R8
00034f dfd7      	RCALL _lcd_gotoxy
000350 301a      	CPI  R17,10
000351 f409      	BRNE _0x2060007
000352 c044      	RJMP _0x20C0001
                 _0x2060007:
                 _0x2060004:
000353 9493      	INC  R9
000354 9ad8      	SBI  0x1B,0
000355 2fa1      	MOV  R26,R17
000356 dfc3      	RCALL __lcd_write_data
000357 98d8      	CBI  0x1B,0
000358 c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000359 940e 03e0 	CALL __SAVELOCR4
00035b 019d      	MOVW R18,R26
                 _0x2060008:
00035c 01d9      	MOVW R26,R18
                +
00035d 5f2f     +SUBI R18 , LOW ( - 1 )
00035e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00035f 91ec      	LD   R30,X
000360 2f1e      	MOV  R17,R30
000361 30e0      	CPI  R30,0
000362 f019      	BREQ _0x206000A
000363 2fa1      	MOV  R26,R17
000364 dfe0      	RCALL _lcd_putchar
000365 cff6      	RJMP _0x2060008
                 _0x206000A:
000366 940e 03e7 	CALL __LOADLOCR4
000368 9624      	ADIW R28,4
000369 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00036a 931a      	ST   -Y,R17
00036b 2f1a      	MOV  R17,R26
00036c b3ea      	IN   R30,0x1A
00036d 6fe0      	ORI  R30,LOW(0xF0)
00036e bbea      	OUT  0x1A,R30
00036f 9ad1      	SBI  0x1A,1
000370 9ad0      	SBI  0x1A,0
000371 9ad3      	SBI  0x1A,3
000372 98d9      	CBI  0x1B,1
000373 98d8      	CBI  0x1B,0
000374 98db      	CBI  0x1B,3
000375 2eb1      	MOV  R11,R17
000376 2fe1      	MOV  R30,R17
000377 58e0      	SUBI R30,-LOW(128)
                +
000378 93e0 0166+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
00037a 2fe1      	MOV  R30,R17
00037b 54e0      	SUBI R30,-LOW(192)
                +
00037c 93e0 0167+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
00037e e1a4      	LDI  R26,LOW(20)
00037f e0b0      	LDI  R27,0
000380 940e 0426 	CALL _delay_ms
000382 940e 03d6 	CALL SUBOPT_0x8
000384 940e 03d6 	CALL SUBOPT_0x8
000386 940e 03d6 	CALL SUBOPT_0x8
000388 e2a0      	LDI  R26,LOW(32)
000389 df7b      	RCALL __lcd_write_nibble_G103
                +
00038a ec88     +LDI R24 , LOW ( 200 )
00038b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00038c 9701     +SBIW R24 , 1
00038d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00038e e2a8      	LDI  R26,LOW(40)
00038f df8a      	RCALL __lcd_write_data
000390 e0a4      	LDI  R26,LOW(4)
000391 df88      	RCALL __lcd_write_data
000392 e8a5      	LDI  R26,LOW(133)
000393 df86      	RCALL __lcd_write_data
000394 e0a6      	LDI  R26,LOW(6)
000395 df84      	RCALL __lcd_write_data
000396 dfa2      	RCALL _lcd_clear
                 _0x20C0001:
000397 9119      	LD   R17,Y+
000398 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __seed_G101:
000160           	.BYTE 0x4
                 __base_y_G103:
000164           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000399 27ff      	CLR  R31
00039a 2766      	CLR  R22
00039b 2777      	CLR  R23
00039c 940e 0421 	CALL __PUTPARD1
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00039f 926a      	ST   -Y,R6
0003a0 927a      	ST   -Y,R7
0003a1 924a      	ST   -Y,R4
0003a2 2da5      	MOV  R26,R5
0003a3 940c 007f 	JMP  _displayTimeOnLCD
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
0003a5 920a      	ST   -Y,R0
0003a6 921a      	ST   -Y,R1
0003a7 92fa      	ST   -Y,R15
0003a8 936a      	ST   -Y,R22
0003a9 937a      	ST   -Y,R23
0003aa 938a      	ST   -Y,R24
0003ab 939a      	ST   -Y,R25
0003ac 93aa      	ST   -Y,R26
0003ad 93ba      	ST   -Y,R27
0003ae 93ea      	ST   -Y,R30
0003af 93fa      	ST   -Y,R31
0003b0 b7ef      	IN   R30,SREG
0003b1 93ea      	ST   -Y,R30
0003b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0003b3 932a      	ST   -Y,R18
0003b4 85ad      	LDD  R26,Y+13
0003b5 85be      	LDD  R27,Y+13+1
0003b6 85ef      	LDD  R30,Y+15
0003b7 89f8      	LDD  R31,Y+15+1
0003b8 9509      	ICALL
0003b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0003ba 89e8      	LDD  R30,Y+16
0003bb 89f9      	LDD  R31,Y+16+1
0003bc 9734      	SBIW R30,4
0003bd 8be8      	STD  Y+16,R30
0003be 8bf9      	STD  Y+16+1,R31
0003bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0003c0 85ad      	LDD  R26,Y+13
0003c1 85be      	LDD  R27,Y+13+1
0003c2 85ef      	LDD  R30,Y+15
0003c3 89f8      	LDD  R31,Y+15+1
0003c4 9509      	ICALL
0003c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0003c6 89a8      	LDD  R26,Y+16
0003c7 89b9      	LDD  R27,Y+16+1
0003c8 9614      	ADIW R26,4
0003c9 91ed      	LD   R30,X+
0003ca 91fd      	LD   R31,X+
0003cb 83ee      	STD  Y+6,R30
0003cc 83ff      	STD  Y+6+1,R31
0003cd 81ae      	LDD  R26,Y+6
0003ce 81bf      	LDD  R27,Y+6+1
0003cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003d0 940e 031a 	CALL __lcd_write_data
0003d2 e0a3      	LDI  R26,LOW(3)
0003d3 e0b0      	LDI  R27,0
0003d4 940c 0426 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0003d6 e3a0      	LDI  R26,LOW(48)
0003d7 940e 0305 	CALL __lcd_write_nibble_G103
                +
0003d9 ec88     +LDI R24 , LOW ( 200 )
0003da e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003db 9701     +SBIW R24 , 1
0003dc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003dd 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0003de 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003df 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003e0 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003e1 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003e2 931a      	ST   -Y,R17
0003e3 930a      	ST   -Y,R16
0003e4 9508      	RET
                 
                 __LOADLOCR6:
0003e5 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003e6 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003e7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003e8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003e9 8119      	LDD  R17,Y+1
0003ea 8108      	LD   R16,Y
0003eb 9508      	RET
                 
                 __ADDW1R15:
0003ec 2400      	CLR  R0
0003ed 0def      	ADD  R30,R15
0003ee 1df0      	ADC  R31,R0
0003ef 9508      	RET
                 
                 __ADDW2R15:
0003f0 2400      	CLR  R0
0003f1 0daf      	ADD  R26,R15
0003f2 1db0      	ADC  R27,R0
0003f3 9508      	RET
                 
                 __ANEGW1:
0003f4 95f1      	NEG  R31
0003f5 95e1      	NEG  R30
0003f6 40f0      	SBCI R31,0
0003f7 9508      	RET
                 
                 __DIVW21U:
0003f8 2400      	CLR  R0
0003f9 2411      	CLR  R1
0003fa e190      	LDI  R25,16
                 __DIVW21U1:
0003fb 0faa      	LSL  R26
0003fc 1fbb      	ROL  R27
0003fd 1c00      	ROL  R0
0003fe 1c11      	ROL  R1
0003ff 1a0e      	SUB  R0,R30
000400 0a1f      	SBC  R1,R31
000401 f418      	BRCC __DIVW21U2
000402 0e0e      	ADD  R0,R30
000403 1e1f      	ADC  R1,R31
000404 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000405 60a1      	SBR  R26,1
                 __DIVW21U3:
000406 959a      	DEC  R25
000407 f799      	BRNE __DIVW21U1
000408 01fd      	MOVW R30,R26
000409 01d0      	MOVW R26,R0
00040a 9508      	RET
                 
                 __MODW21:
00040b 94e8      	CLT
00040c ffb7      	SBRS R27,7
00040d c004      	RJMP __MODW211
00040e 95b1      	NEG  R27
00040f 95a1      	NEG  R26
000410 40b0      	SBCI R27,0
000411 9468      	SET
                 __MODW211:
000412 fdf7      	SBRC R31,7
000413 dfe0      	RCALL __ANEGW1
000414 dfe3      	RCALL __DIVW21U
000415 01fd      	MOVW R30,R26
000416 f40e      	BRTC __MODW212
000417 dfdc      	RCALL __ANEGW1
                 __MODW212:
000418 9508      	RET
                 
                 __GETW1P:
000419 91ed      	LD   R30,X+
00041a 91fc      	LD   R31,X
00041b 9711      	SBIW R26,1
00041c 9508      	RET
                 
                 __GETW1PF:
00041d 9005      	LPM  R0,Z+
00041e 91f4      	LPM  R31,Z
00041f 2de0      	MOV  R30,R0
000420 9508      	RET
                 
                 __PUTPARD1:
000421 937a      	ST   -Y,R23
000422 936a      	ST   -Y,R22
000423 93fa      	ST   -Y,R31
000424 93ea      	ST   -Y,R30
000425 9508      	RET
                 
                 _delay_ms:
000426 9610      	adiw r26,0
000427 f039      	breq __delay_ms1
                 __delay_ms0:
000428 95a8      	wdr
                +
000429 ed80     +LDI R24 , LOW ( 0x7D0 )
00042a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00042b 9701     +SBIW R24 , 1
00042c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00042d 9711      	sbiw r26,1
00042e f7c9      	brne __delay_ms0
                 __delay_ms1:
00042f 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  22 r1 :   7 r2 :   0 r3 :   0 r4 :   6 r5 :   6 r6 :   4 r7 :   6 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  39 r17:  41 r18:  40 r19:  11 r20:  12 r21:  22 r22:   8 r23:   4 
r24:  25 r25:   9 r26: 103 r27:  36 r28:  18 r29:   1 r30: 246 r31:  71 
x  :  31 y  : 166 z  :  17 
Registers used: 29 out of 35 (82.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  28 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   1 brne  :  33 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  62 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   2 cpi   :  35 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   5 jmp   :  24 ld    :  39 ldd   :  64 ldi   : 111 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  45 movw  :  28 
mul   :   1 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   8 out   :  49 pop   :   1 push  :   1 rcall :  18 ret   :  30 
reti  :   3 rjmp  :  64 rol   :   3 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   5 sbic  :   2 sbis  :   0 sbiw  :  19 sbr   :   1 sbrc  :   3 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  69 std   :  30 sts   :   2 sub   :   2 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000860   2064     80   2144   16384  13.1%
[.dseg] 0x000060 0x000168      0      8      8    1024   0.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
