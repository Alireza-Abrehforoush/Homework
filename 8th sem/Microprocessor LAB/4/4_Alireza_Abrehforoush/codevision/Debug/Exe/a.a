;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;int capacity = 1000;

	.DSEG
;char hour = 0, minute = 0, second = 0, csec = 0;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020 // Place your code here
; 0000 0021 parking();
;PCODE: $0000000F VOL: 0
; 0000 0022 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0026 {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0027 // Place your code here
; 0000 0028 stopwatch();
;PCODE: $00000015 VOL: 0
; 0000 0029 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002D {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002E // Reinitialize Timer 0 value
; 0000 002F TCNT0=0xB2;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0030 // Place your code here
; 0000 0031 csec++;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0032 if(csec >= 100)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0033 {
; 0000 0034 csec %= 100;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0035 second++;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0036 if(second >= 60)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0037 {
; 0000 0038 second %= 60;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0039 minute++;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003A if (minute >= 60)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003B {
; 0000 003C minute %= 60;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003D hour = (hour + 1) % 24;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003E }
; 0000 003F }
;PCODE: $00000045 VOL: 0
; 0000 0040 }
;PCODE: $00000046 VOL: 0
; 0000 0041 displayTime(hour, minute, second, csec);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0042 }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;void main(void)
; 0000 0045 {
;PCODE: $00000053 VOL: 0
; 0000 0046 // Declare your local variables here
; 0000 0047 
; 0000 0048 initialize();
;PCODE: $00000054 VOL: 0
; 0000 0049 
; 0000 004A initDisplay();
;PCODE: $00000055 VOL: 0
; 0000 004B 
; 0000 004C while (1) {
;PCODE: $00000056 VOL: 0
; 0000 004D // Place your code here
; 0000 004E }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 004F }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
