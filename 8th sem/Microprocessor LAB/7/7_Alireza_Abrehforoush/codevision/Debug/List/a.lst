
AVRASM ver. 2.1.30  C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm Thu Jun 01 21:35:08 2023

C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1083): warning: Register r5 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1084): warning: Register r4 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1085): warning: Register r7 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1086): warning: Register r6 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1087): warning: Register r9 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1088): warning: Register r8 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1089): warning: Register r10 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1090): warning: Register r11 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1091): warning: Register r13 already defined by the .DEF directive
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF _buff_idx=R10
                 	.DEF _buff_idx_msb=R11
                 	.DEF __lcd_x=R13
                 	.DEF __lcd_y=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 012d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 01ac 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0201 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000038 6150
000039 7472
00003a 3220
00003b 6920      	.DB  0x50,0x61,0x72,0x74,0x20,0x32,0x20,0x69
00003c 2073
00003d 7572
00003e 6e6e
00003f 6e69      	.DB  0x73,0x20,0x72,0x75,0x6E,0x6E,0x69,0x6E
000040 2167
000041 0a0d
000042 4500
000043 746e      	.DB  0x67,0x21,0xD,0xA,0x0,0x45,0x6E,0x74
000044 7265
000045 7920
000046 756f
000047 2072      	.DB  0x65,0x72,0x20,0x79,0x6F,0x75,0x72,0x20
000048 7566
000049 6c6c
00004a 616e
00004b 656d      	.DB  0x66,0x75,0x6C,0x6C,0x6E,0x61,0x6D,0x65
00004c 203a
00004d 0a0d
00004e 2500
00004f 0073      	.DB  0x3A,0x20,0xD,0xA,0x0,0x25,0x73,0x0
000050 7325
000051 0a0d
000052 5000
000053 7261      	.DB  0x25,0x73,0xD,0xA,0x0,0x50,0x61,0x72
000054 2074
000055 2032
000056 7369
000057 6520      	.DB  0x74,0x20,0x32,0x20,0x69,0x73,0x20,0x65
000058 646e
000059 6e69
00005a 2167
00005b 0a0d      	.DB  0x6E,0x64,0x69,0x6E,0x67,0x21,0xD,0xA
00005c 5000
00005d 7261
00005e 2074
00005f 2033      	.DB  0x0,0x50,0x61,0x72,0x74,0x20,0x33,0x20
000060 7369
000061 7220
000062 6e75
000063 696e      	.DB  0x69,0x73,0x20,0x72,0x75,0x6E,0x6E,0x69
000064 676e
000065 0d21
000066 000a      	.DB  0x6E,0x67,0x21,0xD,0xA,0x0
                 _0x20016:
000067 006e
000068 012c
000069 0258
00006a 04b0      	.DB  0x6E,0x0,0x2C,0x1,0x58,0x2,0xB0,0x4
00006b 0960
00006c 12c0
00006d 2580
00006e 3840      	.DB  0x60,0x9,0xC0,0x12,0x80,0x25,0x40,0x38
00006f 4b00
000070 9600
000071 dac0
000072 e100      	.DB  0x0,0x4B,0x0,0x96,0xC0,0xDA,0x0,0xE1
000073 c200      	.DB  0x0,0xC2
                 _0x2002D:
000074 0000
000075 0001
000076 0002
000077 0003      	.DB  0x0,0x0,0x1,0x0,0x2,0x0,0x3,0x0
000078 0004
000079 0005
00007a 0006
00007b 0007      	.DB  0x4,0x0,0x5,0x0,0x6,0x0,0x7,0x0
00007c 0008
C:\Users\Alireza\Desktop\HW\Homework\8th sem\Microprocessor LAB\7\7_Alireza_Abrehforoush\codevision\Debug\List\a.asm(1159): warning: .cseg .db misalignment - padding zero byte
00007d 0009      	.DB  0x8,0x0,0x9
                 _0x20000:
00007e 0a0d
00007f 6425
000080 0a0d
000081 4c00      	.DB  0xD,0xA,0x25,0x64,0xD,0xA,0x0,0x4C
000082 4443
000083 4420
000084 6c65
000085 7465      	.DB  0x43,0x44,0x20,0x44,0x65,0x6C,0x65,0x74
000086 6465
000087 0021
000088 694d
000089 7263      	.DB  0x65,0x64,0x21,0x0,0x4D,0x69,0x63,0x72
00008a 706f
00008b 6f72
00008c 6563
00008d 7373      	.DB  0x6F,0x70,0x72,0x6F,0x63,0x65,0x73,0x73
00008e 726f
00008f 6c0a
000090 6261
000091 4500      	.DB  0x6F,0x72,0xA,0x6C,0x61,0x62,0x0,0x45
000092 444e
000093 6f20
000094 2066
000095 6874      	.DB  0x4E,0x44,0x20,0x6F,0x66,0x20,0x74,0x68
000096 7369
000097 7020
000098 7261
000099 0074      	.DB  0x69,0x73,0x20,0x70,0x61,0x72,0x74,0x0
00009a 6150
00009b 7472
00009c 3320
00009d 6920      	.DB  0x50,0x61,0x72,0x74,0x20,0x33,0x20,0x69
00009e 2073
00009f 6e65
0000a0 6964
0000a1 676e      	.DB  0x73,0x20,0x65,0x6E,0x64,0x69,0x6E,0x67
0000a2 0d21
0000a3 000a
0000a4 6e69
0000a5 7570      	.DB  0x21,0xD,0xA,0x0,0x69,0x6E,0x70,0x75
0000a6 2074
0000a7 656c
0000a8 7474
0000a9 7265      	.DB  0x74,0x20,0x6C,0x65,0x74,0x74,0x65,0x72
0000aa 6920
0000ab 2073
0000ac 0027
0000ad 6150      	.DB  0x20,0x69,0x73,0x20,0x27,0x0,0x50,0x61
0000ae 7472
0000af 3420
0000b0 6920
0000b1 2073      	.DB  0x72,0x74,0x20,0x34,0x20,0x69,0x73,0x20
0000b2 7572
0000b3 6e6e
0000b4 6e69
0000b5 2167      	.DB  0x72,0x75,0x6E,0x6E,0x69,0x6E,0x67,0x21
0000b6 0a0d
0000b7 4900
0000b8 636e
0000b9 726f      	.DB  0xD,0xA,0x0,0x49,0x6E,0x63,0x6F,0x72
0000ba 6572
0000bb 7463
0000bc 6620
0000bd 6172      	.DB  0x72,0x65,0x63,0x74,0x20,0x66,0x72,0x61
0000be 656d
0000bf 7320
0000c0 7a69
0000c1 2165      	.DB  0x6D,0x65,0x20,0x73,0x69,0x7A,0x65,0x21
0000c2 540a
0000c3 6568
0000c4 6620
0000c5 6172      	.DB  0xA,0x54,0x68,0x65,0x20,0x66,0x72,0x61
0000c6 656d
0000c7 6d20
0000c8 7375
0000c9 2074      	.DB  0x6D,0x65,0x20,0x6D,0x75,0x73,0x74,0x20
0000ca 6562
0000cb 3520
0000cc 6920
0000cd 746e      	.DB  0x62,0x65,0x20,0x35,0x20,0x69,0x6E,0x74
0000ce 6765
0000cf 7265
0000d0 0073
0000d1 6e49      	.DB  0x65,0x67,0x65,0x72,0x73,0x0,0x49,0x6E
0000d2 6f63
0000d3 7272
0000d4 6365
0000d5 2074      	.DB  0x63,0x6F,0x72,0x72,0x65,0x63,0x74,0x20
0000d6 7266
0000d7 6d61
0000d8 2065
0000d9 6973      	.DB  0x66,0x72,0x61,0x6D,0x65,0x20,0x73,0x69
0000da 657a
0000db 0d21
0000dc 540a
0000dd 6568      	.DB  0x7A,0x65,0x21,0xD,0xA,0x54,0x68,0x65
0000de 6620
0000df 6172
0000e0 656d
0000e1 6d20      	.DB  0x20,0x66,0x72,0x61,0x6D,0x65,0x20,0x6D
0000e2 7375
0000e3 2074
0000e4 6562
0000e5 3520      	.DB  0x75,0x73,0x74,0x20,0x62,0x65,0x20,0x35
0000e6 6920
0000e7 746e
0000e8 6765
0000e9 7265      	.DB  0x20,0x69,0x6E,0x74,0x65,0x67,0x65,0x72
0000ea 0d73
0000eb 000a
0000ec 6854
0000ed 2065      	.DB  0x73,0xD,0xA,0x0,0x54,0x68,0x65,0x20
0000ee 7266
0000ef 6d61
0000f0 2065
0000f1 7369      	.DB  0x66,0x72,0x61,0x6D,0x65,0x20,0x69,0x73
0000f2 6320
0000f3 726f
0000f4 6572
0000f5 7463      	.DB  0x20,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
0000f6 5400
0000f7 6568
0000f8 6620
0000f9 6172      	.DB  0x0,0x54,0x68,0x65,0x20,0x66,0x72,0x61
0000fa 656d
0000fb 6920
0000fc 2073
0000fd 6f63      	.DB  0x6D,0x65,0x20,0x69,0x73,0x20,0x63,0x6F
0000fe 7272
0000ff 6365
000100 0d74
000101 000a      	.DB  0x72,0x72,0x65,0x63,0x74,0xD,0xA,0x0
                 _0x40003:
000102 2020
000103 2020
000104 2020
000105 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000106 2020
000107 2020
000108 2020
000109 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
                 _0x2000003:
00010a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00010b 0001      	.DW  0x01
00010c 0002      	.DW  0x02
00010d 0066      	.DW  __REG_BIT_VARS*2
                 
00010e 0008      	.DW  0x08
00010f 0004      	.DW  0x04
000110 0068      	.DW  __REG_VARS*2
                 
000111 001a      	.DW  0x1A
000112 027f      	.DW  _baud_list
000113 00ce      	.DW  _0x20016*2
                 
000114 000d      	.DW  0x0D
000115 0160      	.DW  _0x20023
000116 0103      	.DW  _0x20000*2+7
                 
000117 0013      	.DW  0x13
000118 016d      	.DW  _0x20023+13
000119 0110      	.DW  _0x20000*2+20
                 
00011a 0011      	.DW  0x11
00011b 0180      	.DW  _0x20023+32
00011c 0123      	.DW  _0x20000*2+39
                 
00011d 0012      	.DW  0x12
00011e 0191      	.DW  _0x20023+49
00011f 0148      	.DW  _0x20000*2+76
                 
000120 0002      	.DW  0x02
000121 01a3      	.DW  _0x20023+67
000122 0158      	.DW  _0x20000*2+92
                 
000123 0033      	.DW  0x33
000124 01a5      	.DW  _0x20030
000125 016f      	.DW  _0x20000*2+115
                 
000126 0015      	.DW  0x15
000127 01d8      	.DW  _0x20030+51
000128 01d8      	.DW  _0x20000*2+220
                 
000129 0002      	.DW  0x02
00012a 0299      	.DW  __base_y_G100
00012b 0214      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00012c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00012d 94f8      	CLI
00012e 27ee      	CLR  R30
00012f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000130 e0f1      	LDI  R31,1
000131 bffb      	OUT  GICR,R31
000132 bfeb      	OUT  GICR,R30
000133 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000134 e08d      	LDI  R24,(14-2)+1
000135 e0a2      	LDI  R26,2
000136 27bb      	CLR  R27
                 __CLEAR_REG:
000137 93ed      	ST   X+,R30
000138 958a      	DEC  R24
000139 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00013a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00013b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00013c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00013d 93ed      	ST   X+,R30
00013e 9701      	SBIW R24,1
00013f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000140 e1e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000141 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000142 9185      	LPM  R24,Z+
000143 9195      	LPM  R25,Z+
000144 9700      	SBIW R24,0
000145 f061      	BREQ __GLOBAL_INI_END
000146 91a5      	LPM  R26,Z+
000147 91b5      	LPM  R27,Z+
000148 9005      	LPM  R0,Z+
000149 9015      	LPM  R1,Z+
00014a 01bf      	MOVW R22,R30
00014b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00014c 9005      	LPM  R0,Z+
00014d 920d      	ST   X+,R0
00014e 9701      	SBIW R24,1
00014f f7e1      	BRNE __GLOBAL_INI_LOOP
000150 01fb      	MOVW R30,R22
000151 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000152 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000153 bfed      	OUT  SPL,R30
000154 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000155 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000156 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000157 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000158 940c 015a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;void main(void)
                 ; 0000 001A {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001B char sss[100]; // Adjust the size according to your needs
                 ; 0000 001C char left[] = "<<";
                 ; 0000 001D char right[] = ">>";
                 ; 0000 001E 
                 ; 0000 001F initialize();
00015a 97ef      	SBIW R28,63
00015b 97ab      	SBIW R28,43
00015c e3ee      	LDI  R30,LOW(62)
00015d 83e8      	ST   Y,R30
00015e 83e9      	STD  Y+1,R30
00015f e0e0      	LDI  R30,LOW(0)
000160 83ea      	STD  Y+2,R30
000161 e3ec      	LDI  R30,LOW(60)
000162 83eb      	STD  Y+3,R30
000163 83ec      	STD  Y+4,R30
000164 e0e0      	LDI  R30,LOW(0)
000165 83ed      	STD  Y+5,R30
                 ;	sss -> Y+6
                 ;	left -> Y+3
                 ;	right -> Y+0
000166 940e 0307 	CALL _initialize
                 ; 0000 0020 
                 ; 0000 0021 set_baudrate(9600);
000168 e8a0      	LDI  R26,LOW(9600)
000169 e2b5      	LDI  R27,HIGH(9600)
00016a d0c8      	RCALL _set_baudrate
                 ; 0000 0022 // Declare your local variables here
                 ; 0000 0023 
                 ; 0000 0024 // Global enable interrupts
                 ; 0000 0025 #asm("sei")
00016b 9478      	SEI
                 ; 0000 0026 USART_Enable_Intrupt();
00016c 940e 031c 	CALL _USART_Enable_Intrupt
                 ; 0000 0027 printf("Part 2 is running!\r\n");
                +
00016e e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00016f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000170 940e 06eb 	CALL SUBOPT_0x0
                 ; 0000 0028 printf("Enter your fullname: \r\n");
                +
000172 e8e5     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
000173 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
000174 940e 06eb 	CALL SUBOPT_0x0
                 ; 0000 0029 strcpy(sss, left); // Copy the left string into the buffer
000176 940e 06f2 	CALL SUBOPT_0x1
000178 01de      	MOVW R26,R28
000179 9615      	ADIW R26,5
00017a 940e 06a2 	CALL _strcpy
                 ; 0000 002A scanf("%s", buff);
                +
00017c e9ed     +LDI R30 , LOW ( 2 * _0x0 + ( 45 ) )
00017d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 45 ) )
                 	__POINTW1FN _0x0,45
00017e 940e 06f7 	CALL SUBOPT_0x2
000180 940e 0674 	CALL _scanf
000182 9626      	ADIW R28,6
                 ; 0000 002B strcat(sss, buff); // Concatenate the right string to the buffer
000183 940e 06f2 	CALL SUBOPT_0x1
000185 eead      	LDI  R26,LOW(_buff)
000186 e0b1      	LDI  R27,HIGH(_buff)
000187 940e 0691 	CALL _strcat
                 ; 0000 002C strcat(sss, right);
000189 940e 06f2 	CALL SUBOPT_0x1
00018b 01de      	MOVW R26,R28
00018c 9612      	ADIW R26,2
00018d 940e 0691 	CALL _strcat
                 ; 0000 002D 
                 ; 0000 002E lcd_clear();
00018f 940e 0350 	CALL _lcd_clear
                 ; 0000 002F lcd_puts(sss);
000191 01de      	MOVW R26,R28
000192 9616      	ADIW R26,6
000193 940e 0373 	CALL _lcd_puts
                 ; 0000 0030 printf("%s\r\n", buff);
                +
000195 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 48 ) )
000196 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 48 ) )
                 	__POINTW1FN _0x0,48
000197 940e 06f7 	CALL SUBOPT_0x2
000199 940e 04fc 	CALL _printf
00019b 9626      	ADIW R28,6
                 ; 0000 0031 printf("Part 2 is ending!\r\n");
                +
00019c eae5     +LDI R30 , LOW ( 2 * _0x0 + ( 53 ) )
00019d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW1FN _0x0,53
00019e 940e 06eb 	CALL SUBOPT_0x0
                 ; 0000 0032 
                 ; 0000 0033 printf("Part 3 is running!\r\n");
                +
0001a0 ebe9     +LDI R30 , LOW ( 2 * _0x0 + ( 73 ) )
0001a1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 73 ) )
                 	__POINTW1FN _0x0,73
0001a2 940e 06eb 	CALL SUBOPT_0x0
                 ; 0000 0034 part = 3;
0001a4 e0e3      	LDI  R30,LOW(3)
0001a5 e0f0      	LDI  R31,HIGH(3)
0001a6 93e0 026d 	STS  _part,R30
0001a8 93f0 026e 	STS  _part+1,R31
                 ; 0000 0035 
                 ; 0000 0036 while (1)
                 _0x3:
                 ; 0000 0037 {
                 ; 0000 0038 // Place your code here
                 ; 0000 0039 
                 ; 0000 003A }
0001aa cfff      	RJMP _0x3
                 ; 0000 003B }
                 _0x6:
0001ab cfff      	RJMP _0x6
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;unsigned char rx_counter=0;
                 ;unsigned int rx_counter=0;
                 ;bit rx_buffer_overflow;
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0001 001E {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0001ac 920a      	ST   -Y,R0
0001ad 921a      	ST   -Y,R1
0001ae 92fa      	ST   -Y,R15
0001af 936a      	ST   -Y,R22
0001b0 937a      	ST   -Y,R23
0001b1 938a      	ST   -Y,R24
0001b2 939a      	ST   -Y,R25
0001b3 93aa      	ST   -Y,R26
0001b4 93ba      	ST   -Y,R27
0001b5 93ea      	ST   -Y,R30
0001b6 93fa      	ST   -Y,R31
0001b7 b7ef      	IN   R30,SREG
0001b8 93ea      	ST   -Y,R30
                 ; 0001 001F char status,data;
                 ; 0001 0020 status=UCSRA;
0001b9 931a      	ST   -Y,R17
0001ba 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001bb b11b      	IN   R17,11
                 ; 0001 0021 data=UDR;
0001bc b10c      	IN   R16,12
                 ; 0001 0022 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0001bd 2fe1      	MOV  R30,R17
0001be 71ec      	ANDI R30,LOW(0x1C)
0001bf f489      	BRNE _0x20003
                 ; 0001 0023 {
                 ; 0001 0024 rx_buffer[rx_wr_index++]=data;
0001c0 2de5      	MOV  R30,R5
0001c1 9453      	INC  R5
0001c2 e0f0      	LDI  R31,0
0001c3 59e1      	SUBI R30,LOW(-_rx_buffer)
0001c4 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0001c5 8300      	ST   Z,R16
                 ; 0001 0025 #if RX_BUFFER_SIZE == 256
                 ; 0001 0026 // special case for receiver buffer size=256
                 ; 0001 0027 if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0001 0028 #else
                 ; 0001 0029 if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0001c6 e0e8      	LDI  R30,LOW(8)
0001c7 15e5      	CP   R30,R5
0001c8 f409      	BRNE _0x20004
0001c9 2455      	CLR  R5
                 ; 0001 002A if (++rx_counter == RX_BUFFER_SIZE)
                 _0x20004:
0001ca 9473      	INC  R7
0001cb e0e8      	LDI  R30,LOW(8)
0001cc 15e7      	CP   R30,R7
0001cd f419      	BRNE _0x20005
                 ; 0001 002B {
                 ; 0001 002C rx_counter=0;
0001ce 2477      	CLR  R7
                 ; 0001 002D rx_buffer_overflow=1;
0001cf 9468      	SET
0001d0 f820      	BLD  R2,0
                 ; 0001 002E }
                 ; 0001 002F #endif
                 ; 0001 0030 }
                 _0x20005:
                 ; 0001 0031 
                 ; 0001 0032 if(part == 3) question3();
                 _0x20003:
0001d1 91a0 026d 	LDS  R26,_part
0001d3 91b0 026e 	LDS  R27,_part+1
0001d5 9713      	SBIW R26,3
0001d6 f409      	BRNE _0x20006
0001d7 d09b      	RCALL _question3
                 ; 0001 0033 if(part == 4) question4();
                 _0x20006:
0001d8 91a0 026d 	LDS  R26,_part
0001da 91b0 026e 	LDS  R27,_part+1
0001dc 9714      	SBIW R26,4
0001dd f409      	BRNE _0x20007
0001de d0f2      	RCALL _question4
                 ; 0001 0034 }
                 _0x20007:
0001df 9109      	LD   R16,Y+
0001e0 9119      	LD   R17,Y+
0001e1 91e9      	LD   R30,Y+
0001e2 bfef      	OUT  SREG,R30
0001e3 91f9      	LD   R31,Y+
0001e4 91e9      	LD   R30,Y+
0001e5 91b9      	LD   R27,Y+
0001e6 91a9      	LD   R26,Y+
0001e7 9199      	LD   R25,Y+
0001e8 9189      	LD   R24,Y+
0001e9 9179      	LD   R23,Y+
0001ea 9169      	LD   R22,Y+
0001eb 90f9      	LD   R15,Y+
0001ec 9019      	LD   R1,Y+
0001ed 9009      	LD   R0,Y+
0001ee 9518      	RETI
                 ; .FEND
                 ;char getchar(void)
                 ; 0001 003B {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0001 003C char data;
                 ; 0001 003D while (rx_counter==0);
0001ef 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x20008:
0001f0 2077      	TST  R7
0001f1 f3f1      	BREQ _0x20008
                 ; 0001 003E data=rx_buffer[rx_rd_index++];
0001f2 2de4      	MOV  R30,R4
0001f3 9443      	INC  R4
0001f4 e0f0      	LDI  R31,0
0001f5 59e1      	SUBI R30,LOW(-_rx_buffer)
0001f6 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0001f7 8110      	LD   R17,Z
                 ; 0001 003F #if RX_BUFFER_SIZE != 256
                 ; 0001 0040 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0001f8 e0e8      	LDI  R30,LOW(8)
0001f9 15e4      	CP   R30,R4
0001fa f409      	BRNE _0x2000B
0001fb 2444      	CLR  R4
                 ; 0001 0041 #endif
                 ; 0001 0042 #asm("cli")
                 _0x2000B:
0001fc 94f8      	CLI
                 ; 0001 0043 --rx_counter;
0001fd 947a      	DEC  R7
                 ; 0001 0044 #asm("sei")
0001fe 9478      	SEI
                 ; 0001 0045 return data;
0001ff 2fe1      	MOV  R30,R17
000200 c0ce      	RJMP _0x2080006
                 ; 0001 0046 }
                 ; .FEND
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;unsigned char tx_counter=0;
                 ;unsigned int tx_counter=0;
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0001 005C {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000201 93ea      	ST   -Y,R30
000202 93fa      	ST   -Y,R31
000203 b7ef      	IN   R30,SREG
000204 93ea      	ST   -Y,R30
                 ; 0001 005D if (tx_counter)
000205 2088      	TST  R8
000206 f061      	BREQ _0x2000C
                 ; 0001 005E {
                 ; 0001 005F --tx_counter;
000207 948a      	DEC  R8
                 ; 0001 0060 UDR=tx_buffer[tx_rd_index++];
000208 2de9      	MOV  R30,R9
000209 9493      	INC  R9
00020a e0f0      	LDI  R31,0
00020b 58e9      	SUBI R30,LOW(-_tx_buffer)
00020c 4ffd      	SBCI R31,HIGH(-_tx_buffer)
00020d 81e0      	LD   R30,Z
00020e b9ec      	OUT  0xC,R30
                 ; 0001 0061 #if TX_BUFFER_SIZE != 256
                 ; 0001 0062 if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
00020f e0e8      	LDI  R30,LOW(8)
000210 15e9      	CP   R30,R9
000211 f409      	BRNE _0x2000D
000212 2499      	CLR  R9
                 ; 0001 0063 #endif
                 ; 0001 0064 }
                 _0x2000D:
                 ; 0001 0065 }
                 _0x2000C:
000213 91e9      	LD   R30,Y+
000214 bfef      	OUT  SREG,R30
000215 91f9      	LD   R31,Y+
000216 91e9      	LD   R30,Y+
000217 9518      	RETI
                 ; .FEND
                 ;void putchar(char c)
                 ; 0001 006C {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0001 006D while (tx_counter == TX_BUFFER_SIZE);
000218 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x2000E:
000219 e0e8      	LDI  R30,LOW(8)
00021a 15e8      	CP   R30,R8
00021b f3e9      	BREQ _0x2000E
                 ; 0001 006E #asm("cli")
00021c 94f8      	CLI
                 ; 0001 006F if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY) == 0))
00021d 2088      	TST  R8
00021e f411      	BRNE _0x20012
00021f 995d      	SBIC 0xB,5
000220 c00d      	RJMP _0x20011
                 _0x20012:
                 ; 0001 0070 {
                 ; 0001 0071 tx_buffer[tx_wr_index++] = c;
000221 2de6      	MOV  R30,R6
000222 9463      	INC  R6
000223 e0f0      	LDI  R31,0
000224 58e9      	SUBI R30,LOW(-_tx_buffer)
000225 4ffd      	SBCI R31,HIGH(-_tx_buffer)
000226 81a8      	LD   R26,Y
000227 83a0      	STD  Z+0,R26
                 ; 0001 0072 #if TX_BUFFER_SIZE != 256
                 ; 0001 0073 if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index = 0;
000228 e0e8      	LDI  R30,LOW(8)
000229 15e6      	CP   R30,R6
00022a f409      	BRNE _0x20014
00022b 2466      	CLR  R6
                 ; 0001 0074 #endif
                 ; 0001 0075 ++tx_counter;
                 _0x20014:
00022c 9483      	INC  R8
                 ; 0001 0076 }
                 ; 0001 0077 else
00022d c002      	RJMP _0x20015
                 _0x20011:
                 ; 0001 0078 UDR = c;
00022e 81e8      	LD   R30,Y
00022f b9ec      	OUT  0xC,R30
                 ; 0001 0079 #asm("sei")
                 _0x20015:
000230 9478      	SEI
                 ; 0001 007A }
000231 940c 03b0 	JMP  _0x2080004
                 ; .FEND
                 ;int baud_list[] = {110, 300, 600, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 5 ...
                 
                 	.DSEG
                 ;char lcd[17];
                 ;int buff_idx = 0;
                 ;void set_baudrate(int br)
                 ; 0001 0082 {
                 
                 	.CSEG
                 _set_baudrate:
                 ; .FSTART _set_baudrate
                 ; 0001 0083 int i;
                 ; 0001 0084 int ubr;
                 ; 0001 0085 for(i = 0; i < sizeof(baud_list) / sizeof(int); i++)
000233 93ba      	ST   -Y,R27
000234 93aa      	ST   -Y,R26
000235 940e 0752 	CALL __SAVELOCR4
                 ;	br -> Y+4
                 ;	i -> R16,R17
                 ;	ubr -> R18,R19
                +
000237 e000     +LDI R16 , LOW ( 0 )
000238 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20018:
                +
000239 300d     +CPI R16 , LOW ( 13 )
00023a e0e0     +LDI R30 , HIGH ( 13 )
00023b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,13
00023c f48c      	BRGE _0x20019
                 ; 0001 0086 {
                 ; 0001 0087 if(br == baud_list[i]) break;
00023d 01f8      	MOVW R30,R16
00023e e7af      	LDI  R26,LOW(_baud_list)
00023f e0b2      	LDI  R27,HIGH(_baud_list)
000240 0fee      	LSL  R30
000241 1fff      	ROL  R31
000242 0fae      	ADD  R26,R30
000243 1fbf      	ADC  R27,R31
000244 91ed      	LD   R30,X+
000245 91fd      	LD   R31,X+
000246 81ac      	LDD  R26,Y+4
000247 81bd      	LDD  R27,Y+4+1
000248 17ea      	CP   R30,R26
000249 07fb      	CPC  R31,R27
00024a f019      	BREQ _0x20019
                 ; 0001 0088 }
                +
00024b 5f0f     +SUBI R16 , LOW ( - 1 )
00024c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00024d cfeb      	RJMP _0x20018
                 _0x20019:
                 ; 0001 0089 if(i == sizeof(baud_list) / sizeof(int))
00024e e0ed      	LDI  R30,LOW(13)
00024f e0f0      	LDI  R31,HIGH(13)
000250 17e0      	CP   R30,R16
000251 07f1      	CPC  R31,R17
000252 f439      	BRNE _0x2001B
                 ; 0001 008A {
                 ; 0001 008B //Wrong Input
                 ; 0001 008C //Setting BR to 9600
                 ; 0001 008D UBRRH=0x00;
000253 e0e0      	LDI  R30,LOW(0)
000254 bde0      	OUT  0x20,R30
                 ; 0001 008E UBRRL=0x33;
000255 e3e3      	LDI  R30,LOW(51)
000256 b9e9      	OUT  0x9,R30
                 ; 0001 008F return;
000257 940e 0759 	CALL __LOADLOCR4
000259 c0ab      	RJMP _0x2080005
                 ; 0001 0090 }
                 ; 0001 0091 ubr = (8000000 / (16 * (long)br)) - 1;
                 _0x2001B:
00025a 81ec      	LDD  R30,Y+4
00025b 81fd      	LDD  R31,Y+4+1
00025c 940e 0776 	CALL __CWD1
                +
00025e e1a0     +LDI R26 , LOW ( 0x10 )
00025f e0b0     +LDI R27 , HIGH ( 0x10 )
000260 e080     +LDI R24 , BYTE3 ( 0x10 )
000261 e090     +LDI R25 , BYTE4 ( 0x10 )
                 	__GETD2N 0x10
000262 940e 07a8 	CALL __MULD12
                +
000264 e0a0     +LDI R26 , LOW ( 0x7A1200 )
000265 e1b2     +LDI R27 , HIGH ( 0x7A1200 )
000266 e78a     +LDI R24 , BYTE3 ( 0x7A1200 )
000267 e090     +LDI R25 , BYTE4 ( 0x7A1200 )
                 	__GETD2N 0x7A1200
000268 940e 07d1 	CALL __DIVD21
00026a 9731      	SBIW R30,1
00026b 019f      	MOVW R18,R30
                 ; 0001 0092 UBRRH = ubr & 0xff00;
00026c 70e0      	ANDI R30,LOW(0x0)
00026d bde0      	OUT  0x20,R30
                 ; 0001 0093 UBRRL = ubr & 0x00ff;
00026e 2fe2      	MOV  R30,R18
00026f b9e9      	OUT  0x9,R30
                 ; 0001 0094 }
000270 940e 0759 	CALL __LOADLOCR4
000272 c092      	RJMP _0x2080005
                 ; .FEND
                 ;void question3()
                 ; 0001 0098 {
                 _question3:
                 ; .FSTART _question3
                 ; 0001 0099 char c;
                 ; 0001 009A c = getchar();
000273 931a      	ST   -Y,R17
                 ;	c -> R17
000274 df7a      	RCALL _getchar
000275 2f1e      	MOV  R17,R30
                 ; 0001 009B if(c >= '0' && c <= '9')
000276 3310      	CPI  R17,48
000277 f010      	BRLO _0x2001D
000278 331a      	CPI  R17,58
000279 f008      	BRLO _0x2001E
                 _0x2001D:
00027a c014      	RJMP _0x2001C
                 _0x2001E:
                 ; 0001 009C {
                 ; 0001 009D printf("\r\n%d\r\n", (c - '0') * 10);
                +
00027b efec     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
00027c e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
00027d 93fa      	ST   -Y,R31
00027e 93ea      	ST   -Y,R30
00027f 2fe1      	MOV  R30,R17
000280 e0f0      	LDI  R31,0
000281 97f0      	SBIW R30,48
000282 e0aa      	LDI  R26,LOW(10)
000283 e0b0      	LDI  R27,HIGH(10)
000284 940e 07a3 	CALL __MULW12
000286 940e 0776 	CALL __CWD1
000288 940e 07f8 	CALL __PUTPARD1
00028a e084      	LDI  R24,4
00028b 940e 04fc 	CALL _printf
00028d 9626      	ADIW R28,6
                 ; 0001 009E }
                 ; 0001 009F else if(c == 'd' || c == 'D')
00028e c040      	RJMP _0x2001F
                 _0x2001C:
00028f 3614      	CPI  R17,100
000290 f011      	BREQ _0x20021
000291 3414      	CPI  R17,68
000292 f459      	BRNE _0x20020
                 _0x20021:
                 ; 0001 00A0 {
                 ; 0001 00A1 lcd_clear();
000293 940e 0350 	CALL _lcd_clear
                 ; 0001 00A2 lcd_puts("LCD Deleted!");
                +
000295 e6a0     +LDI R26 , LOW ( _0x20023 + ( 0 ) )
000296 e0b1     +LDI R27 , HIGH ( _0x20023 + ( 0 ) )
                 	__POINTW2MN _0x20023,0
000297 940e 0373 	CALL _lcd_puts
                 ; 0001 00A3 printf("\r\n");
                +
000299 e0e0     +LDI R30 , LOW ( 2 * _0x20000 + ( 4 ) )
00029a e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 4 ) )
                 	__POINTW1FN _0x20000,4
00029b 940e 06eb 	CALL SUBOPT_0x0
                 ; 0001 00A4 }
                 ; 0001 00A5 else if(c == 'h' || c == 'H')
00029d c031      	RJMP _0x20024
                 _0x20020:
00029e 3618      	CPI  R17,104
00029f f011      	BREQ _0x20026
0002a0 3418      	CPI  R17,72
0002a1 f439      	BRNE _0x20025
                 _0x20026:
                 ; 0001 00A6 {
                 ; 0001 00A7 lcd_clear();
0002a2 940e 0350 	CALL _lcd_clear
                 ; 0001 00A8 lcd_puts("Microprocessor\nlab");
                +
0002a4 e6ad     +LDI R26 , LOW ( _0x20023 + ( 13 ) )
0002a5 e0b1     +LDI R27 , HIGH ( _0x20023 + ( 13 ) )
                 	__POINTW2MN _0x20023,13
0002a6 940e 0373 	CALL _lcd_puts
                 ; 0001 00A9 }
                 ; 0001 00AA else if(c == 'e' || c == 'E')
0002a8 c026      	RJMP _0x20028
                 _0x20025:
0002a9 3615      	CPI  R17,101
0002aa f011      	BREQ _0x2002A
0002ab 3415      	CPI  R17,69
0002ac f459      	BRNE _0x20029
                 _0x2002A:
                 ; 0001 00AB {
                 ; 0001 00AC lcd_clear();
0002ad 940e 0350 	CALL _lcd_clear
                 ; 0001 00AD lcd_puts("END of this part");
                +
0002af e8a0     +LDI R26 , LOW ( _0x20023 + ( 32 ) )
0002b0 e0b1     +LDI R27 , HIGH ( _0x20023 + ( 32 ) )
                 	__POINTW2MN _0x20023,32
0002b1 940e 0373 	CALL _lcd_puts
                 ; 0001 00AE printf("Part 3 is ending!\r\n");
                +
0002b3 e3e4     +LDI R30 , LOW ( 2 * _0x20000 + ( 56 ) )
0002b4 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 56 ) )
                 	__POINTW1FN _0x20000,56
0002b5 940e 06eb 	CALL SUBOPT_0x0
                 ; 0001 00AF }
                 ; 0001 00B0 else
0002b7 c017      	RJMP _0x2002C
                 _0x20029:
                 ; 0001 00B1 {
                 ; 0001 00B2 lcd_clear();
0002b8 940e 0350 	CALL _lcd_clear
                 ; 0001 00B3 lcd_puts("input letter is \'");
                +
0002ba e9a1     +LDI R26 , LOW ( _0x20023 + ( 49 ) )
0002bb e0b1     +LDI R27 , HIGH ( _0x20023 + ( 49 ) )
                 	__POINTW2MN _0x20023,49
0002bc 940e 0373 	CALL _lcd_puts
                 ; 0001 00B4 lcd_putchar(c);
0002be 2fa1      	MOV  R26,R17
0002bf 940e 035c 	CALL _lcd_putchar
                 ; 0001 00B5 lcd_puts("\'");
                +
0002c1 eaa3     +LDI R26 , LOW ( _0x20023 + ( 67 ) )
0002c2 e0b1     +LDI R27 , HIGH ( _0x20023 + ( 67 ) )
                 	__POINTW2MN _0x20023,67
0002c3 940e 0373 	CALL _lcd_puts
                 ; 0001 00B6 
                 ; 0001 00B7 printf("Part 4 is running!\r\n");
                +
0002c5 e5ea     +LDI R30 , LOW ( 2 * _0x20000 + ( 94 ) )
0002c6 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 94 ) )
                 	__POINTW1FN _0x20000,94
0002c7 940e 06eb 	CALL SUBOPT_0x0
                 ; 0001 00B8 part = 4;
0002c9 e0e4      	LDI  R30,LOW(4)
0002ca e0f0      	LDI  R31,HIGH(4)
0002cb 93e0 026d 	STS  _part,R30
0002cd 93f0 026e 	STS  _part+1,R31
                 ; 0001 00B9 }
                 _0x2002C:
                 _0x20028:
                 _0x20024:
                 _0x2001F:
                 ; 0001 00BA }
                 _0x2080006:
0002cf 9119      	LD   R17,Y+
0002d0 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20023:
000160           	.BYTE 0x45
                 ;int numbers[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
                 ;void question4()
                 ; 0001 00BE {
                 
                 	.CSEG
                 _question4:
                 ; .FSTART _question4
                 ; 0001 00BF char c;
                 ; 0001 00C0 int i, j;
                 ; 0001 00C1 c = getchar();
0002d1 940e 0750 	CALL __SAVELOCR6
                 ;	c -> R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
0002d3 df1b      	RCALL _getchar
0002d4 2f1e      	MOV  R17,R30
                 ; 0001 00C2 buff[buff_idx] = c;
0002d5 01f5      	MOVW R30,R10
0002d6 51e3      	SUBI R30,LOW(-_buff)
0002d7 4ffe      	SBCI R31,HIGH(-_buff)
0002d8 8310      	ST   Z,R17
                 ; 0001 00C3 buff_idx++;
0002d9 01f5      	MOVW R30,R10
0002da 9631      	ADIW R30,1
0002db 015f      	MOVW R10,R30
                 ; 0001 00C4 if(c == ')')
0002dc 3219      	CPI  R17,41
0002dd f529      	BRNE _0x2002E
                 ; 0001 00C5 {
                 ; 0001 00C6 buff[buff_idx] = '\0';
0002de eead      	LDI  R26,LOW(_buff)
0002df e0b1      	LDI  R27,HIGH(_buff)
0002e0 0daa      	ADD  R26,R10
0002e1 1dbb      	ADC  R27,R11
0002e2 e0e0      	LDI  R30,LOW(0)
0002e3 93ec      	ST   X,R30
                 ; 0001 00C7 if(strlen(buff) != 5)
0002e4 eead      	LDI  R26,LOW(_buff)
0002e5 e0b1      	LDI  R27,HIGH(_buff)
0002e6 940e 06af 	CALL _strlen
0002e8 30e5      	CPI  R30,LOW(0x5)
0002e9 e0a0      	LDI  R26,HIGH(0x5)
0002ea 07fa      	CPC  R31,R26
0002eb f049      	BREQ _0x2002F
                 ; 0001 00C8 {
                 ; 0001 00C9 lcd_clear();
0002ec 940e 0350 	CALL _lcd_clear
                 ; 0001 00CA lcd_puts("Incorrect frame size!\nThe frame must be 5 integers");
                +
0002ee eaa5     +LDI R26 , LOW ( _0x20030 + ( 0 ) )
0002ef e0b1     +LDI R27 , HIGH ( _0x20030 + ( 0 ) )
                 	__POINTW2MN _0x20030,0
0002f0 940e 0373 	CALL _lcd_puts
                 ; 0001 00CB printf("Incorrect frame size!\r\nThe frame must be 5 integers\r\n");
                +
0002f2 eae2     +LDI R30 , LOW ( 2 * _0x20000 + ( 166 ) )
0002f3 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 166 ) )
                 	__POINTW1FN _0x20000,166
0002f4 c008      	RJMP _0x20032
                 ; 0001 00CC }
                 ; 0001 00CD else
                 _0x2002F:
                 ; 0001 00CE {
                 ; 0001 00CF lcd_clear();
0002f5 940e 0350 	CALL _lcd_clear
                 ; 0001 00D0 lcd_puts("The frame is correct");
                +
0002f7 eda8     +LDI R26 , LOW ( _0x20030 + ( 51 ) )
0002f8 e0b1     +LDI R27 , HIGH ( _0x20030 + ( 51 ) )
                 	__POINTW2MN _0x20030,51
0002f9 940e 0373 	CALL _lcd_puts
                 ; 0001 00D1 printf("The frame is correct\r\n");
                +
0002fb eeed     +LDI R30 , LOW ( 2 * _0x20000 + ( 241 ) )
0002fc e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 241 ) )
                 	__POINTW1FN _0x20000,241
                 _0x20032:
0002fd 93fa      	ST   -Y,R31
0002fe 93ea      	ST   -Y,R30
0002ff e080      	LDI  R24,0
000300 940e 04fc 	CALL _printf
000302 9622      	ADIW R28,2
                 ; 0001 00D2 }
                 ; 0001 00D3 //TODO
                 ; 0001 00D4 
                 ; 0001 00D5 
                 ; 0001 00D6 }
                 ; 0001 00D7 }
                 _0x2002E:
000303 940e 0757 	CALL __LOADLOCR6
                 _0x2080005:
000305 9626      	ADIW R28,6
000306 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20030:
0001a5           	.BYTE 0x48
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;char empty_line[] = "                ";
                 
                 	.DSEG
                 ;char buff[128];
                 ;int part = 0;
                 ;void initialize()
                 ; 0002 0008 {
                 
                 	.CSEG
                 _initialize:
                 ; .FSTART _initialize
                 ; 0002 0009 // Input/Output Ports initialization
                 ; 0002 000A // Port A initialization
                 ; 0002 000B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 000C DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0< ...
000307 e0e0      	LDI  R30,LOW(0)
000308 bbea      	OUT  0x1A,R30
                 ; 0002 000D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 000E PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<< ...
000309 bbeb      	OUT  0x1B,R30
                 ; 0002 000F 
                 ; 0002 0010 // Port B initialization
                 ; 0002 0011 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 0012 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0< ...
00030a bbe7      	OUT  0x17,R30
                 ; 0002 0013 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 0014 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<< ...
00030b bbe8      	OUT  0x18,R30
                 ; 0002 0015 
                 ; 0002 0016 // Port C initialization
                 ; 0002 0017 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 0018 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0< ...
00030c bbe4      	OUT  0x14,R30
                 ; 0002 0019 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 001A PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<< ...
00030d bbe5      	OUT  0x15,R30
                 ; 0002 001B 
                 ; 0002 001C // Port D initialization
                 ; 0002 001D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0002 001E DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0< ...
00030e bbe1      	OUT  0x11,R30
                 ; 0002 001F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0002 0020 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<< ...
00030f bbe2      	OUT  0x12,R30
                 ; 0002 0021 
                 ; 0002 0022 // USART initialization
                 ; 0002 0023 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0002 0024 // USART Receiver: On
                 ; 0002 0025 // USART Transmitter: On
                 ; 0002 0026 // USART Mode: Asynchronous
                 ; 0002 0027 // USART Baud Rate: 9600
                 ; 0002 0028 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) ...
000310 b9eb      	OUT  0xB,R30
                 ; 0002 0029 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2)  ...
000311 e1e8      	LDI  R30,LOW(24)
000312 b9ea      	OUT  0xA,R30
                 ; 0002 002A UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | ...
000313 e8e6      	LDI  R30,LOW(134)
000314 bde0      	OUT  0x20,R30
                 ; 0002 002B UBRRH=0x00;
000315 e0e0      	LDI  R30,LOW(0)
000316 bde0      	OUT  0x20,R30
                 ; 0002 002C UBRRL=0x33;
000317 e3e3      	LDI  R30,LOW(51)
000318 b9e9      	OUT  0x9,R30
                 ; 0002 002D 
                 ; 0002 002E // Alphanumeric LCD initialization
                 ; 0002 002F // Connections are specified in the
                 ; 0002 0030 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0002 0031 // RS - PORTC Bit 0
                 ; 0002 0032 // RD - PORTC Bit 1
                 ; 0002 0033 // EN - PORTC Bit 2
                 ; 0002 0034 // D4 - PORTC Bit 4
                 ; 0002 0035 // D5 - PORTC Bit 5
                 ; 0002 0036 // D6 - PORTC Bit 6
                 ; 0002 0037 // D7 - PORTC Bit 7
                 ; 0002 0038 // Characters/line: 16
                 ; 0002 0039 lcd_init(16);
000319 e1a0      	LDI  R26,LOW(16)
00031a d068      	RCALL _lcd_init
                 ; 0002 003A }
00031b 9508      	RET
                 ; .FEND
                 ;void USART_Enable_Intrupt()
                 ; 0002 003E {
                 _USART_Enable_Intrupt:
                 ; .FSTART _USART_Enable_Intrupt
                 ; 0002 003F // USART initialization
                 ; 0002 0040 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0002 0041 // USART Receiver: On
                 ; 0002 0042 // USART Transmitter: On
                 ; 0002 0043 // USART Mode: Asynchronous
                 ; 0002 0044 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) ...
00031c e0e0      	LDI  R30,LOW(0)
00031d b9eb      	OUT  0xB,R30
                 ; 0002 0045 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2)  ...
00031e ede8      	LDI  R30,LOW(216)
00031f b9ea      	OUT  0xA,R30
                 ; 0002 0046 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | ...
000320 e8e6      	LDI  R30,LOW(134)
000321 bde0      	OUT  0x20,R30
                 ; 0002 0047 }
000322 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000323 93aa      	ST   -Y,R26
000324 b3e5      	IN   R30,0x15
000325 70ef      	ANDI R30,LOW(0xF)
000326 2fae      	MOV  R26,R30
000327 81e8      	LD   R30,Y
000328 7fe0      	ANDI R30,LOW(0xF0)
000329 2bea      	OR   R30,R26
00032a bbe5      	OUT  0x15,R30
                +
00032b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00032c 958a     +DEC R24
00032d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00032e 9aaa      	SBI  0x15,2
                +
00032f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000330 958a     +DEC R24
000331 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000332 98aa      	CBI  0x15,2
                +
000333 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000334 958a     +DEC R24
000335 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000336 c079      	RJMP _0x2080004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000337 93aa      	ST   -Y,R26
000338 81a8      	LD   R26,Y
000339 dfe9      	RCALL __lcd_write_nibble_G100
00033a 81e8          ld    r30,y
00033b 95e2          swap  r30
00033c 83e8          st    y,r30
00033d 81a8      	LD   R26,Y
00033e dfe4      	RCALL __lcd_write_nibble_G100
                +
00033f e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000340 958a     +DEC R24
000341 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000342 c06d      	RJMP _0x2080004
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000343 93aa      	ST   -Y,R26
000344 81e8      	LD   R30,Y
000345 e0f0      	LDI  R31,0
000346 56e7      	SUBI R30,LOW(-__base_y_G100)
000347 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000348 81e0      	LD   R30,Z
000349 81a9      	LDD  R26,Y+1
00034a 0fae      	ADD  R26,R30
00034b dfeb      	RCALL __lcd_write_data
00034c 80d9      	LDD  R13,Y+1
00034d 80c8      	LDD  R12,Y+0
00034e 9622      	ADIW R28,2
00034f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000350 e0a2      	LDI  R26,LOW(2)
000351 940e 0701 	CALL SUBOPT_0x3
000353 e0ac      	LDI  R26,LOW(12)
000354 dfe2      	RCALL __lcd_write_data
000355 e0a1      	LDI  R26,LOW(1)
000356 940e 0701 	CALL SUBOPT_0x3
000358 e0e0      	LDI  R30,LOW(0)
000359 2ece      	MOV  R12,R30
00035a 2ede      	MOV  R13,R30
00035b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00035c 93aa      	ST   -Y,R26
00035d 81a8      	LD   R26,Y
00035e 30aa      	CPI  R26,LOW(0xA)
00035f f021      	BREQ _0x2000005
000360 91e0 029d 	LDS  R30,__lcd_maxx
000362 16de      	CP   R13,R30
000363 f048      	BRLO _0x2000004
                 _0x2000005:
000364 e0e0      	LDI  R30,LOW(0)
000365 93ea      	ST   -Y,R30
000366 94c3      	INC  R12
000367 2dac      	MOV  R26,R12
000368 dfda      	RCALL _lcd_gotoxy
000369 81a8      	LD   R26,Y
00036a 30aa      	CPI  R26,LOW(0xA)
00036b f409      	BRNE _0x2000007
00036c c043      	RJMP _0x2080004
                 _0x2000007:
                 _0x2000004:
00036d 94d3      	INC  R13
00036e 9aa8      	SBI  0x15,0
00036f 81a8      	LD   R26,Y
000370 dfc6      	RCALL __lcd_write_data
000371 98a8      	CBI  0x15,0
000372 c03d      	RJMP _0x2080004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000373 93ba      	ST   -Y,R27
000374 93aa      	ST   -Y,R26
000375 931a      	ST   -Y,R17
                 _0x2000008:
000376 81a9      	LDD  R26,Y+1
000377 81ba      	LDD  R27,Y+1+1
000378 91ed      	LD   R30,X+
000379 83a9      	STD  Y+1,R26
00037a 83ba      	STD  Y+1+1,R27
00037b 2f1e      	MOV  R17,R30
00037c 30e0      	CPI  R30,0
00037d f019      	BREQ _0x200000A
00037e 2fa1      	MOV  R26,R17
00037f dfdc      	RCALL _lcd_putchar
000380 cff5      	RJMP _0x2000008
                 _0x200000A:
000381 8118      	LDD  R17,Y+0
000382 c03b      	RJMP _0x2080003
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000383 93aa      	ST   -Y,R26
000384 b3e4      	IN   R30,0x14
000385 6fe0      	ORI  R30,LOW(0xF0)
000386 bbe4      	OUT  0x14,R30
000387 9aa2      	SBI  0x14,2
000388 9aa0      	SBI  0x14,0
000389 9aa1      	SBI  0x14,1
00038a 98aa      	CBI  0x15,2
00038b 98a8      	CBI  0x15,0
00038c 98a9      	CBI  0x15,1
00038d 81e8      	LD   R30,Y
00038e 93e0 029d 	STS  __lcd_maxx,R30
000390 58e0      	SUBI R30,-LOW(128)
                +
000391 93e0 029b+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000393 81e8      	LD   R30,Y
000394 54e0      	SUBI R30,-LOW(192)
                +
000395 93e0 029c+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000397 e1a4      	LDI  R26,LOW(20)
000398 e0b0      	LDI  R27,0
000399 940e 07fd 	CALL _delay_ms
00039b 940e 0707 	CALL SUBOPT_0x4
00039d 940e 0707 	CALL SUBOPT_0x4
00039f 940e 0707 	CALL SUBOPT_0x4
0003a1 e2a0      	LDI  R26,LOW(32)
0003a2 df80      	RCALL __lcd_write_nibble_G100
                +
0003a3 ec88     +LDI R24 , LOW ( 200 )
0003a4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003a5 9701     +SBIW R24 , 1
0003a6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003a7 e2a8      	LDI  R26,LOW(40)
0003a8 df8e      	RCALL __lcd_write_data
0003a9 e0a4      	LDI  R26,LOW(4)
0003aa df8c      	RCALL __lcd_write_data
0003ab e8a5      	LDI  R26,LOW(133)
0003ac df8a      	RCALL __lcd_write_data
0003ad e0a6      	LDI  R26,LOW(6)
0003ae df88      	RCALL __lcd_write_data
0003af dfa0      	RCALL _lcd_clear
                 _0x2080004:
0003b0 9621      	ADIW R28,1
0003b1 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0003b2 93ba      	ST   -Y,R27
0003b3 93aa      	ST   -Y,R26
0003b4 81aa      	LDD  R26,Y+2
0003b5 940e 0218 	CALL _putchar
0003b7 81a8      	LD   R26,Y
0003b8 81b9      	LDD  R27,Y+1
0003b9 91ed      	LD   R30,X+
0003ba 91fd      	LD   R31,X+
0003bb 9631      	ADIW R30,1
0003bc 93fe      	ST   -X,R31
0003bd 93ee      	ST   -X,R30
                 _0x2080003:
0003be 9623      	ADIW R28,3
0003bf 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0003c0 93ba      	ST   -Y,R27
0003c1 93aa      	ST   -Y,R26
0003c2 9726      	SBIW R28,6
0003c3 940e 0750 	CALL __SAVELOCR6
0003c5 e010      	LDI  R17,0
0003c6 85ac      	LDD  R26,Y+12
0003c7 85bd      	LDD  R27,Y+12+1
0003c8 e0e0      	LDI  R30,LOW(0)
0003c9 e0f0      	LDI  R31,HIGH(0)
0003ca 93ed      	ST   X+,R30
0003cb 93fc      	ST   X,R31
                 _0x2020016:
0003cc 89ea      	LDD  R30,Y+18
0003cd 89fb      	LDD  R31,Y+18+1
0003ce 9631      	ADIW R30,1
0003cf 8bea      	STD  Y+18,R30
0003d0 8bfb      	STD  Y+18+1,R31
0003d1 9731      	SBIW R30,1
0003d2 91e4      	LPM  R30,Z
0003d3 2f2e      	MOV  R18,R30
0003d4 30e0      	CPI  R30,0
0003d5 f409      	BRNE PC+2
0003d6 c11d      	RJMP _0x2020018
0003d7 2fe1      	MOV  R30,R17
0003d8 30e0      	CPI  R30,0
0003d9 f439      	BRNE _0x202001C
0003da 3225      	CPI  R18,37
0003db f411      	BRNE _0x202001D
0003dc e011      	LDI  R17,LOW(1)
0003dd c002      	RJMP _0x202001E
                 _0x202001D:
0003de 940e 070f 	CALL SUBOPT_0x5
                 _0x202001E:
0003e0 c112      	RJMP _0x202001B
                 _0x202001C:
0003e1 30e1      	CPI  R30,LOW(0x1)
0003e2 f4a9      	BRNE _0x202001F
0003e3 3225      	CPI  R18,37
0003e4 f419      	BRNE _0x2020020
0003e5 940e 070f 	CALL SUBOPT_0x5
0003e7 c10a      	RJMP _0x20200CC
                 _0x2020020:
0003e8 e012      	LDI  R17,LOW(2)
0003e9 e040      	LDI  R20,LOW(0)
0003ea e000      	LDI  R16,LOW(0)
0003eb 322d      	CPI  R18,45
0003ec f411      	BRNE _0x2020021
0003ed e001      	LDI  R16,LOW(1)
0003ee c104      	RJMP _0x202001B
                 _0x2020021:
0003ef 322b      	CPI  R18,43
0003f0 f411      	BRNE _0x2020022
0003f1 e24b      	LDI  R20,LOW(43)
0003f2 c100      	RJMP _0x202001B
                 _0x2020022:
0003f3 3220      	CPI  R18,32
0003f4 f411      	BRNE _0x2020023
0003f5 e240      	LDI  R20,LOW(32)
0003f6 c0fc      	RJMP _0x202001B
                 _0x2020023:
0003f7 c002      	RJMP _0x2020024
                 _0x202001F:
0003f8 30e2      	CPI  R30,LOW(0x2)
0003f9 f439      	BRNE _0x2020025
                 _0x2020024:
0003fa e050      	LDI  R21,LOW(0)
0003fb e013      	LDI  R17,LOW(3)
0003fc 3320      	CPI  R18,48
0003fd f411      	BRNE _0x2020026
0003fe 6800      	ORI  R16,LOW(128)
0003ff c0f3      	RJMP _0x202001B
                 _0x2020026:
000400 c003      	RJMP _0x2020027
                 _0x2020025:
000401 30e3      	CPI  R30,LOW(0x3)
000402 f009      	BREQ PC+2
000403 c0ef      	RJMP _0x202001B
                 _0x2020027:
000404 3320      	CPI  R18,48
000405 f010      	BRLO _0x202002A
000406 332a      	CPI  R18,58
000407 f008      	BRLO _0x202002B
                 _0x202002A:
000408 c007      	RJMP _0x2020029
                 _0x202002B:
000409 e0aa      	LDI  R26,LOW(10)
00040a 9f5a      	MUL  R21,R26
00040b 2d50      	MOV  R21,R0
00040c 2fe2      	MOV  R30,R18
00040d 53e0      	SUBI R30,LOW(48)
00040e 0f5e      	ADD  R21,R30
00040f c0e3      	RJMP _0x202001B
                 _0x2020029:
000410 2fe2      	MOV  R30,R18
000411 36e3      	CPI  R30,LOW(0x63)
000412 f449      	BRNE _0x202002F
000413 940e 0716 	CALL SUBOPT_0x6
000415 89e8      	LDD  R30,Y+16
000416 89f9      	LDD  R31,Y+16+1
000417 81a4      	LDD  R26,Z+4
000418 93aa      	ST   -Y,R26
000419 940e 071c 	CALL SUBOPT_0x7
00041b c0d6      	RJMP _0x2020030
                 _0x202002F:
00041c 37e3      	CPI  R30,LOW(0x73)
00041d f441      	BRNE _0x2020032
00041e 940e 0716 	CALL SUBOPT_0x6
000420 940e 0722 	CALL SUBOPT_0x8
000422 940e 06af 	CALL _strlen
000424 2f1e      	MOV  R17,R30
000425 c00a      	RJMP _0x2020033
                 _0x2020032:
000426 37e0      	CPI  R30,LOW(0x70)
000427 f461      	BRNE _0x2020035
000428 940e 0716 	CALL SUBOPT_0x6
00042a 940e 0722 	CALL SUBOPT_0x8
00042c 940e 06bb 	CALL _strlenf
00042e 2f1e      	MOV  R17,R30
00042f 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000430 6002      	ORI  R16,LOW(2)
000431 770f      	ANDI R16,LOW(127)
000432 e030      	LDI  R19,LOW(0)
000433 c03c      	RJMP _0x2020036
                 _0x2020035:
000434 36e4      	CPI  R30,LOW(0x64)
000435 f011      	BREQ _0x2020039
000436 36e9      	CPI  R30,LOW(0x69)
000437 f411      	BRNE _0x202003A
                 _0x2020039:
000438 6004      	ORI  R16,LOW(4)
000439 c002      	RJMP _0x202003B
                 _0x202003A:
00043a 37e5      	CPI  R30,LOW(0x75)
00043b f431      	BRNE _0x202003C
                 _0x202003B:
00043c e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00043d e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00043e 83ee      	STD  Y+6,R30
00043f 83ff      	STD  Y+6+1,R31
000440 e015      	LDI  R17,LOW(5)
000441 c00c      	RJMP _0x202003D
                 _0x202003C:
000442 35e8      	CPI  R30,LOW(0x58)
000443 f411      	BRNE _0x202003F
000444 6008      	ORI  R16,LOW(8)
000445 c003      	RJMP _0x2020040
                 _0x202003F:
000446 37e8      	CPI  R30,LOW(0x78)
000447 f009      	BREQ PC+2
000448 c0a9      	RJMP _0x2020071
                 _0x2020040:
000449 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
00044a e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
00044b 83ee      	STD  Y+6,R30
00044c 83ff      	STD  Y+6+1,R31
00044d e014      	LDI  R17,LOW(4)
                 _0x202003D:
00044e ff02      	SBRS R16,2
00044f c017      	RJMP _0x2020042
000450 940e 0716 	CALL SUBOPT_0x6
000452 89a8      	LDD  R26,Y+16
000453 89b9      	LDD  R27,Y+16+1
000454 9614      	ADIW R26,4
000455 91ed      	LD   R30,X+
000456 91fd      	LD   R31,X+
000457 87ea      	STD  Y+10,R30
000458 87fb      	STD  Y+10+1,R31
000459 85ab      	LDD  R26,Y+11
00045a 23aa      	TST  R26
00045b f42a      	BRPL _0x2020043
00045c 940e 0762 	CALL __ANEGW1
00045e 87ea      	STD  Y+10,R30
00045f 87fb      	STD  Y+10+1,R31
000460 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000461 3040      	CPI  R20,0
000462 f011      	BREQ _0x2020044
000463 5f1f      	SUBI R17,-LOW(1)
000464 c001      	RJMP _0x2020045
                 _0x2020044:
000465 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000466 c009      	RJMP _0x2020046
                 _0x2020042:
000467 940e 0716 	CALL SUBOPT_0x6
000469 89a8      	LDD  R26,Y+16
00046a 89b9      	LDD  R27,Y+16+1
00046b 9614      	ADIW R26,4
00046c 940e 07f0 	CALL __GETW1P
00046e 87ea      	STD  Y+10,R30
00046f 87fb      	STD  Y+10+1,R31
                 _0x2020046:
                 _0x2020036:
000470 fd00      	SBRC R16,0
000471 c011      	RJMP _0x2020047
                 _0x2020048:
000472 1715      	CP   R17,R21
000473 f478      	BRSH _0x202004A
000474 ff07      	SBRS R16,7
000475 c008      	RJMP _0x202004B
000476 ff02      	SBRS R16,2
000477 c004      	RJMP _0x202004C
000478 7f0b      	ANDI R16,LOW(251)
000479 2f24      	MOV  R18,R20
00047a 5011      	SUBI R17,LOW(1)
00047b c001      	RJMP _0x202004D
                 _0x202004C:
00047c e320      	LDI  R18,LOW(48)
                 _0x202004D:
00047d c001      	RJMP _0x202004E
                 _0x202004B:
00047e e220      	LDI  R18,LOW(32)
                 _0x202004E:
00047f 940e 070f 	CALL SUBOPT_0x5
000481 5051      	SUBI R21,LOW(1)
000482 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000483 2f31      	MOV  R19,R17
000484 ff01      	SBRS R16,1
000485 c017      	RJMP _0x202004F
                 _0x2020050:
000486 3030      	CPI  R19,0
000487 f0a1      	BREQ _0x2020052
000488 ff03      	SBRS R16,3
000489 c006      	RJMP _0x2020053
00048a 81ee      	LDD  R30,Y+6
00048b 81ff      	LDD  R31,Y+6+1
00048c 9125      	LPM  R18,Z+
00048d 83ee      	STD  Y+6,R30
00048e 83ff      	STD  Y+6+1,R31
00048f c005      	RJMP _0x2020054
                 _0x2020053:
000490 81ae      	LDD  R26,Y+6
000491 81bf      	LDD  R27,Y+6+1
000492 912d      	LD   R18,X+
000493 83ae      	STD  Y+6,R26
000494 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000495 940e 070f 	CALL SUBOPT_0x5
000497 3050      	CPI  R21,0
000498 f009      	BREQ _0x2020055
000499 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00049a 5031      	SUBI R19,LOW(1)
00049b cfea      	RJMP _0x2020050
                 _0x2020052:
00049c c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00049d e320      	LDI  R18,LOW(48)
00049e 81ee      	LDD  R30,Y+6
00049f 81ff      	LDD  R31,Y+6+1
0004a0 940e 07f4 	CALL __GETW1PF
0004a2 87e8      	STD  Y+8,R30
0004a3 87f9      	STD  Y+8+1,R31
0004a4 81ee      	LDD  R30,Y+6
0004a5 81ff      	LDD  R31,Y+6+1
0004a6 9632      	ADIW R30,2
0004a7 83ee      	STD  Y+6,R30
0004a8 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0004a9 85e8      	LDD  R30,Y+8
0004aa 85f9      	LDD  R31,Y+8+1
0004ab 85aa      	LDD  R26,Y+10
0004ac 85bb      	LDD  R27,Y+10+1
0004ad 17ae      	CP   R26,R30
0004ae 07bf      	CPC  R27,R31
0004af f050      	BRLO _0x202005C
0004b0 5f2f      	SUBI R18,-LOW(1)
0004b1 85a8      	LDD  R26,Y+8
0004b2 85b9      	LDD  R27,Y+8+1
0004b3 85ea      	LDD  R30,Y+10
0004b4 85fb      	LDD  R31,Y+10+1
0004b5 1bea      	SUB  R30,R26
0004b6 0bfb      	SBC  R31,R27
0004b7 87ea      	STD  Y+10,R30
0004b8 87fb      	STD  Y+10+1,R31
0004b9 cfef      	RJMP _0x202005A
                 _0x202005C:
0004ba 332a      	CPI  R18,58
0004bb f028      	BRLO _0x202005D
0004bc ff03      	SBRS R16,3
0004bd c002      	RJMP _0x202005E
0004be 5f29      	SUBI R18,-LOW(7)
0004bf c001      	RJMP _0x202005F
                 _0x202005E:
0004c0 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0004c1 fd04      	SBRC R16,4
0004c2 c01a      	RJMP _0x2020061
0004c3 3321      	CPI  R18,49
0004c4 f420      	BRSH _0x2020063
0004c5 85a8      	LDD  R26,Y+8
0004c6 85b9      	LDD  R27,Y+8+1
0004c7 9711      	SBIW R26,1
0004c8 f409      	BRNE _0x2020062
                 _0x2020063:
0004c9 c009      	RJMP _0x20200CD
                 _0x2020062:
0004ca 1753      	CP   R21,R19
0004cb f010      	BRLO _0x2020067
0004cc ff00      	SBRS R16,0
0004cd c001      	RJMP _0x2020068
                 _0x2020067:
0004ce c013      	RJMP _0x2020066
                 _0x2020068:
0004cf e220      	LDI  R18,LOW(32)
0004d0 ff07      	SBRS R16,7
0004d1 c00b      	RJMP _0x2020069
0004d2 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0004d3 6100      	ORI  R16,LOW(16)
0004d4 ff02      	SBRS R16,2
0004d5 c007      	RJMP _0x202006A
0004d6 7f0b      	ANDI R16,LOW(251)
0004d7 934a      	ST   -Y,R20
0004d8 940e 071c 	CALL SUBOPT_0x7
0004da 3050      	CPI  R21,0
0004db f009      	BREQ _0x202006B
0004dc 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0004dd 940e 070f 	CALL SUBOPT_0x5
0004df 3050      	CPI  R21,0
0004e0 f009      	BREQ _0x202006C
0004e1 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0004e2 5031      	SUBI R19,LOW(1)
0004e3 85a8      	LDD  R26,Y+8
0004e4 85b9      	LDD  R27,Y+8+1
0004e5 9712      	SBIW R26,2
0004e6 f008      	BRLO _0x2020059
0004e7 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0004e8 ff00      	SBRS R16,0
0004e9 c008      	RJMP _0x202006D
                 _0x202006E:
0004ea 3050      	CPI  R21,0
0004eb f031      	BREQ _0x2020070
0004ec 5051      	SUBI R21,LOW(1)
0004ed e2e0      	LDI  R30,LOW(32)
0004ee 93ea      	ST   -Y,R30
0004ef 940e 071c 	CALL SUBOPT_0x7
0004f1 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0004f2 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0004f3 ced8      	RJMP _0x2020016
                 _0x2020018:
0004f4 85ac      	LDD  R26,Y+12
0004f5 85bd      	LDD  R27,Y+12+1
0004f6 91ed      	LD   R30,X+
0004f7 91fd      	LD   R31,X+
0004f8 940e 0757 	CALL __LOADLOCR6
0004fa 9664      	ADIW R28,20
0004fb 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0004fc 92ff      	PUSH R15
0004fd 2ef8      	MOV  R15,R24
0004fe 9726      	SBIW R28,6
0004ff 931a      	ST   -Y,R17
000500 930a      	ST   -Y,R16
000501 01de      	MOVW R26,R28
000502 9614      	ADIW R26,4
000503 940e 075e 	CALL __ADDW2R15
000505 018d      	MOVW R16,R26
000506 e0e0      	LDI  R30,LOW(0)
000507 83ec      	STD  Y+4,R30
000508 83ed      	STD  Y+4+1,R30
000509 83ee      	STD  Y+6,R30
00050a 83ef      	STD  Y+6+1,R30
00050b 01de      	MOVW R26,R28
00050c 9618      	ADIW R26,8
00050d 940e 072c 	CALL SUBOPT_0x9
00050f ebe2      	LDI  R30,LOW(_put_usart_G101)
000510 e0f3      	LDI  R31,HIGH(_put_usart_G101)
000511 93fa      	ST   -Y,R31
000512 93ea      	ST   -Y,R30
000513 01de      	MOVW R26,R28
000514 9618      	ADIW R26,8
000515 deaa      	RCALL __print_G101
000516 8119      	LDD  R17,Y+1
000517 8108      	LDD  R16,Y+0
000518 9628      	ADIW R28,8
000519 90ff      	POP  R15
00051a 9508      	RET
                 ; .FEND
                 _get_usart_G101:
                 ; .FSTART _get_usart_G101
00051b 93ba      	ST   -Y,R27
00051c 93aa      	ST   -Y,R26
00051d 931a      	ST   -Y,R17
00051e 81a9      	LDD  R26,Y+1
00051f 81ba      	LDD  R27,Y+1+1
000520 e0e0      	LDI  R30,LOW(0)
000521 93ec      	ST   X,R30
000522 81ab      	LDD  R26,Y+3
000523 81bc      	LDD  R27,Y+3+1
000524 91ec      	LD   R30,X
000525 2f1e      	MOV  R17,R30
000526 30e0      	CPI  R30,0
000527 f019      	BREQ _0x2020078
000528 e0e0      	LDI  R30,LOW(0)
000529 93ec      	ST   X,R30
00052a c003      	RJMP _0x2020079
                 _0x2020078:
00052b 940e 01ef 	CALL _getchar
00052d 2f1e      	MOV  R17,R30
                 _0x2020079:
00052e 2fe1      	MOV  R30,R17
00052f 8118      	LDD  R17,Y+0
000530 9625      	ADIW R28,5
000531 9508      	RET
                 ; .FEND
                 __scanf_G101:
                 ; .FSTART __scanf_G101
000532 92ff      	PUSH R15
000533 93ba      	ST   -Y,R27
000534 93aa      	ST   -Y,R26
000535 9724      	SBIW R28,4
000536 940e 0750 	CALL __SAVELOCR6
000538 e0e0      	LDI  R30,LOW(0)
000539 e0f0      	LDI  R31,HIGH(0)
00053a 87e8      	STD  Y+8,R30
00053b 87f9      	STD  Y+8+1,R31
00053c 2f4e      	MOV  R20,R30
                 _0x202007F:
00053d 89e8      	LDD  R30,Y+16
00053e 89f9      	LDD  R31,Y+16+1
00053f 9631      	ADIW R30,1
000540 8be8      	STD  Y+16,R30
000541 8bf9      	STD  Y+16+1,R31
000542 9731      	SBIW R30,1
000543 91e4      	LPM  R30,Z
000544 2f3e      	MOV  R19,R30
000545 30e0      	CPI  R30,0
000546 f409      	BRNE PC+2
000547 c125      	RJMP _0x2020081
000548 940e 0735 	CALL SUBOPT_0xA
00054a f0c1      	BREQ _0x2020082
                 _0x2020083:
00054b b7ed      	IN   R30,SPL
00054c b7fe      	IN   R31,SPH
00054d 93fa      	ST   -Y,R31
00054e 93ea      	ST   -Y,R30
00054f 934f      	PUSH R20
000550 940e 073a 	CALL SUBOPT_0xB
000552 914f      	POP  R20
000553 2f3e      	MOV  R19,R30
000554 30e0      	CPI  R30,0
000555 f019      	BREQ _0x2020086
000556 940e 0735 	CALL SUBOPT_0xA
000558 f409      	BRNE _0x2020087
                 _0x2020086:
000559 c007      	RJMP _0x2020085
                 _0x2020087:
00055a 940e 0740 	CALL SUBOPT_0xC
00055c f41c      	BRGE _0x2020088
00055d efef      	LDI  R30,LOW(65535)
00055e efff      	LDI  R31,HIGH(65535)
00055f c10f      	RJMP _0x2080001
                 _0x2020088:
000560 cfea      	RJMP _0x2020083
                 _0x2020085:
000561 2f43      	MOV  R20,R19
000562 c109      	RJMP _0x2020089
                 _0x2020082:
000563 3235      	CPI  R19,37
000564 f009      	BREQ PC+2
000565 c0ee      	RJMP _0x202008A
000566 e050      	LDI  R21,LOW(0)
                 _0x202008B:
000567 89e8      	LDD  R30,Y+16
000568 89f9      	LDD  R31,Y+16+1
000569 9135      	LPM  R19,Z+
00056a 8be8      	STD  Y+16,R30
00056b 8bf9      	STD  Y+16+1,R31
00056c 3330      	CPI  R19,48
00056d f010      	BRLO _0x202008F
00056e 333a      	CPI  R19,58
00056f f008      	BRLO _0x202008E
                 _0x202008F:
000570 c007      	RJMP _0x202008D
                 _0x202008E:
000571 e0aa      	LDI  R26,LOW(10)
000572 9f5a      	MUL  R21,R26
000573 2d50      	MOV  R21,R0
000574 2fe3      	MOV  R30,R19
000575 53e0      	SUBI R30,LOW(48)
000576 0f5e      	ADD  R21,R30
000577 cfef      	RJMP _0x202008B
                 _0x202008D:
000578 3030      	CPI  R19,0
000579 f409      	BRNE _0x2020091
00057a c0f2      	RJMP _0x2020081
                 _0x2020091:
                 _0x2020092:
00057b b7ed      	IN   R30,SPL
00057c b7fe      	IN   R31,SPH
00057d 93fa      	ST   -Y,R31
00057e 93ea      	ST   -Y,R30
00057f 934f      	PUSH R20
000580 940e 073a 	CALL SUBOPT_0xB
000582 914f      	POP  R20
000583 2f2e      	MOV  R18,R30
000584 2fae      	MOV  R26,R30
000585 940e 06d1 	CALL _isspace
000587 30e0      	CPI  R30,0
000588 f039      	BREQ _0x2020094
000589 940e 0740 	CALL SUBOPT_0xC
00058b f41c      	BRGE _0x2020095
00058c efef      	LDI  R30,LOW(65535)
00058d efff      	LDI  R31,HIGH(65535)
00058e c0e0      	RJMP _0x2080001
                 _0x2020095:
00058f cfeb      	RJMP _0x2020092
                 _0x2020094:
000590 3020      	CPI  R18,0
000591 f409      	BRNE _0x2020096
000592 c0d1      	RJMP _0x2020097
                 _0x2020096:
000593 2f42      	MOV  R20,R18
000594 3050      	CPI  R21,0
000595 f409      	BRNE _0x2020098
000596 ef5f      	LDI  R21,LOW(255)
                 _0x2020098:
000597 2fe3      	MOV  R30,R19
000598 36e3      	CPI  R30,LOW(0x63)
000599 f499      	BRNE _0x202009C
00059a 940e 0745 	CALL SUBOPT_0xD
00059c b7ed      	IN   R30,SPL
00059d b7fe      	IN   R31,SPH
00059e 93fa      	ST   -Y,R31
00059f 93ea      	ST   -Y,R30
0005a0 934f      	PUSH R20
0005a1 940e 073a 	CALL SUBOPT_0xB
0005a3 914f      	POP  R20
0005a4 01d8      	MOVW R26,R16
0005a5 93ec      	ST   X,R30
0005a6 940e 0740 	CALL SUBOPT_0xC
0005a8 f41c      	BRGE _0x202009D
0005a9 efef      	LDI  R30,LOW(65535)
0005aa efff      	LDI  R31,HIGH(65535)
0005ab c0c3      	RJMP _0x2080001
                 _0x202009D:
0005ac c0a1      	RJMP _0x202009B
                 _0x202009C:
0005ad 37e3      	CPI  R30,LOW(0x73)
0005ae f541      	BRNE _0x20200A6
0005af 940e 0745 	CALL SUBOPT_0xD
                 _0x202009F:
0005b1 2fe5      	MOV  R30,R21
0005b2 5051      	SUBI R21,1
0005b3 30e0      	CPI  R30,0
0005b4 f0f1      	BREQ _0x20200A1
0005b5 b7ed      	IN   R30,SPL
0005b6 b7fe      	IN   R31,SPH
0005b7 93fa      	ST   -Y,R31
0005b8 93ea      	ST   -Y,R30
0005b9 934f      	PUSH R20
0005ba 940e 073a 	CALL SUBOPT_0xB
0005bc 914f      	POP  R20
0005bd 2f3e      	MOV  R19,R30
0005be 30e0      	CPI  R30,0
0005bf f019      	BREQ _0x20200A3
0005c0 940e 0735 	CALL SUBOPT_0xA
0005c2 f039      	BREQ _0x20200A2
                 _0x20200A3:
0005c3 940e 0740 	CALL SUBOPT_0xC
0005c5 f41c      	BRGE _0x20200A5
0005c6 efef      	LDI  R30,LOW(65535)
0005c7 efff      	LDI  R31,HIGH(65535)
0005c8 c0a6      	RJMP _0x2080001
                 _0x20200A5:
0005c9 c009      	RJMP _0x20200A1
                 _0x20200A2:
0005ca 931f      	PUSH R17
0005cb 930f      	PUSH R16
                +
0005cc 5f0f     +SUBI R16 , LOW ( - 1 )
0005cd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0005ce 2fe3      	MOV  R30,R19
0005cf 91af      	POP  R26
0005d0 91bf      	POP  R27
0005d1 93ec      	ST   X,R30
0005d2 cfde      	RJMP _0x202009F
                 _0x20200A1:
0005d3 01d8      	MOVW R26,R16
0005d4 e0e0      	LDI  R30,LOW(0)
0005d5 93ec      	ST   X,R30
0005d6 c077      	RJMP _0x202009B
                 _0x20200A6:
0005d7 9468      	SET
0005d8 f8f1      	BLD  R15,1
0005d9 94e8      	CLT
0005da f8f2      	BLD  R15,2
0005db 2fe3      	MOV  R30,R19
0005dc 36e4      	CPI  R30,LOW(0x64)
0005dd f011      	BREQ _0x20200AB
0005de 36e9      	CPI  R30,LOW(0x69)
0005df f419      	BRNE _0x20200AC
                 _0x20200AB:
0005e0 94e8      	CLT
0005e1 f8f1      	BLD  R15,1
0005e2 c002      	RJMP _0x20200AD
                 _0x20200AC:
0005e3 37e5      	CPI  R30,LOW(0x75)
0005e4 f411      	BRNE _0x20200AE
                 _0x20200AD:
0005e5 e02a      	LDI  R18,LOW(10)
0005e6 c008      	RJMP _0x20200A9
                 _0x20200AE:
0005e7 37e8      	CPI  R30,LOW(0x78)
0005e8 f411      	BRNE _0x20200AF
0005e9 e120      	LDI  R18,LOW(16)
0005ea c004      	RJMP _0x20200A9
                 _0x20200AF:
0005eb 32e5      	CPI  R30,LOW(0x25)
0005ec f409      	BRNE _0x20200B2
0005ed c066      	RJMP _0x20200B1
                 _0x20200B2:
0005ee c07e      	RJMP _0x2080002
                 _0x20200A9:
0005ef e0e0      	LDI  R30,LOW(0)
0005f0 83ee      	STD  Y+6,R30
0005f1 83ef      	STD  Y+6+1,R30
0005f2 9468      	SET
0005f3 f8f0      	BLD  R15,0
                 _0x20200B3:
0005f4 2fe5      	MOV  R30,R21
0005f5 5051      	SUBI R21,1
0005f6 30e0      	CPI  R30,0
0005f7 f409      	BRNE PC+2
0005f8 c046      	RJMP _0x20200B5
0005f9 b7ed      	IN   R30,SPL
0005fa b7fe      	IN   R31,SPH
0005fb 93fa      	ST   -Y,R31
0005fc 93ea      	ST   -Y,R30
0005fd 934f      	PUSH R20
0005fe 940e 073a 	CALL SUBOPT_0xB
000600 914f      	POP  R20
000601 2f3e      	MOV  R19,R30
000602 32e1      	CPI  R30,LOW(0x21)
000603 f438      	BRSH _0x20200B6
000604 940e 0740 	CALL SUBOPT_0xC
000606 f41c      	BRGE _0x20200B7
000607 efef      	LDI  R30,LOW(65535)
000608 efff      	LDI  R31,HIGH(65535)
000609 c065      	RJMP _0x2080001
                 _0x20200B7:
00060a c017      	RJMP _0x20200B8
                 _0x20200B6:
00060b fcf1      	SBRC R15,1
00060c c008      	RJMP _0x20200B9
00060d 9468      	SET
00060e f8f1      	BLD  R15,1
00060f 323d      	CPI  R19,45
000610 f411      	BRNE _0x20200BA
000611 f8f2      	BLD  R15,2
000612 cfe1      	RJMP _0x20200B3
                 _0x20200BA:
000613 323b      	CPI  R19,43
000614 f2f9      	BREQ _0x20200B3
                 _0x20200B9:
000615 3120      	CPI  R18,16
000616 f431      	BRNE _0x20200BC
000617 2fa3      	MOV  R26,R19
000618 940e 06dc 	CALL _isxdigit
00061a 30e0      	CPI  R30,0
00061b f031      	BREQ _0x20200B8
00061c c009      	RJMP _0x20200BE
                 _0x20200BC:
00061d 2fa3      	MOV  R26,R19
00061e 940e 06c8 	CALL _isdigit
000620 30e0      	CPI  R30,0
000621 f421      	BRNE _0x20200BF
                 _0x20200B8:
000622 fcf0      	SBRC R15,0
000623 c049      	RJMP _0x20200C1
000624 2f43      	MOV  R20,R19
000625 c019      	RJMP _0x20200B5
                 _0x20200BF:
                 _0x20200BE:
000626 3631      	CPI  R19,97
000627 f010      	BRLO _0x20200C2
000628 5537      	SUBI R19,LOW(87)
000629 c005      	RJMP _0x20200C3
                 _0x20200C2:
00062a 3431      	CPI  R19,65
00062b f010      	BRLO _0x20200C4
00062c 5337      	SUBI R19,LOW(55)
00062d c001      	RJMP _0x20200C5
                 _0x20200C4:
00062e 5330      	SUBI R19,LOW(48)
                 _0x20200C5:
                 _0x20200C3:
00062f 2fe2      	MOV  R30,R18
000630 81ae      	LDD  R26,Y+6
000631 81bf      	LDD  R27,Y+6+1
000632 e0f0      	LDI  R31,0
000633 940e 077b 	CALL __MULW12U
000635 01df      	MOVW R26,R30
000636 2fe3      	MOV  R30,R19
000637 e0f0      	LDI  R31,0
000638 0fea      	ADD  R30,R26
000639 1ffb      	ADC  R31,R27
00063a 83ee      	STD  Y+6,R30
00063b 83ff      	STD  Y+6+1,R31
00063c 94e8      	CLT
00063d f8f0      	BLD  R15,0
00063e cfb5      	RJMP _0x20200B3
                 _0x20200B5:
00063f 940e 0745 	CALL SUBOPT_0xD
000641 fef2      	SBRS R15,2
000642 c006      	RJMP _0x20200C6
000643 81ee      	LDD  R30,Y+6
000644 81ff      	LDD  R31,Y+6+1
000645 940e 0762 	CALL __ANEGW1
000647 83ee      	STD  Y+6,R30
000648 83ff      	STD  Y+6+1,R31
                 _0x20200C6:
000649 81ee      	LDD  R30,Y+6
00064a 81ff      	LDD  R31,Y+6+1
00064b 01d8      	MOVW R26,R16
00064c 93ed      	ST   X+,R30
00064d 93fc      	ST   X,R31
                 _0x202009B:
00064e 85e8      	LDD  R30,Y+8
00064f 85f9      	LDD  R31,Y+8+1
000650 9631      	ADIW R30,1
000651 87e8      	STD  Y+8,R30
000652 87f9      	STD  Y+8+1,R31
000653 c018      	RJMP _0x20200C7
                 _0x202008A:
                 _0x20200B1:
000654 b7ed      	IN   R30,SPL
000655 b7fe      	IN   R31,SPH
000656 93fa      	ST   -Y,R31
000657 93ea      	ST   -Y,R30
000658 934f      	PUSH R20
000659 940e 073a 	CALL SUBOPT_0xB
00065b 914f      	POP  R20
00065c 17e3      	CP   R30,R19
00065d f071      	BREQ _0x20200C8
00065e 940e 0740 	CALL SUBOPT_0xC
000660 f41c      	BRGE _0x20200C9
000661 efef      	LDI  R30,LOW(65535)
000662 efff      	LDI  R31,HIGH(65535)
000663 c00b      	RJMP _0x2080001
                 _0x20200C9:
                 _0x2020097:
000664 85e8      	LDD  R30,Y+8
000665 85f9      	LDD  R31,Y+8+1
000666 9730      	SBIW R30,0
000667 f419      	BRNE _0x20200CA
000668 efef      	LDI  R30,LOW(65535)
000669 efff      	LDI  R31,HIGH(65535)
00066a c004      	RJMP _0x2080001
                 _0x20200CA:
00066b c001      	RJMP _0x2020081
                 _0x20200C8:
                 _0x20200C7:
                 _0x2020089:
00066c ced0      	RJMP _0x202007F
                 _0x2020081:
                 _0x20200C1:
                 _0x2080002:
00066d 85e8      	LDD  R30,Y+8
00066e 85f9      	LDD  R31,Y+8+1
                 _0x2080001:
00066f 940e 0757 	CALL __LOADLOCR6
000671 9662      	ADIW R28,18
000672 90ff      	POP  R15
000673 9508      	RET
                 ; .FEND
                 _scanf:
                 ; .FSTART _scanf
000674 92ff      	PUSH R15
000675 2ef8      	MOV  R15,R24
000676 9723      	SBIW R28,3
000677 931a      	ST   -Y,R17
000678 930a      	ST   -Y,R16
000679 01de      	MOVW R26,R28
00067a 9611      	ADIW R26,1
00067b 940e 075e 	CALL __ADDW2R15
00067d 018d      	MOVW R16,R26
00067e e0e0      	LDI  R30,LOW(0)
00067f 83eb      	STD  Y+3,R30
000680 83ec      	STD  Y+3+1,R30
000681 01de      	MOVW R26,R28
000682 9615      	ADIW R26,5
000683 940e 072c 	CALL SUBOPT_0x9
000685 e1eb      	LDI  R30,LOW(_get_usart_G101)
000686 e0f5      	LDI  R31,HIGH(_get_usart_G101)
000687 93fa      	ST   -Y,R31
000688 93ea      	ST   -Y,R30
000689 01de      	MOVW R26,R28
00068a 9618      	ADIW R26,8
00068b dea6      	RCALL __scanf_G101
00068c 8119      	LDD  R17,Y+1
00068d 8108      	LDD  R16,Y+0
00068e 9625      	ADIW R28,5
00068f 90ff      	POP  R15
000690 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcat:
                 ; .FSTART _strcat
000691 93ba      	ST   -Y,R27
000692 93aa      	ST   -Y,R26
000693 91e9          ld   r30,y+
000694 91f9          ld   r31,y+
000695 91a9          ld   r26,y+
000696 91b9          ld   r27,y+
000697 01cd          movw r24,r26
                 strcat0:
000698 916d          ld   r22,x+
000699 2366          tst  r22
00069a f7e9          brne strcat0
00069b 9711          sbiw r26,1
                 strcat1:
00069c 9161          ld   r22,z+
00069d 936d          st   x+,r22
00069e 2366          tst  r22
00069f f7e1          brne strcat1
0006a0 01fc          movw r30,r24
0006a1 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
0006a2 93ba      	ST   -Y,R27
0006a3 93aa      	ST   -Y,R26
0006a4 91e9          ld   r30,y+
0006a5 91f9          ld   r31,y+
0006a6 91a9          ld   r26,y+
0006a7 91b9          ld   r27,y+
0006a8 01cd          movw r24,r26
                 strcpy0:
0006a9 9161          ld   r22,z+
0006aa 936d          st   x+,r22
0006ab 2366          tst  r22
0006ac f7e1          brne strcpy0
0006ad 01fc          movw r30,r24
0006ae 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
0006af 93ba      	ST   -Y,R27
0006b0 93aa      	ST   -Y,R26
0006b1 91a9          ld   r26,y+
0006b2 91b9          ld   r27,y+
0006b3 27ee          clr  r30
0006b4 27ff          clr  r31
                 strlen0:
0006b5 916d          ld   r22,x+
0006b6 2366          tst  r22
0006b7 f011          breq strlen1
0006b8 9631          adiw r30,1
0006b9 cffb          rjmp strlen0
                 strlen1:
0006ba 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0006bb 93ba      	ST   -Y,R27
0006bc 93aa      	ST   -Y,R26
0006bd 27aa          clr  r26
0006be 27bb          clr  r27
0006bf 91e9          ld   r30,y+
0006c0 91f9          ld   r31,y+
                 strlenf0:
0006c1 9005      	lpm  r0,z+
0006c2 2000          tst  r0
0006c3 f011          breq strlenf1
0006c4 9611          adiw r26,1
0006c5 cffb          rjmp strlenf0
                 strlenf1:
0006c6 01fd          movw r30,r26
0006c7 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
0006c8 93aa      	ST   -Y,R26
0006c9 e0e1          ldi  r30,1
0006ca 91f9          ld   r31,y+
0006cb 33f0          cpi  r31,'0'
0006cc f010          brlo isdigit0
0006cd 33fa          cpi  r31,'9'+1
0006ce f008          brlo isdigit1
                 isdigit0:
0006cf 27ee          clr  r30
                 isdigit1:
0006d0 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
0006d1 93aa      	ST   -Y,R26
0006d2 e0e1          ldi  r30,1
0006d3 91f9          ld   r31,y+
0006d4 32f0          cpi  r31,' '
0006d5 f029          breq isspace1
0006d6 30f9          cpi  r31,9
0006d7 f010          brlo isspace0
0006d8 30fe          cpi  r31,13+1
0006d9 f008          brlo isspace1
                 isspace0:
0006da 27ee          clr  r30
                 isspace1:
0006db 9508          ret
                 ; .FEND
                 _isxdigit:
                 ; .FSTART _isxdigit
0006dc 93aa      	ST   -Y,R26
0006dd e0e1          ldi  r30,1
0006de 91f9          ld   r31,y+
0006df 53f0          subi r31,0x30
0006e0 f040          brcs isxdigit0
0006e1 30fa          cpi  r31,10
0006e2 f038          brcs isxdigit1
0006e3 75ff          andi r31,0x5f
0006e4 50f7          subi r31,7
0006e5 30fa          cpi  r31,10
0006e6 f010          brcs isxdigit0
0006e7 31f0          cpi  r31,16
0006e8 f008          brcs isxdigit1
                 isxdigit0:
0006e9 27ee          clr  r30
                 isxdigit1:
0006ea 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buff:
0001ed           	.BYTE 0x80
                 _part:
00026d           	.BYTE 0x2
                 _rx_buffer:
00026f           	.BYTE 0x8
                 _tx_buffer:
000277           	.BYTE 0x8
                 _baud_list:
00027f           	.BYTE 0x1A
                 __base_y_G100:
000299           	.BYTE 0x4
                 __lcd_maxx:
00029d           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x0:
0006eb 93fa      	ST   -Y,R31
0006ec 93ea      	ST   -Y,R30
0006ed e080      	LDI  R24,0
0006ee 940e 04fc 	CALL _printf
0006f0 9622      	ADIW R28,2
0006f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0006f2 01fe      	MOVW R30,R28
0006f3 9636      	ADIW R30,6
0006f4 93fa      	ST   -Y,R31
0006f5 93ea      	ST   -Y,R30
0006f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0006f7 93fa      	ST   -Y,R31
0006f8 93ea      	ST   -Y,R30
0006f9 eeed      	LDI  R30,LOW(_buff)
0006fa e0f1      	LDI  R31,HIGH(_buff)
0006fb 2766      	CLR  R22
0006fc 2777      	CLR  R23
0006fd 940e 07f8 	CALL __PUTPARD1
0006ff e084      	LDI  R24,4
000700 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000701 940e 0337 	CALL __lcd_write_data
000703 e0a3      	LDI  R26,LOW(3)
000704 e0b0      	LDI  R27,0
000705 940c 07fd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000707 e3a0      	LDI  R26,LOW(48)
000708 940e 0323 	CALL __lcd_write_nibble_G100
                +
00070a ec88     +LDI R24 , LOW ( 200 )
00070b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00070c 9701     +SBIW R24 , 1
00070d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00070e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00070f 932a      	ST   -Y,R18
000710 85ad      	LDD  R26,Y+13
000711 85be      	LDD  R27,Y+13+1
000712 85ef      	LDD  R30,Y+15
000713 89f8      	LDD  R31,Y+15+1
000714 9509      	ICALL
000715 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
000716 89e8      	LDD  R30,Y+16
000717 89f9      	LDD  R31,Y+16+1
000718 9734      	SBIW R30,4
000719 8be8      	STD  Y+16,R30
00071a 8bf9      	STD  Y+16+1,R31
00071b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
00071c 85ad      	LDD  R26,Y+13
00071d 85be      	LDD  R27,Y+13+1
00071e 85ef      	LDD  R30,Y+15
00071f 89f8      	LDD  R31,Y+15+1
000720 9509      	ICALL
000721 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000722 89a8      	LDD  R26,Y+16
000723 89b9      	LDD  R27,Y+16+1
000724 9614      	ADIW R26,4
000725 91ed      	LD   R30,X+
000726 91fd      	LD   R31,X+
000727 83ee      	STD  Y+6,R30
000728 83ff      	STD  Y+6+1,R31
000729 81ae      	LDD  R26,Y+6
00072a 81bf      	LDD  R27,Y+6+1
00072b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00072c 940e 075e 	CALL __ADDW2R15
00072e 91ed      	LD   R30,X+
00072f 91fd      	LD   R31,X+
000730 93fa      	ST   -Y,R31
000731 93ea      	ST   -Y,R30
000732 931a      	ST   -Y,R17
000733 930a      	ST   -Y,R16
000734 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000735 2fa3      	MOV  R26,R19
000736 940e 06d1 	CALL _isspace
000738 30e0      	CPI  R30,0
000739 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xB:
00073a 85ac      	LDD  R26,Y+12
00073b 85bd      	LDD  R27,Y+12+1
00073c 85ee      	LDD  R30,Y+14
00073d 85ff      	LDD  R31,Y+14+1
00073e 9509      	ICALL
00073f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000740 85aa      	LDD  R26,Y+10
000741 85bb      	LDD  R27,Y+10+1
000742 91ac      	LD   R26,X
000743 30a0      	CPI  R26,0
000744 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
000745 85ee      	LDD  R30,Y+14
000746 85ff      	LDD  R31,Y+14+1
000747 9734      	SBIW R30,4
000748 87ee      	STD  Y+14,R30
000749 87ff      	STD  Y+14+1,R31
00074a 85ae      	LDD  R26,Y+14
00074b 85bf      	LDD  R27,Y+14+1
00074c 9614      	ADIW R26,4
00074d 910d      	LD   R16,X+
00074e 911c      	LD   R17,X
00074f 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000750 935a      	ST   -Y,R21
                 __SAVELOCR5:
000751 934a      	ST   -Y,R20
                 __SAVELOCR4:
000752 933a      	ST   -Y,R19
                 __SAVELOCR3:
000753 932a      	ST   -Y,R18
                 __SAVELOCR2:
000754 931a      	ST   -Y,R17
000755 930a      	ST   -Y,R16
000756 9508      	RET
                 
                 __LOADLOCR6:
000757 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000758 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000759 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00075a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00075b 8119      	LDD  R17,Y+1
00075c 8108      	LD   R16,Y
00075d 9508      	RET
                 
                 __ADDW2R15:
00075e 2400      	CLR  R0
00075f 0daf      	ADD  R26,R15
000760 1db0      	ADC  R27,R0
000761 9508      	RET
                 
                 __ANEGW1:
000762 95f1      	NEG  R31
000763 95e1      	NEG  R30
000764 40f0      	SBCI R31,0
000765 9508      	RET
                 
                 __ANEGD1:
000766 95f0      	COM  R31
000767 9560      	COM  R22
000768 9570      	COM  R23
000769 95e1      	NEG  R30
00076a 4fff      	SBCI R31,-1
00076b 4f6f      	SBCI R22,-1
00076c 4f7f      	SBCI R23,-1
00076d 9508      	RET
                 
                 __ANEGD2:
00076e 95b0      	COM  R27
00076f 9580      	COM  R24
000770 9590      	COM  R25
000771 95a1      	NEG  R26
000772 4fbf      	SBCI R27,-1
000773 4f8f      	SBCI R24,-1
000774 4f9f      	SBCI R25,-1
000775 9508      	RET
                 
                 __CWD1:
000776 2f6f      	MOV  R22,R31
000777 0f66      	ADD  R22,R22
000778 0b66      	SBC  R22,R22
000779 2f76      	MOV  R23,R22
00077a 9508      	RET
                 
                 __MULW12U:
00077b 9ffa      	MUL  R31,R26
00077c 2df0      	MOV  R31,R0
00077d 9feb      	MUL  R30,R27
00077e 0df0      	ADD  R31,R0
00077f 9fea      	MUL  R30,R26
000780 2de0      	MOV  R30,R0
000781 0df1      	ADD  R31,R1
000782 9508      	RET
                 
                 __MULD12U:
000783 9f7a      	MUL  R23,R26
000784 2d70      	MOV  R23,R0
000785 9f6b      	MUL  R22,R27
000786 0d70      	ADD  R23,R0
000787 9ff8      	MUL  R31,R24
000788 0d70      	ADD  R23,R0
000789 9fe9      	MUL  R30,R25
00078a 0d70      	ADD  R23,R0
00078b 9f6a      	MUL  R22,R26
00078c 2d60      	MOV  R22,R0
00078d 0d71      	ADD  R23,R1
00078e 9ffb      	MUL  R31,R27
00078f 0d60      	ADD  R22,R0
000790 1d71      	ADC  R23,R1
000791 9fe8      	MUL  R30,R24
000792 0d60      	ADD  R22,R0
000793 1d71      	ADC  R23,R1
000794 2788      	CLR  R24
000795 9ffa      	MUL  R31,R26
000796 2df0      	MOV  R31,R0
000797 0d61      	ADD  R22,R1
000798 1f78      	ADC  R23,R24
000799 9feb      	MUL  R30,R27
00079a 0df0      	ADD  R31,R0
00079b 1d61      	ADC  R22,R1
00079c 1f78      	ADC  R23,R24
00079d 9fea      	MUL  R30,R26
00079e 2de0      	MOV  R30,R0
00079f 0df1      	ADD  R31,R1
0007a0 1f68      	ADC  R22,R24
0007a1 1f78      	ADC  R23,R24
0007a2 9508      	RET
                 
                 __MULW12:
0007a3 d032      	RCALL __CHKSIGNW
0007a4 dfd6      	RCALL __MULW12U
0007a5 f40e      	BRTC __MULW121
0007a6 dfbb      	RCALL __ANEGW1
                 __MULW121:
0007a7 9508      	RET
                 
                 __MULD12:
0007a8 d03b      	RCALL __CHKSIGND
0007a9 dfd9      	RCALL __MULD12U
0007aa f40e      	BRTC __MULD121
0007ab dfba      	RCALL __ANEGD1
                 __MULD121:
0007ac 9508      	RET
                 
                 __DIVD21U:
0007ad 933f      	PUSH R19
0007ae 934f      	PUSH R20
0007af 935f      	PUSH R21
0007b0 2400      	CLR  R0
0007b1 2411      	CLR  R1
0007b2 01a0      	MOVW R20,R0
0007b3 e230      	LDI  R19,32
                 __DIVD21U1:
0007b4 0faa      	LSL  R26
0007b5 1fbb      	ROL  R27
0007b6 1f88      	ROL  R24
0007b7 1f99      	ROL  R25
0007b8 1c00      	ROL  R0
0007b9 1c11      	ROL  R1
0007ba 1f44      	ROL  R20
0007bb 1f55      	ROL  R21
0007bc 1a0e      	SUB  R0,R30
0007bd 0a1f      	SBC  R1,R31
0007be 0b46      	SBC  R20,R22
0007bf 0b57      	SBC  R21,R23
0007c0 f428      	BRCC __DIVD21U2
0007c1 0e0e      	ADD  R0,R30
0007c2 1e1f      	ADC  R1,R31
0007c3 1f46      	ADC  R20,R22
0007c4 1f57      	ADC  R21,R23
0007c5 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0007c6 60a1      	SBR  R26,1
                 __DIVD21U3:
0007c7 953a      	DEC  R19
0007c8 f759      	BRNE __DIVD21U1
0007c9 01fd      	MOVW R30,R26
0007ca 01bc      	MOVW R22,R24
0007cb 01d0      	MOVW R26,R0
0007cc 01ca      	MOVW R24,R20
0007cd 915f      	POP  R21
0007ce 914f      	POP  R20
0007cf 913f      	POP  R19
0007d0 9508      	RET
                 
                 __DIVD21:
0007d1 d012      	RCALL __CHKSIGND
0007d2 dfda      	RCALL __DIVD21U
0007d3 f40e      	BRTC __DIVD211
0007d4 df91      	RCALL __ANEGD1
                 __DIVD211:
0007d5 9508      	RET
                 
                 __CHKSIGNW:
0007d6 94e8      	CLT
0007d7 fff7      	SBRS R31,7
0007d8 c002      	RJMP __CHKSW1
0007d9 df88      	RCALL __ANEGW1
0007da 9468      	SET
                 __CHKSW1:
0007db ffb7      	SBRS R27,7
0007dc c006      	RJMP __CHKSW2
0007dd 95b1      	NEG  R27
0007de 95a1      	NEG  R26
0007df 40b0      	SBCI R27,0
0007e0 f800      	BLD  R0,0
0007e1 9403      	INC  R0
0007e2 fa00      	BST  R0,0
                 __CHKSW2:
0007e3 9508      	RET
                 
                 __CHKSIGND:
0007e4 94e8      	CLT
0007e5 ff77      	SBRS R23,7
0007e6 c002      	RJMP __CHKSD1
0007e7 df7e      	RCALL __ANEGD1
0007e8 9468      	SET
                 __CHKSD1:
0007e9 ff97      	SBRS R25,7
0007ea c004      	RJMP __CHKSD2
0007eb df82      	RCALL __ANEGD2
0007ec f800      	BLD  R0,0
0007ed 9403      	INC  R0
0007ee fa00      	BST  R0,0
                 __CHKSD2:
0007ef 9508      	RET
                 
                 __GETW1P:
0007f0 91ed      	LD   R30,X+
0007f1 91fc      	LD   R31,X
0007f2 9711      	SBIW R26,1
0007f3 9508      	RET
                 
                 __GETW1PF:
0007f4 9005      	LPM  R0,Z+
0007f5 91f4      	LPM  R31,Z
0007f6 2de0      	MOV  R30,R0
0007f7 9508      	RET
                 
                 __PUTPARD1:
0007f8 937a      	ST   -Y,R23
0007f9 936a      	ST   -Y,R22
0007fa 93fa      	ST   -Y,R31
0007fb 93ea      	ST   -Y,R30
0007fc 9508      	RET
                 
                 _delay_ms:
0007fd 9610      	adiw r26,0
0007fe f039      	breq __delay_ms1
                 __delay_ms0:
0007ff 95a8      	wdr
                +
000800 ed80     +LDI R24 , LOW ( 0x7D0 )
000801 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000802 9701     +SBIW R24 , 1
000803 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000804 9711      	sbiw r26,1
000805 f7c9      	brne __delay_ms0
                 __delay_ms1:
000806 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  39 r1 :  14 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   4 r7 :   5 
r8 :   5 r9 :   4 r10:   4 r11:   1 r12:   4 r13:   4 r14:   0 r15:  21 
r16:  48 r17:  60 r18:  36 r19:  39 r20:  32 r21:  32 r22:  35 r23:  21 
r24:  47 r25:  14 r26: 174 r27:  79 r28:  31 r29:   1 r30: 379 r31: 167 
x  :  39 y  : 302 z  :  23 
Registers used: 33 out of 35 (94.3%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  20 
adiw  :  37 and   :   0 andi  :   9 asr   :   0 bclr  :   0 bld   :  10 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   4 break :   0 breq  :  36 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   0 brmi  :   0 brne  :  63 brpl  :   1 brsh  :   3 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  : 114 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  20 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   6 
cp    :  13 cpc   :   5 cpi   :  81 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  18 inc   :  10 jmp   :  24 ld    :  74 ldd   : 100 ldi   : 204 
lds   :   5 lpm   :  17 lsl   :   2 lsr   :   0 mov   :  62 movw  :  34 
mul   :  15 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   1 
ori   :   7 out   :  32 pop   :  14 push  :  14 rcall :  33 ret   :  52 
reti  :   2 rjmp  : 116 rol   :   8 ror   :   0 sbc   :   5 sbci  :  16 
sbi   :   5 sbic  :   1 sbis  :   0 sbiw  :  26 sbr   :   1 sbrc  :   4 
sbrs  :  15 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   6 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 120 std   :  56 sts   :   7 sub   :   2 subi  :  31 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 67 out of 116 (57.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00100e   3592    518   4110   16384  25.1%
[.dseg] 0x000060 0x00029e      0    318    318    1024  31.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 11 warnings
